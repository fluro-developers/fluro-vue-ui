import Vue from 'vue';
import draggable from 'vuedraggable';
import { Chrome } from 'vue-color';
import SignaturePad from 'signature_pad';
import { FilterService, moment } from 'fluro';
import { mapFields } from 'vuex-map-fields';
import async from 'async';
import tippy from 'tippy.js';
import { Node, Mark, EditorMenuBar, EditorContent, EditorFloatingMenu, EditorMenuBubble, Editor } from 'tiptap';
import { replaceText, toggleBlockType, toggleMark, updateMark, markInputRule } from 'tiptap-commands';
import { Suggestions, Bold, Italic, Strike, Underline, Link, HorizontalRule, Blockquote, CodeBlock, HardBreak, Heading, BulletList, OrderedList, ListItem, Code, History, Table, TableHeader, TableCell, TableRow, Placeholder, CodeBlockHighlight } from 'tiptap-extensions';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var lodash = createCommonjsModule(function (module, exports) {
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined$1;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined$1) {
        result = result === undefined$1 ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined$1 : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined$1,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
        symIterator = Symbol ? Symbol.iterator : undefined$1,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined$1;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined$1;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined$1 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined$1 : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined$1 && !eq(object[key], value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined$1 : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined$1) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined$1) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined$1) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined$1 : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined$1
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined$1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined$1 ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined$1;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined$1 : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined$1 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined$1
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined$1 && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined$1;

      var isCommon = newValue === undefined$1;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined$1;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
          if (newValue === undefined$1) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined$1;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined$1,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined$1;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined$1 ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined$1,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined$1,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined$1;

        if (newValue === undefined$1) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined$1 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined$1;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
            args, holders, undefined$1, undefined$1, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined$1 && other === undefined$1) {
          return defaultValue;
        }
        if (value !== undefined$1) {
          result = value;
        }
        if (other !== undefined$1) {
          if (result === undefined$1) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined$1 ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined$1;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined$1,
          newHoldersRight = isCurry ? undefined$1 : holders,
          newPartials = isCurry ? partials : undefined$1,
          newPartialsRight = isCurry ? undefined$1 : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined$1, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined$1;
      }
      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined$1 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined$1;
      }
      var data = isBindKey ? undefined$1 : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined$1
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined$1, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined$1 ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined$1 : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined$1) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined$1
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined$1, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined$1;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined$1;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined$1,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined$1 || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined$1, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined$1 ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined$1;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined$1;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined$1, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined$1, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined$1 ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined$1, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined$1
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined$1);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined$1) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined$1 : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined$1;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined$1
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined$1 : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined$1 : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined$1;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined$1;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined$1;
        return result;
      }

      function cancel() {
        if (timerId !== undefined$1) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
      }

      function flush() {
        return timerId === undefined$1 ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined$1) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined$1) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined$1 ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      var result = customizer ? customizer(value, other) : undefined$1;
      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined$1;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined$1 ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined$1, customDefaultsMerge);
      return apply(mergeWith, undefined$1, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined$1 : baseGet(object, path);
      return result === undefined$1 ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined$1;
      }
      while (++index < length) {
        var value = object == null ? undefined$1 : object[toKey(path[index])];
        if (value === undefined$1) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined$1) {
        upper = lower;
        lower = undefined$1;
      }
      if (upper !== undefined$1) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined$1) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined$1) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined$1;
      }
      if (floating === undefined$1) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined$1;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined$1;
        }
      }
      if (lower === undefined$1 && upper === undefined$1) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined$1) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined$1
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined$1;
      }
      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined$1;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined$1, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined$1) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined$1 : pattern;

      if (pattern === undefined$1) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined$1, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined$1 : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined$1;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined$1;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined$1;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined$1;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined$1) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined$1
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(commonjsGlobal));
});

//
var script = {
  props: {
    value: {
      type: Object,

      default() {
        return {};
      }

    },
    nickName: {
      type: String,

      default() {
        var user = this.user;

        if (user && user.firstName) {
          return user.firstName;
        }
      }

    },
    conversation: {
      type: [String, Object] // default () {
      //     return '5e97a80ecd657984f8a37a62';
      // }

    }
  },

  mounted() {
    this.mount();
  },

  beforeDestroy() {
    this.unmount();
  },

  activated() {
    this.mount();
  },

  deactivated() {
    this.unmount();
  },

  data() {
    return {
      sending: false,
      empty: true,
      feed: [],
      chatCache: 0,
      cacheBuster: null,
      proposed: {},
      timer: null,
      loadingConversation: false
    };
  },

  watch: {
    chatCache: 'reloadConversation',
    conversationCheckString: 'init'
  },
  computed: {
    notConnected() {
      return !this.conversationJoined;
    },

    initializing() {
      return this.loadingConversation && !this.feed.length;
    },

    conversationCheckString() {
      return this.conversationID + this.nickName;
    },

    conversationUrl() {
      return `/chat/${this.conversationID}`;
    },

    conversationID() {
      return this.$fluro.utils.getStringID(this.conversation);
    }

  },
  methods: {
    mount() {
      this.init();
    },

    unmount() {
      this.unsubscribe();
    },

    init() {
      var id = this.conversationID;

      if (id) {
        this.joinConversation();
      } else {
        this.leaveConversation();
      }
    },

    reloadConversation() {
      var self = this;

      if (!self.conversationID) {
        return;
      }

      if (self.loadingConversation) {
        return;
      }

      self.loadingConversation = true; //////////////////////////////////////////////

      var promise = self.$fluro.api.get(`/chat/${self.conversationID}/feed?=${self.chatCache}`, {
        cache: false
      });
      promise.then(function (res) {
        self.loadingConversation = false;
        var thread = res.data;

        if (!thread || !thread.users) {
          return;
        }

        self.mapConversation(thread);
      }).catch(function (err) {
        self.loadingConversation = false;
        console.log('Error', err);
      });
      return promise;
    },

    poll() {
      this.reloadConversation();
    },

    subscribe() {
      if (this.timer) {
        return;
      }

      this.timer = setInterval(this.poll, 3000);
    },

    unsubscribe() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
    },

    scrollToBottom(force) {
      var self = this;
      var element = self.$refs.body;

      if (!element) {
        return;
      }

      element = element.$el; //////////////////////////////////////

      if (force === true) ; else {
        var currentScroll = element.scrollTop;
        var availableScroll = element.scrollHeight - element.clientHeight;

        if (availableScroll - currentScroll > 50) {
          return;
        }
      } //////////////////////////////////////


      if (!self.feed || !self.feed.length) {
        return;
      } //////////////////////////////////////


      self.$nextTick(function () {
        if (!element) {
          return;
        }

        if (self.empty || force === true) {
          self.empty = false;
          element.scrollTop = element.scrollHeight;
          return;
        } //Smooth animation


        element.scrollTo({
          top: element.scrollHeight,
          left: 0,
          behavior: 'smooth'
        });
      });
    },

    mapConversation(thread) {
      var self = this; //Get the user lookup table

      var lookup = thread.users;
      var selfID = thread.authorID;

      var array = lodash.chain(thread.messages).reduce(function (set, message) {
        var authorID = message.authorID; //Get the last item in the set

        var previousParagraph = lodash.last(set);

        if (previousParagraph) {
          if (previousParagraph.authorID == authorID) {
            previousParagraph.messages.push(message);
            return set;
          }
        } // console.log('SELF ID', selfID, authorID)
        ///////////////////////////////////
        //Create a new paragraph


        var paragraph = {
          _id: message._id,
          //use the first message
          authorID,
          date: message.created,
          author: lookup[authorID],
          messages: [message],
          self: selfID == authorID
        }; //Insert the paragraph

        set.push(paragraph);
        return set;
      }, []).value(); ///////////////////
      //console.log('Feed updated', array[array.length - 1]);


      self.feed = array;
      self.scrollToBottom();
    },

    leaveConversation() {
      this.unsubscribe();
      this.feed = [];
      this.conversationJoined = false;
    },

    joinConversation() {
      var self = this; //We're already joined the conversation

      if (self.conversationJoined) {
        console.log('Already joined');
        return;
      } //We're already joined the conversation


      if (!self.conversationID) {
        console.log('No conversation id specified');
        return;
      }

      if (!self.nickName) {
        console.log('No nickname');
        return;
      } ///////////////////////////////////////


      return self.$fluro.api.post(`${self.conversationUrl}/join`, {
        nickName: self.nickName
      }).then(function (res) {
        //console.log('Joined the conversation!', res);
        self.conversationJoined = true;
        self.subscribe();
      });
    },

    updateTextAreaSize($event) {
      var target = this.$refs.textarea;

      if (!target) {
        return;
      }

      if (target.value && target.value.length) {
        target.style.minHeight = 0;
        target.style.minHeight = Math.min(150, target.scrollHeight) + 'px';
      } else {
        target.style.minHeight = 0;
      }
    },

    sendMessage($event) {
      var self = this;
      console.log('Send MEssage!!!', $event);

      if ($event) {
        if ($event.shiftKey) {
          return;
        }

        $event.preventDefault();
        $event.stopPropagation();
      }

      self.sending = true;
      var message = self.proposed.message; //console.log('Send Message!', message)

      self.proposed.message = '';
      self.updateTextAreaSize();
      self.$fluro.api.post(`${self.conversationUrl}`, {
        message
      }).then(function (res) {
        console.log('Posted!', res.data);
        self.chatCache++;
        self.scrollToBottom();
        self.proposed.message = '';
        self.updateTextAreaSize();
        self.sending = false;
      }).catch(function (err) {
        self.sending = false;
      });
    }

  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"chatbox"},[(_vm.notConnected)?_c('div',{staticClass:"notconnected"},[_vm._t("notconnected")],2):_vm._e(),_vm._v(" "),_c('flex-column-header',{staticClass:"chatbox-header"},[_vm._t("header")],2),_vm._v(" "),_c('flex-column',{attrs:{"center":""}},[(_vm.initializing)?_c('div',{staticClass:"spinner",staticStyle:{"text-align":"center"}},[_c('v-progress-circular',{attrs:{"indeterminate":"","color":"rgba(180,180,180,0.5)"}})],1):_c('flex-column-body',{ref:"body",staticClass:"chatbox-body"},[_c('div',{staticClass:"message-container"},_vm._l((_vm.feed),function(paragraph){return _c('div',{key:paragraph._id,staticClass:"paragraph",class:{self:paragraph.self}},[_c('div',{staticClass:"avatar-column"},[_c('div',{staticClass:"avatar"},[(paragraph.author.avatarUrl)?_c('img',{attrs:{"src":paragraph.author.avatarUrl}}):_c('span',{staticClass:"placeholder",style:({backgroundColor:paragraph.author.color})},[_vm._v(_vm._s(paragraph.author.nickName[0]))])])]),_vm._v(" "),_c('div',{staticClass:"text"},[_c('div',{staticClass:"chat-name"},[_c('strong',[_vm._v(_vm._s(paragraph.author.nickName))]),_vm._v(" "),_c('div',{staticClass:"chat-time"},[_vm._v(_vm._s(_vm._f("timeago")(paragraph.date)))])]),_vm._v(" "),_c('div',{staticClass:"messages"},_vm._l((paragraph.messages),function(message){return _c('div',{key:message._id,staticClass:"message-entry"},[_c('div',{staticClass:"message"},[_vm._v(_vm._s(message.message))])])}),0)])])}),0)])],1),_vm._v(" "),(_vm.conversationID)?_c('flex-column-footer',{staticClass:"chatbox-footer"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.proposed.message),expression:"proposed.message"}],ref:"textarea",attrs:{"placeholder":"Type your message and press enter..."},domProps:{"value":(_vm.proposed.message)},on:{"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.proposed, "message", $event.target.value);},_vm.updateTextAreaSize],"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.sendMessage($event)}}})]),_vm._v(" "),_c('v-flex',{staticStyle:{"padding-left":"10px"},attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",staticStyle:{"margin-left":"10px"},attrs:{"icon":""},on:{"click":function($event){return _vm.sendMessage($event)}}},[_c('fluro-icon',{attrs:{"icon":_vm.sending ?  'spinner-thirds' : "paper-plane","spin":_vm.sending}})],1)],1)],1),_vm._v(" "),_vm._t("footer")],2):_vm._e()],1)};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = function (inject) {
    if (!inject) return
    inject("data-v-b50a8b84_0", { source: ".border-top[data-v-b50a8b84]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-b50a8b84]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-b50a8b84]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-b50a8b84]{border-left:1px solid rgba(0,0,0,.05)}.chatbox[data-v-b50a8b84]{position:relative}.chatbox .notconnected[data-v-b50a8b84]{display:flex;align-items:center;justify-content:center;position:absolute;left:0;bottom:0;right:0;top:0;backdrop-filter:blur(4px);z-index:6}.paragraph[data-v-b50a8b84]{border-radius:4px;padding:5px 10px 10px;display:flex}.paragraph .chat-name[data-v-b50a8b84]{display:flex;align-items:center}.paragraph strong[data-v-b50a8b84]{flex:1;display:block}.paragraph .chat-time[data-v-b50a8b84]{opacity:0;flex:none;font-size:10px}.paragraph[data-v-b50a8b84]:nth-child(odd){background:rgba(0,0,0,.02)}.paragraph:hover .chat-time[data-v-b50a8b84]{opacity:.5}.paragraph .avatar-column[data-v-b50a8b84]{flex:none;width:40px;padding:4px 10px 4px 0;overflow:hidden}.paragraph .avatar-column .placeholder[data-v-b50a8b84]{display:block;height:0;padding-bottom:100%;background:rgba(0,0,0,.1);border-radius:5px;text-align:center;text-transform:uppercase;letter-spacing:.1em;line-height:30px;color:#fff}.paragraph .avatar-column img[data-v-b50a8b84]{width:100%;height:auto;border-radius:5px}.paragraph .text[data-v-b50a8b84]{flex:1}.paragraph .messages[data-v-b50a8b84]{padding-right:10px}.paragraph .message[data-v-b50a8b84]{text-align:left;opacity:.9;white-space:pre-line;margin-bottom:2px}.casual .avatar-column[data-v-b50a8b84]{padding-top:0}.casual .avatar[data-v-b50a8b84]{border-radius:100%;overflow:hidden;width:34px;height:34px;display:block;vertical-align:bottom}.casual .paragraph[data-v-b50a8b84]{background:0 0!important}.casual .message[data-v-b50a8b84]{line-height:24px;background:#e9ebee;color:#1c1e21;padding:5px 15px;border-radius:.3em 20px 20px .3em;display:inline-block}.casual .message-entry:last-child .message[data-v-b50a8b84]{border-bottom-left-radius:20px}.casual .message-entry:first-child .message[data-v-b50a8b84]{border-top-left-radius:20px}.casual .message-entry:only-child .message[data-v-b50a8b84]{border-radius:20px}.casual .messages[data-v-b50a8b84]{padding-right:10%}.casual .self .avatar[data-v-b50a8b84],.casual .self .chat-name[data-v-b50a8b84]{display:none}.casual .self .messages[data-v-b50a8b84]{padding-left:10%;padding-right:10px}.casual .self .message-entry[data-v-b50a8b84]{text-align:right}.casual .self .message[data-v-b50a8b84]{background:#09f;color:#fff;border-radius:20px .3em .3em 20px}.casual .self .message-entry:last-child .message[data-v-b50a8b84]{border-bottom-right-radius:20px}.casual .self .message-entry:first-child .message[data-v-b50a8b84]{border-top-right-radius:20px}.casual .self .message-entry:only-child .message[data-v-b50a8b84]{border-radius:20px}.chatbox-footer[data-v-b50a8b84]{border-top:1px solid rgba(0,0,0,.1);padding:10px}.chatbox-footer textarea[data-v-b50a8b84]{max-height:150px;overflow:auto;resize:none;outline:0;border:none;width:100%;display:block;border-radius:5px;background-color:rgba(0,0,0,.05);color:inherit;padding:0 5px;height:30px;border:1px solid rgba(0,0,0,.1);line-height:30px}.chatbox-footer textarea[data-v-b50a8b84]:focus{border:1px solid transparent}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__ = "data-v-b50a8b84";
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    createInjector,
    undefined,
    undefined
  );

/*!
 * vue-youtube v1.4.0
 * (c) 2019 Antério Vieira
 * Released under the MIT License.
 */

var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var getYoutubeId = createCommonjsModule$1(function (module, exports) {
(function (root, factory) {
  {
    module.exports = factory();
  }
}(commonjsGlobal$1, function (exports) {

  return function (url, opts) {
    if (opts == undefined) {
      opts = {fuzzy: true};
    }

    if (/youtu\.?be/.test(url)) {

      // Look first for known patterns
      var i;
      var patterns = [
        /youtu\.be\/([^#\&\?]{11})/,  // youtu.be/<id>
        /\?v=([^#\&\?]{11})/,         // ?v=<id>
        /\&v=([^#\&\?]{11})/,         // &v=<id>
        /embed\/([^#\&\?]{11})/,      // embed/<id>
        /\/v\/([^#\&\?]{11})/         // /v/<id>
      ];

      // If any pattern matches, return the ID
      for (i = 0; i < patterns.length; ++i) {
        if (patterns[i].test(url)) {
          return patterns[i].exec(url)[1];
        }
      }

      if (opts.fuzzy) {
        // If that fails, break it apart by certain characters and look
        // for the 11 character key
        var tokens = url.split(/[\/\&\?=#\.\s]/g);
        for (i = 0; i < tokens.length; ++i) {
          if (/^[^#\&\?]{11}$/.test(tokens[i])) {
            return tokens[i];
          }
        }
      }
    }

    return null;
  };

}));
});

var player = require('youtube-player');

var UNSTARTED = -1;
var ENDED = 0;
var PLAYING = 1;
var PAUSED = 2;
var BUFFERING = 3;
var CUED = 5;

var Youtube = {
  name: 'Youtube',
  props: {
    videoId: String,
    playerVars: {
      type: Object,
      default: function () { return ({}); }
    },
    height: {
      type: [Number, String],
      default: 360
    },
    width: {
      type: [Number, String],
      default: 640
    },
    resize: {
      type: Boolean,
      default: false
    },
    resizeDelay: {
      type: Number,
      default: 100
    },
    nocookie: {
      type: Boolean,
      default: false
    },
    fitParent: {
      type: Boolean,
      default: false
    }
  },
  data: function data () {
    return {
      player: {},
      events: ( obj = {}, obj[UNSTARTED] = 'unstarted', obj[PLAYING] = 'playing', obj[PAUSED] = 'paused', obj[ENDED] = 'ended', obj[BUFFERING] = 'buffering', obj[CUED] = 'cued', obj ),
      resizeTimeout: null
    }
    var obj;
  },
  computed: {
    aspectRatio: function aspectRatio () {
      return this.width / this.height
    }
  },
  methods: {
    playerReady: function playerReady (e) {
      this.$emit('ready', e.target);
    },
    playerStateChange: function playerStateChange (e) {
      if (e.data !== null && e.data !== UNSTARTED) {
        this.$emit(this.events[e.data], e.target);
      }
    },
    playerError: function playerError (e) {
      this.$emit('error', e.target);
    },
    updatePlayer: function updatePlayer (videoId) {
      if (!videoId) {
        this.player.stopVideo();
        return
      }

      if (this.playerVars.autoplay === 1) {
        this.player.loadVideoById({ videoId: videoId });
        return
      }

      this.player.cueVideoById({ videoId: videoId });
    },
    resizeProportionally: function resizeProportionally () {
      var this$1 = this;

      this.player.getIframe().then(function (iframe) {
        var width = this$1.fitParent
          ? iframe.parentElement.offsetWidth
          : iframe.offsetWidth;
        var height = width / this$1.aspectRatio;
        this$1.player.setSize(width, height);
      });
    },
    onResize: function onResize () {
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = setTimeout(
        this.resizeProportionally,
        this.resizeDelay
      );
    }
  },
  watch: {
    videoId: 'updatePlayer',
    resize: function resize (val) {
      if (val) {
        window.addEventListener('resize', this.onResize);
        this.resizeProportionally();
      } else {
        window.removeEventListener('resize', this.onResize);
        this.player.setSize(this.width, this.height);
      }
    },
    width: function width (val) {
      this.player.setSize(val, this.height);
    },
    height: function height (val) {
      this.player.setSize(this.width, val);
    }
  },
  beforeDestroy: function beforeDestroy () {
    if (this.player !== null && this.player.destroy) {
      this.player.destroy();
      delete this.player;
    }

    if (this.resize) {
      window.removeEventListener('resize', this.onResize);
    }
  },
  mounted: function mounted () {
    window.YTConfig = {
      host: 'https://www.youtube.com/iframe_api'
    };

    var host = this.nocookie ? 'https://www.youtube-nocookie.com' : 'https://www.youtube.com';

    this.player = player(this.$el, {
      host: host,
      width: this.width,
      height: this.height,
      videoId: this.videoId,
      playerVars: this.playerVars
    });

    this.player.on('ready', this.playerReady);
    this.player.on('stateChange', this.playerStateChange);
    this.player.on('error', this.playerError);

    if (this.resize) {
      window.addEventListener('resize', this.onResize);
    }

    if (this.fitParent) {
      this.resizeProportionally();
    }
  },
  render: function render (h) {
    return h('div')
  }
};

function plugin (Vue) {
  Vue.prototype.$youtube = {
    getIdFromUrl: getYoutubeId
  };

  Vue.component('youtube', Youtube);
}

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(plugin);
}

const service = {};
const lookup = {}; /////////////////////////////

service.load = function (path, generatePromise, fullModule) {
  return new Promise(function (resolve, reject) {
    //Check if we've already imported this component
    var alreadyImported = lookup[path]; //If we haven't then run the promise generate function

    if (!alreadyImported) {
      // console.log('Create promise!', path);
      alreadyImported = lookup[path] = generatePromise();
    } //////////////////////////////


    alreadyImported.then(function (module) {
      if (fullModule) {
        resolve(module);
      } // console.log('Resolve Default Module', path);


      return resolve(module.default);
    }).catch(reject);
  });
}; /////////////////////////////

//
var script$1 = {
  components: {
    // vimeoPlayer: vueVimeoPlayer,
    youtubeEmbed: Youtube
  },

  data() {
    return {
      ready: true
    };
  },

  props: {
    item: Object,
    width: {
      type: Number
    },
    height: {
      type: Number
    },
    cacheKey: [String, Number],
    options: {
      type: Object,

      default() {
        return {};
      }

    }
  },

  mounted() {
    var self = this;

    if (self.provider == 'vimeo') {
      self.ready = false;
      service.load('vue-vimeo-player', function () {
        return import('./bundle.es-1ec62e9d.js');
      }, true).then(function (imported) {
        self.$options.components.vimeoPlayer = imported.vueVimeoPlayer;
        console.log('Loaded vimeo player');
        self.ready = true;
      });
    }
  },

  // data() {
  //     return {
  //         style:{}
  //     }
  // },
  computed: {
    provider() {
      if (this.item) {
        return this.item.assetType;
      }
    },

    mediaID() {
      if (this.item) {
        switch (this.provider) {
          case 'upload':
            break;

          default:
            return this.$fluro.video.getAssetMediaIDFromURL(lodash.get(this, `item.external.${this.provider}`), this.provider);
        } // if (this.item.assetMediaID) {
        //     return this.item.assetMediaID;
        // }
        // if (this.item.external) {
        //     if (this.item.external.youtube) {
        //         return this.item.external.youtube
        //     }
        //     if (this.item.external.vimeo) {
        //         return this.item.external.vimeo
        //     }
        // }

      }
    },

    classes() {
      var output = {};

      if (this.item) {
        switch (this.item.assetType) {
          case 'youtube':
          case 'vimeo':
          case 's3':
          case 'embed':
          case 'upload':
            var key = `fluro-video-${this.item.assetType}`;
            output[key] = true;
            break;
        }
      }

      return output;
    },

    computedWidth() {
      return lodash.get(this.item, 'width') || this.width || 1920;
    },

    computedHeight() {
      return lodash.get(this.item, 'height') || this.height || 1080;
    },

    aspectRatio() {
      return this.computedHeight / this.computedWidth * 100;
    },

    style() {
      var self = this;
      var style = {
        color: '#fff',
        backgroundColor: '#eee',
        backgroundImage: self.backgroundImage
      };

      if (self.aspectRatio) {
        style.height = `0`;
        style.paddingBottom = `${self.aspectRatio}%`;
      }

      return style;
    },

    videoID() {
      return this.$fluro.utils.getStringID(this.item);
    },

    posterUrl() {
      var self = this;
      var params = {
        extension: 'jpg'
      };

      if (self.cacheKey && String(self.cacheKey.length)) {
        params.cacheKey = self.cacheKey;
      }

      return self.$fluro.asset.posterUrl(self.item, null, null, params);
    },

    assetUrl() {
      var self = this;
      var params = {};

      if (self.cacheKey && String(self.cacheKey.length)) {
        params.cacheKey = self.cacheKey;
      }

      return self.$fluro.asset.getUrl(self.item, params);
    },

    backgroundImage() {
      if (this.posterUrl) {
        return `url(${this.posterUrl})`;
      } else {
        return;
      }
    }

  }
};

/* script */
const __vue_script__$1 = script$1;

/* template */
var __vue_render__$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('div',{staticClass:"fluro-video",class:_vm.classes,style:(_vm.style)},[(_vm.provider == 'youtube')?_c('div',{staticClass:"fluro-video-embed"},[_c('youtube-embed',{attrs:{"video-id":_vm.mediaID}})],1):_vm._e(),_vm._v(" "),(_vm.provider == 'upload')?_c('div',{staticClass:"fluro-video-embed"},[_c('video',{staticClass:"embed-responsive-item",attrs:{"poster":_vm.posterUrl,"controls":""}},[_c('source',{attrs:{"src":_vm.assetUrl,"type":_vm.item.mimetype}})])]):_vm._e(),_vm._v(" "),(_vm.provider == 'embed')?_c('div',{staticClass:"fluro-video-embed",domProps:{"innerHTML":_vm._s(_vm.item.external.embed)}}):_vm._e(),_vm._v(" "),(_vm.provider == 'vimeo')?_c('div',{staticClass:"fluro-video-embed"},[_c('vimeo-player',{attrs:{"video-id":_vm.mediaID}})],1):_vm._e(),_vm._v(" "),_vm._t("default")],2):_vm._e()};
var __vue_staticRenderFns__$1 = [];

  /* style */
  const __vue_inject_styles__$1 = function (inject) {
    if (!inject) return
    inject("data-v-300caec5_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-video{overflow:hidden;width:100%;position:relative;background-size:cover;background-repeat:no-repeat;background-position:center center}.fluro-video .fluro-video-embed{position:absolute;width:100%;height:100%}.fluro-video .fluro-video-embed iframe,.fluro-video .fluro-video-embed video{width:100%!important;height:100%!important;left:0!important;top:0!important;right:0!important;bottom:0!important;position:absolute!important;display:block!important}.fluro-video img{width:100%;display:block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1 = undefined;
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1 = normalizeComponent(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$2 = {
  components: {
    FluroVideo: __vue_component__$1
  },
  props: {
    value: {
      type: Object
      /**
      default() {
      	return {
      		startDate:4326236,
      		endDate:43623462346,
      		allowFullscreen:true,
      		
      		//Can pass through a url to stream
      		url:'rtmp.fluro.io/34262346/index.m3u8',
      		
      		//Or can pass through an id of a video
      		video:{
      _id:'FLUROID',
      external:{
      youtube:'32462346234'
      }
      		},
      	}
      }
      /**/

    }
  }
};

/* script */
const __vue_script__$2 = script$2;

/* template */
var __vue_render__$2 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-live-stream"},[_vm._v("\n\tLive stream\n")])};
var __vue_staticRenderFns__$2 = [];

  /* style */
  const __vue_inject_styles__$2 = function (inject) {
    if (!inject) return
    inject("data-v-2b796b78_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2 = undefined;
  /* module identifier */
  const __vue_module_identifier__$2 = undefined;
  /* functional template */
  const __vue_is_functional_template__$2 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2 = normalizeComponent(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$3 = {
  props: {
    longpress: {
      type: Boolean
    },
    contain: {
      type: Boolean
    },
    cover: {
      type: Boolean
    },
    spinner: {
      type: Boolean,
      default: true
    },
    placeholder: {
      type: Boolean,
      default: true
    },
    item: [String, Object],
    width: {
      type: Number
    },
    height: {
      type: Number
    },
    imageWidth: {
      type: Number
    },
    imageHeight: {
      type: Number
    },
    from: {
      type: [String, Object]
    },
    cacheKey: [String, Number]
  },

  data() {
    return {
      timer: null,
      loadedImageWidth: 0,
      loadedImageHeight: 0,
      loaded: false
    };
  },

  watch: {
    'url': 'load'
  },

  mounted() {
    var self = this; // self.timer = setTimeout(function() {

    self.load(); // }, 100)
  },

  // beforeDestroy() {
  // clearTimeout(this.timer);
  // },
  methods: {
    load() {
      //console.log('Start Loading')
      var self = this;
      self.loaded = false;

      if (!self.url) {
        return;
      }

      var url = self.url; //Create a new image

      var img = new Image(); //Once the image has loaded

      img.onload = function ($event) {
        self.loaded = true;
        self.$emit('load', $event);
        self.loadedImageWidth = img.width;
        self.loadedImageHeight = img.height;
      }; //Once the image has loaded


      img.onerror = function ($event) {
        self.$emit('error', $event);
      };

      img.src = url;
    }

  },
  computed: {
    style() {
      var styles = {
        backgroundImage: this.backgroundImage
      };

      if (this.width) {
        styles.width = `${this.width}px`;
      } else {
        styles.width = '100%';
      }

      if (this.height) {
        styles.height = `${this.height}px`;
      } else {
        styles.height = 'auto';
      }

      return styles;
    },

    computedWidth() {
      return this.imageWidth || this.loadedImageWidth || this.width || lodash.get(this.item, 'width') || 1;
    },

    computedHeight() {
      return this.imageHeight || this.loadedImageHeight || this.height || lodash.get(this.item, 'height') || 1;
    },

    aspectRatio() {
      return this.computedHeight / this.computedWidth * 100;
    },

    spacer() {
      var self = this;
      var style = {};

      if (self.aspectRatio) {
        style.height = `0`;
        style.paddingBottom = `${self.aspectRatio}%`;
      }

      return style;
    },

    imageID() {
      return this.$fluro.utils.getStringID(this.item);
    },

    url() {
      var self = this;

      if (self.imageID) {
        //Allow the Fluro API to decide the best dimensions based on screensize
        var requestWidth = self.imageWidth || (self.width ? self.width * 2 : null);
        var requestHeight = self.imageHeight || (self.height ? self.height * 2 : null);
        var params = {
          includePublic: true
        };

        if (self.cacheKey && String(self.cacheKey.length)) {
          params.cacheKey = self.cacheKey;
        }

        if (self.from) {
          params.from = self.$fluro.utils.getStringID(self.from);
        }

        return self.$fluro.asset.imageUrl(self.imageID, requestWidth, requestHeight, params);
      } else {
        return;
      }
    },

    placeholderImage() {
      var self = this;

      if (self.imageID) {
        var params = {
          includePublic: true
        };

        if (self.cacheKey && String(self.cacheKey.length)) {
          params.cacheKey = self.cacheKey;
        }

        if (self.from) {
          params.from = self.$fluro.utils.getStringID(self.from);
        }

        var placeholderUrl = self.$fluro.asset.imageUrl(self.imageID, 50, null, params);
        return `url(${placeholderUrl})`;
      } else {
        return;
      }
    },

    backgroundImage() {
      if (!this.url) {
        return;
      }

      return `url(${this.url})`;
    }

  }
};

/* script */
const __vue_script__$3 = script$3;

/* template */
var __vue_render__$3 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-image",class:{loaded:_vm.loaded, cover:_vm.cover, contain:_vm.contain},style:(_vm.style)},[(_vm.longpress)?_c('img',{staticClass:"holder",attrs:{"src":_vm.url}}):_vm._e(),_vm._v(" "),_c('div',{style:(_vm.spacer)}),_vm._v(" "),(!_vm.loaded && _vm.placeholder)?_c('div',{staticClass:"placeholder",style:({backgroundImage:_vm.placeholderImage})}):_vm._e(),_vm._v(" "),(!_vm.loaded && _vm.spinner)?_c('v-progress-circular',{attrs:{"indeterminate":"","color":"rgba(180,180,180,0.5)"}}):_vm._e(),_vm._v(" "),_vm._t("default")],2)};
var __vue_staticRenderFns__$3 = [];

  /* style */
  const __vue_inject_styles__$3 = function (inject) {
    if (!inject) return
    inject("data-v-30dda894_0", { source: ".border-top[data-v-30dda894]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-30dda894]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-30dda894]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-30dda894]{border-left:1px solid rgba(0,0,0,.05)}.fade-enter-active[data-v-30dda894],.fade-leave-active[data-v-30dda894]{transition:opacity .8s}.fade-enter[data-v-30dda894],.fade-leave-to[data-v-30dda894]{opacity:0}.fluro-image[data-v-30dda894]{overflow:hidden;max-width:100%;position:relative;background-size:100% auto;background-repeat:no-repeat;background-position:center center;color:#fff;flex:1 0 auto}.fluro-image .holder[data-v-30dda894]{display:block;position:absolute;left:0;top:0;right:0;bottom:0;opacity:0}.fluro-image .v-progress-circular[data-v-30dda894]{position:absolute;left:50%;top:50%;transform:translate3d(-50%,-50%,0)}.fluro-image .spacer[data-v-30dda894]{position:relative}.fluro-image .placeholder[data-v-30dda894]{position:absolute;left:0;right:0;top:0;bottom:0;background-size:100% auto;background-repeat:no-repeat;background-position:center center}.fluro-image.contain[data-v-30dda894],.fluro-image.contain .placeholder[data-v-30dda894],.fluro-image[contain][data-v-30dda894],.fluro-image[contain] .placeholder[data-v-30dda894]{background-size:contain}.fluro-image.cover[data-v-30dda894],.fluro-image.cover .placeholder[data-v-30dda894],.fluro-image[cover][data-v-30dda894],.fluro-image[cover] .placeholder[data-v-30dda894]{background-size:cover}.fluro-image img[data-v-30dda894]{width:100%;display:block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$3 = "data-v-30dda894";
  /* module identifier */
  const __vue_module_identifier__$3 = undefined;
  /* functional template */
  const __vue_is_functional_template__$3 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$3 = normalizeComponent(
    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
    __vue_inject_styles__$3,
    __vue_script__$3,
    __vue_scope_id__$3,
    __vue_is_functional_template__$3,
    __vue_module_identifier__$3,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroModalMixin = {
  props: {
    options: {
      type: Object,

      default() {
        return {};
      }

    }
  },
  methods: {
    dismiss() {
      this.$emit('dismiss');
    },

    close(result) {
      this.$emit('close', result);
    }

  }
};

//
//
//
//
//
//
//
/////////////////////////////////
var script$4 = {
  props: {
    'id': {
      type: [String, Object]
    },
    'type': {
      type: String,
      default: 'contact'
    },
    'width': {
      type: Number,
      default: 100
    }
  },
  computed: {
    styles() {
      var styleObject = {};

      if (this.url && this.url.length) {
        styleObject.backgroundImage = `url(${this.url})`;
      }

      return styleObject;
    },

    url() {
      if (this.id) {
        return this.$fluro.asset.avatarUrl(this.id, this.type, {
          w: this.width
        });
      }
    }

  }
};

/* script */
const __vue_script__$4 = script$4;

/* template */
var __vue_render__$4 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"avatar"},[_c('div',{staticClass:"avatar-inner",style:(_vm.styles)})])};
var __vue_staticRenderFns__$4 = [];

  /* style */
  const __vue_inject_styles__$4 = function (inject) {
    if (!inject) return
    inject("data-v-9be833f2_0", { source: ".border-top[data-v-9be833f2]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-9be833f2]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-9be833f2]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-9be833f2]{border-left:1px solid rgba(0,0,0,.05)}.avatar[data-v-9be833f2]{display:inline-block;width:24px;vertical-align:middle}.avatar[left][data-v-9be833f2]{margin-right:10px}.avatar[right][data-v-9be833f2]{margin-left:10px}.avatar[md][data-v-9be833f2]{width:34px}.avatar[lg][data-v-9be833f2]{width:48px}.avatar[xl][data-v-9be833f2]{width:64px}.avatar-inner[data-v-9be833f2]{max-width:100%;padding-bottom:100%;position:relative;overflow:hidden;height:0;border-radius:50%;background-color:rgba(34,34,34,.1);background-position:center center;background-size:cover;background-repeat:no-repeat}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$4 = "data-v-9be833f2";
  /* module identifier */
  const __vue_module_identifier__$4 = undefined;
  /* functional template */
  const __vue_is_functional_template__$4 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$4 = normalizeComponent(
    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
    __vue_inject_styles__$4,
    __vue_script__$4,
    __vue_scope_id__$4,
    __vue_is_functional_template__$4,
    __vue_module_identifier__$4,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$5 = {
  components: {
    FluroAvatar: __vue_component__$4
  },

  data() {
    return {
      processing: false,
      progress: 0,
      bytesLoaded: 0,
      bytesTotal: 0,
      cacheBuster: 0
    };
  },

  props: {
    'id': {
      type: [String, Object]
    },
    'type': {
      default: 'persona',
      type: String
    }
  },
  computed: {
    style() {
      return {
        backgroundImage: `url("${this.$fluro.asset.avatarUrl(this.id, this.type, {
          w: this.width || 100,
          cacheBuster: this.cacheBuster
        })}")`
      };
    }

  },
  methods: {
    reset() {
      this.processing = false;
      this.progress = 0;
      this.bytesLoaded = 0;
      this.bytesTotal = 0;
    },

    fileSelected(files) {
      var self = this;
      self.processing = true;

      var file = lodash.first(files);

      console.log('file selected!', file); ///////////////////////////////////////

      var formData = new FormData();
      formData.append('file', file, file.name); ///////////////////////////////////////

      var personID = self.$fluro.utils.getStringID(self.id);
      var config = {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: progressEvent => {
          let percentCompleted = Math.floor(progressEvent.loaded * 100 / progressEvent.total); // do whatever you like with the percentage complete
          // maybe dispatch an action that will update a progress bar or something

          self.progress = percentCompleted;
          self.bytesLoaded = progressEvent.loaded;
          self.bytesTotal = progressEvent.total; ///////////////////////////////////////////////////

          self.$forceUpdate();
        }
      }; ///////////////////////////////////////

      return self.$fluro.api.post(`/${self.type}/${personID}/image`, formData, config).then(function (res) {
        self.cacheBuster += 1;
        self.reset();
      }).catch(function (err) {
        self.reset();
      });
    }

  }
};

/* script */
const __vue_script__$5 = script$5;

/* template */
var __vue_render__$5 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticClass:"fluro-avatar-update",class:{processing:_vm.processing},style:(_vm.style)},[_c('input',{ref:"file",attrs:{"type":"file"},on:{"change":function($event){return _vm.fileSelected($event.target.files)}}}),_vm._v(" "),_c('div',{staticClass:"overlay"},[(_vm.processing)?[_c('v-progress-circular',{attrs:{"value":_vm.progress}})]:[_vm._v("Click to upload new photo")]],2)])};
var __vue_staticRenderFns__$5 = [];

  /* style */
  const __vue_inject_styles__$5 = function (inject) {
    if (!inject) return
    inject("data-v-ec141a9a_0", { source: ".border-top[data-v-ec141a9a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-ec141a9a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-ec141a9a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-ec141a9a]{border-left:1px solid rgba(0,0,0,.05)}.fluro-avatar-update[data-v-ec141a9a]{background-color:rgba(0,0,0,.5);background-position:center;background-size:cover;display:block;border-radius:100%;position:relative;width:auto;height:0;padding-bottom:100%;overflow:hidden;text-align:center;border:2px solid #eee}.fluro-avatar-update .overlay[data-v-ec141a9a]{position:absolute;left:0;top:0;right:0;bottom:0;width:100%;height:100%;background:rgba(0,0,0,.5);color:#fff;display:flex;justify-content:center;align-items:center;font-weight:700;opacity:0;text-align:center}.fluro-avatar-update.processing .overlay[data-v-ec141a9a],.fluro-avatar-update:hover .overlay[data-v-ec141a9a]{opacity:1}.fluro-avatar-update input[data-v-ec141a9a]{opacity:0;position:absolute;left:0;top:0;right:0;bottom:0;width:100%;height:100%}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$5 = "data-v-ec141a9a";
  /* module identifier */
  const __vue_module_identifier__$5 = undefined;
  /* functional template */
  const __vue_is_functional_template__$5 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$5 = normalizeComponent(
    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
    __vue_inject_styles__$5,
    __vue_script__$5,
    __vue_scope_id__$5,
    __vue_is_functional_template__$5,
    __vue_module_identifier__$5,
    false,
    createInjector,
    undefined,
    undefined
  );

let templates = []; //////////////////////////////////

templates.push({
  title: 'Basic Text Field',
  description: `Add a basic text field`,
  field: {
    title: '',
    minimum: 0,
    maximum: 1,
    askCount: 1,
    type: 'string',
    key: ''
  }
});
templates.push({
  title: 'Multiple Choice',
  description: `Add a select dropdown where the user can choose an option from a list`,
  field: {
    title: '',
    minimum: 0,
    maximum: 1,
    askCount: 1,
    type: 'string',
    key: '',
    directive: 'select',
    allowedValues: ['Option One', 'Option Two', 'Option Three', 'Option Four']
  }
});
templates.push({
  title: 'Person',
  key: 'person',
  description: `Add a new Contact Reference Field including the basic details (First Name, Last Name etc..)`,
  field: {
    title: '',
    minimum: 1,
    maximum: 1,
    askCount: 1,
    type: 'reference',
    directive: 'embedded',
    key: '',
    params: {
      restrictType: 'contact'
    },
    fields: [{
      title: 'Names',
      type: 'group',
      key: 'names',
      sameLine: true,
      fields: [{
        title: 'First Name',
        minimum: 1,
        maximum: 1,
        key: 'firstName',
        type: 'string'
      }, {
        title: 'Last Name',
        minimum: 1,
        maximum: 1,
        key: 'lastName',
        type: 'string'
      }]
    }, {
      title: 'Gender',
      minimum: 1,
      maximum: 1,
      key: 'gender',
      type: 'string',
      directive: 'select',
      options: [{
        name: 'Male',
        value: 'male'
      }, {
        name: 'Female',
        value: 'female'
      }, {
        name: `I'd prefer not to say`,
        value: 'unknown'
      }]
    }, {
      title: 'Date of Birth',
      minimum: 1,
      maximum: 1,
      key: 'dob',
      type: 'date',
      directive: 'date-select'
    }, {
      title: 'Email / Phone',
      key: 'contactoptions',
      type: 'group',
      sameLine: true,
      fields: [{
        title: 'Email Address',
        minimum: 1,
        maximum: 1,
        key: 'email',
        type: 'email'
      }, {
        title: 'Phone Number',
        minimum: 1,
        maximum: 1,
        key: 'phoneNumber',
        type: 'string'
      }]
    }]
  }
});
templates.push({
  title: 'Family Household / Address',
  description: `Add a new Family Household Reference Field including address, suburb etc`,
  field: {
    title: 'Family Household / Address',
    minimum: 1,
    maximum: 1,
    askCount: 1,
    type: 'reference',
    directive: 'embedded',
    key: 'family',
    params: {
      restrictType: 'family'
    },
    fields: [{
      title: 'Address',
      asObject: true,
      minimum: 1,
      maximum: 1,
      askCount: 1,
      type: 'group',
      key: 'address',
      fields: [{
        key: 'header',
        title: 'Heading',
        minimum: 0,
        maximum: 1,
        type: 'void',
        directive: 'custom',
        template: '<h5>Address</h5>'
      }, {
        title: 'Address Line 1',
        minimum: 1,
        maximum: 1,
        key: 'addressLine1',
        type: 'string'
      }, {
        title: 'Address Line 2',
        minimum: 0,
        maximum: 1,
        key: 'addressLine2',
        type: 'string'
      }, {
        title: 'Suburb/State/Postcode',
        minimum: 1,
        maximum: 1,
        key: 'ssp',
        type: 'group',
        sameLine: true,
        fields: [{
          title: 'Suburb',
          minimum: 0,
          maximum: 1,
          key: 'suburb',
          type: 'string'
        }, {
          title: 'State',
          minimum: 0,
          maximum: 1,
          key: 'state',
          type: 'string'
        }, {
          title: 'Postal / Zip Code',
          minimum: 0,
          maximum: 1,
          key: 'postalCode',
          type: 'string'
        }]
      }]
    }, {
      key: 'samePostal',
      title: 'Postal Address is the same',
      minimum: 0,
      maximum: 1,
      type: 'boolean',
      defaultValues: [true]
    }, {
      title: 'Postal Address',
      asObject: true,
      minimum: 1,
      maximum: 1,
      askCount: 1,
      type: 'group',
      key: 'postalAddress',
      expressions: {
        hide: 'model.samePostal'
      },
      fields: [{
        key: 'header',
        title: 'Heading',
        minimum: 0,
        maximum: 1,
        type: 'void',
        directive: 'custom',
        template: '<h5>Postal Address</h5>'
      }, {
        title: 'Address Line 1',
        minimum: 1,
        maximum: 1,
        key: 'addressLine1',
        type: 'string'
      }, {
        title: 'Address Line 2',
        minimum: 0,
        maximum: 1,
        key: 'addressLine2',
        type: 'string'
      }, {
        title: 'Suburb/State/Postcode',
        minimum: 1,
        maximum: 1,
        key: 'ssp',
        type: 'group',
        sameLine: true,
        fields: [{
          title: 'Suburb',
          minimum: 0,
          maximum: 1,
          key: 'suburb',
          type: 'string'
        }, {
          title: 'State',
          minimum: 0,
          maximum: 1,
          key: 'state',
          type: 'string'
        }, {
          title: 'Postal / Zip Code',
          minimum: 0,
          maximum: 1,
          key: 'postalCode',
          type: 'string'
        }]
      }]
    }]
  }
});
templates.push({
  title: 'Heading',
  description: `Add a custom heading or html markup`,
  field: {
    title: 'My Heading',
    description: 'This is the description',
    minimum: 0,
    maximum: 1,
    type: 'void',
    directive: 'custom',
    key: 'heading',
    template: `<h3>{{field.title}}</h3>\n<p>{{field.description}}</p>`
  },
  params: {}
});
templates.push({
  title: 'Video',
  description: `Add a video embed`,
  field: {
    title: 'My Video',
    description: 'This is a video',
    minimum: 0,
    maximum: 1,
    type: 'void',
    directive: 'custom',
    key: 'videoItem',
    template: `<h3>{{field.title}}</h3>\n
                    <p>{{field.description}}</p>\n
                    <div style="width:100%; position:relative; height:0; padding-bottom:56.25%;">\n<iframe style="width:100%; height:100%; position: absolute; top:0; right:0; bottom:0; left:0; " src="https://www.youtube.com/embed/iJ1ynQ46984" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n</div>\n
                    `
  },
  params: {}
});
templates.push({
  title: 'Signature',
  description: `Request the user to write their signature`,
  field: {
    title: 'Signature',
    description: 'Please sign your name',
    minimum: 1,
    maximum: 1,
    type: 'string',
    directive: 'signature',
    key: 'signature'
  },
  params: {}
});
templates.push({
  title: 'File Upload',
  description: `Add a video, asset, or image upload field`,
  field: {
    title: 'Upload Image',
    description: 'Select your image/s to upload',
    minimum: 0,
    maximum: 0,
    type: 'reference',
    directive: 'upload',
    params: {
      restrictType: 'image'
    },
    key: 'upload'
  },
  params: {}
});
templates.push({
  title: 'Website link',
  description: `Add a link to an external URL`,
  field: {
    title: 'External Link',
    minimum: 0,
    maximum: 1,
    type: 'void',
    directive: 'custom',
    key: 'link',
    template: '<a target="_blank" href="https://www.fluro.io">Click here to view the link</a>'
  },
  params: {}
});

let templates$1 = []; //////////////////////////////////

templates$1.push({
  title: 'Basic Field',
  description: `Add a basic text field`,
  field: {
    title: '',
    minimum: 0,
    maximum: 1,
    askCount: 1,
    type: 'string',
    key: ''
  }
});
templates$1.push({
  title: 'Background',
  description: `Add a background with tint option`,
  field: {
    title: 'Background',
    minimum: 1,
    maximum: 1,
    askCount: 1,
    type: 'group',
    asObject: true,
    key: 'background',
    fields: [{
      title: 'Image',
      key: 'image',
      type: 'reference',
      minimum: 0,
      maximum: 1,
      params: {
        restrictType: 'image'
      }
    }, {
      title: 'Tint',
      key: 'tint',
      type: 'string',
      directive: 'color',
      minimum: 0,
      maximum: 1,
      defaultValues: ['#00000055'],
      expressions: {
        hide: '!model.image'
      }
    }]
  }
});
templates$1.push({
  title: 'Button',
  description: `Add a set of buttons/links`,
  field: {
    title: 'Button',
    minimum: 0,
    maximum: 0,
    askCount: 1,
    asObject: true,
    type: 'group',
    key: 'button',
    fields: [{
      title: 'Text',
      minimum: 1,
      maximum: 1,
      type: 'string',
      key: 'text',
      defaultValues: ['Find Out More']
    }, {
      title: 'Link to',
      minimum: 1,
      maximum: 1,
      type: 'string',
      key: 'type',
      directive: 'select',
      options: [{
        title: 'Page',
        value: 'page'
      }, {
        title: 'External URL',
        value: 'url'
      }],
      defaultValues: ['page']
    }, {
      title: 'Page',
      minimum: 1,
      maximum: 1,
      type: 'string',
      key: 'page',
      directive: 'app-page-select',
      expressions: {
        hide: `model.type != 'page'`
      }
    }, {
      title: 'URL',
      minimum: 1,
      maximum: 1,
      type: 'url',
      key: 'url',
      expressions: {
        hide: `model.type != 'url'`
      }
    }, {
      title: 'Open in',
      minimum: 0,
      maximum: 1,
      type: 'string',
      key: 'window',
      directive: 'select',
      options: [{
        title: 'Same Window',
        value: ''
      }, {
        title: 'New Window',
        value: '_blank'
      }],
      expressions: {
        hide: `model.type != 'url'`
      }
    }, {
      title: 'Style',
      minimum: 1,
      maximum: 1,
      askCount: 1,
      asObject: true,
      type: 'group',
      key: 'style',
      fields: [{
        title: 'Button Style Options',
        type: 'group',
        key: 'styleOptions',
        sameLine: true,
        fields: [{
          title: 'Size',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'size',
          directive: 'app-size-select'
        }, {
          title: 'Type',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'type',
          directive: 'select',
          options: [{
            title: 'Standard',
            value: ''
          }, {
            title: 'Outline',
            value: 'outline'
          }, {
            title: 'Link',
            value: 'link'
          }]
        }, {
          title: 'Style',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'style',
          directive: 'select',
          defaultValues: ['default'],
          options: [{
            title: 'Default',
            value: 'default'
          }, {
            title: 'Danger',
            value: 'danger'
          }, {
            title: 'Success',
            value: 'success'
          }]
        }]
      }]
    }, {
      title: 'Icon',
      minimum: 1,
      maximum: 1,
      askCount: 1,
      asObject: true,
      type: 'group',
      key: 'icon',
      sameLine: true,
      fields: [{
        title: 'Icon Options',
        type: 'group',
        key: 'iconOptions',
        sameLine: true,
        fields: [{
          title: 'Icon',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'icon',
          directive: 'app-icon-select',
          defaultValues: ['angle-right']
        }, {
          title: 'Icon Library',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'library',
          directive: 'select',
          options: [{
            title: 'Solid',
            value: 'fas'
          }, {
            title: 'Regular',
            value: 'far'
          }, {
            title: 'Brands / Logos',
            value: 'fab'
          }, {
            title: 'Thin',
            value: 'fal'
          }],
          defaultValues: ['fas']
        }, {
          title: 'Icon Position',
          minimum: 0,
          maximum: 1,
          type: 'string',
          key: 'position',
          directive: 'select',
          options: [{
            title: 'Left',
            value: 'left'
          }, {
            title: 'Right',
            value: 'right'
          }],
          defaultValues: ['right']
        }]
      }]
    }]
  }
});

//

var script$6 = {
  name: 'fluro-field-editor-item',
  components: {
    draggable
  },
  props: {
    top: {
      type: Array
    },
    topKey: {
      type: String,

      default() {
        return 'data';
      }

    },
    parent: {
      type: Array,
      required: true
    },
    leaf: {
      type: Object,
      required: true
    },
    select: {
      type: Function
    },
    mouseover: {
      type: Function
    },
    mouseleave: {
      type: Function
    },
    selected: {
      type: Object
    }
  },

  data() {
    return {
      showActions: false,
      treeOptions: {
        animation: 1,
        group: 'fields',
        // disabled: !this.editable,
        ghostClass: 'ghost'
      },
      model: this.leaf
    };
  },

  computed: {
    fieldPath() {
      var self = this;
      var needle = self.leaf;

      function getFieldPathTrail(array, target, trail, result) {
        //return $scope.getTrail($scope.model, field, []);
        for (var key in array) {
          var field = array[key];

          if (field == target) {
            if (!field.asObject && field.directive != 'embedded') {
              trail.push(field.key);
            } else {
              if (field.minimum == field.maximum == 1) {
                trail.push(field.key);
              } else {
                trail.push(field.key + '[i]');
              }
            } //trail.push(field.key);


            result.trail = trail.slice();
            return; //return callback(trail.slice());
          }

          if (field.fields && field.fields.length) {
            if (field.asObject || field.directive == 'embedded') {
              if (field.minimum == field.maximum == 1) {
                trail.push(field.key);
              } else {
                trail.push(field.key + '[i]');
              }
            }

            getFieldPathTrail(field.fields, target, trail, result);

            if (field.asObject || field.directive == 'embedded') {
              trail.pop();
            }
          }
        }
      }

      var trail = [];
      var result = {};
      getFieldPathTrail(self.top, needle, trail, result); // this.model.key;
      // console.log('RESULT', result);

      return `${self.topKey}.${result.trail.join('.')}`;
    },

    ticketed() {
      return this.model && this.model.params && this.model.params.ticketing && this.model.params.ticketing.enabled;
    },

    readableIssues() {
      if (!this.issues.length) {
        return;
      }

      return this.issues.join(', ');
    },

    issues() {
      var self = this;
      var array = [];

      if (!self.model.title) {
        array.push('This field does not have a title');
        return array;
      }

      if (!self.model.key) {
        array.push('This field does not have a key');
      } //////////////////////////////////////////////////


      var conflict = self.parent.some(function (field) {
        if (field == self.model) {
          return;
        }

        return field.key == self.model.key;
      });

      if (conflict) {
        array.push(`Key '${self.model.key}' is already in use`);
      } //////////////////////////////////////////////////
      //     )s = _.some(self.parent, function(field) {
      //     // console.log('check match', field.key == self.model.key )
      //     return field.key == self.model.key;
      // })
      // if(conflicts && conflicts.length) {
      // }


      return array;
    },

    targetRealms() {
      return this.model.params ? this.model.params.targetRealms : null;
    },

    summary() {
      var self = this;
      var multiple = self.model.maximum != 1;

      if (!self.model.params) {
        self.model.params = {};
      }

      if (self.model.directive == 'embedded') {
        if (self.model.params.targetHouseholdRole) {
          return `${multiple ? 'Multiple ' : ''}${lodash.startCase(self.model.params.targetHouseholdRole)}`;
        }

        if (self.model.params.restrictType) {
          return `${multiple ? 'Multiple ' : ''}${self.$fluro.types.readable(self.model.params.restrictType, multiple)}`;
        }
      }

      var modelType = self.model.type;

      switch (modelType) {
        case 'void':
        case 'value':
          return '';
      }

      return `${lodash.startCase(modelType)}`;
    },

    showSubFields() {
      return this.hasSubFields && this.expanded; //Allow collapsed later
      // model.fields && !model.collapsed
    },

    expanded() {
      return !this.collapsed;
    },

    collapsed() {
      return this.model.collapsed;
    },

    hasSubFields() {
      return this.model.type == 'group' || this.model.directive == 'embedded';
    },

    availableActions() {
      var self = this;
      var type = self.model.type == 'group' ? 'Group' : 'Field';
      var actions = [{
        title: `Duplicate ${type}`,
        icon: 'copy',

        click() {
          self.$emit('duplicate', self.model, self.parent);
        }

      }];

      if (self.model.type == 'group' || self.model.directive == 'embedded') {
        actions.push({
          title: `Add Field Inside`,
          icon: 'plus',

          click() {
            self.$emit('injected', self.model, self.model.fields);
          }

        });
      }

      actions.push({
        title: `Add Field After`,
        icon: 'plus',

        click() {
          self.$emit('injected', self.model, self.parent);
        }

      });
      actions.push({
        title: `Delete ${type}`,
        icon: 'trash-alt',

        click() {
          self.$emit('deleted', self.model, self.parent);
        }

      });
      return actions;
    },

    // icon() {
    //     return this.model.type == 'folder' ? (this.model.collapsed ? `folder` : `folder-open`) : `file`;
    //     // return this.model.type == 'folder' ? (this.model.collapsed ? `folder` : `folder-open`) : `dot`;
    // },
    isSelected() {
      return this.selected == this.model;
    },

    officeUseOnly() {
      return this.model.params && this.model.params.disableWebform;
    },

    hasExpressions() {
      return lodash.get(this.model, 'hideExpression.length') || lodash.get(this.model, 'expressions.value') || lodash.get(this.model, 'expressions.defaultValue') || lodash.get(this.model, 'expressions.hide') || lodash.get(this.model, 'expressions.required');
    },

    classes() {
      var array = []; // if (this.model.type == 'folder') {
      //     array.push('folder')
      // } else {
      //     array.push('leaf')
      // }

      if (this.issues.length) {
        array.push('issues');
      }

      if (this.isSelected) {
        array.push('active');
      }

      if (this.hasExpressions) {
        array.push('expressions');
      }

      if (this.model.type == 'void') {
        array.push('void');
      }

      if (this.officeUseOnly) {
        array.push('office-use-only');
      }

      return array;
    }

  },
  watch: {
    hasSubFields(bol) {
      var self = this;

      if (bol && !self.model.fields) {
        self.$set(self.model, 'fields', []);
      }
    }

  },

  mounted() {
    var self = this;

    if (self.model.isNew) {
      // console.log('SCROLL ITEM INTO VIEW')
      self.$nextTick(function () {
        self.$nextTick(function () {
          if (self.$el && self.$el.scrollIntoView) {
            self.$el.scrollIntoView({
              behavior: 'smooth' // block: 'top',

            }); //Remove the new tag

            self.model.isNew = undefined;
          }
        });
      });
    } // self.$nextTick(function() {
    //     // if (self.leaf.autoselect) {
    //     //     self.$set(self.leaf, 'autoselect', null);
    //     //     if (self.$refs.input) {
    //     //         console.log('Auto select!')
    //     //         self.$refs.input.enableEdit();
    //     //     }
    //     // }
    // })

  },

  methods: {
    // mouseover() {
    //     this.hovered(this.model)
    // },
    // mouseleave() {
    //     this.hovered(null)
    // },
    toggleCollapsed() {
      this.$set(this.model, 'collapsed', !this.model.collapsed);
    },

    duplicate(field, parent) {
      this.$emit('duplicate', field, parent);
    },

    injected(field, parent) {
      this.$emit('injected', field, parent);
    },

    deleted(field, parent) {
      this.$emit('deleted', field, parent);
    },

    clicked($event, route) {
      console.log('EVENT', route.title);
      this.$emit('click', $event, route);
    },

    onPageMove({
      relatedContext,
      draggedContext
    }) {
      const relatedElement = relatedContext.element;
      const draggedElement = draggedContext.element;
      return (!relatedElement || !relatedElement.fixed) && !draggedElement.fixed;
    }

  }
};

/* script */
const __vue_script__$6 = script$6;

/* template */
var __vue_render__$6 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"field-editor-item",class:_vm.classes},[_c('div',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"field-editor-item-field",attrs:{"content":_vm.fieldPath},on:{"click":function($event){return _vm.select(_vm.model)},"mouseover":function($event){return _vm.mouseover(_vm.model)},"mouseleave":function($event){return _vm.mouseleave(_vm.model)}}},[(_vm.targetRealms)?_c('fluro-realm-bar',{attrs:{"realm":_vm.targetRealms}}):_vm._e(),_vm._v(" "),_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{staticClass:"handle grab",attrs:{"shrink":""}},[_c('div',{staticClass:"icon"},[_c('fluro-icon',{attrs:{"icon":"arrows"}})],1)]),_vm._v(" "),(_vm.ticketed)?_c('v-flex',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"shrink":"","content":"Ticketing Enabled"}},[_c('div',{staticClass:"icon ticket"},[_c('fluro-icon',{attrs:{"library":"fas","icon":"ticket"}})],1)]):_vm._e(),_vm._v(" "),(_vm.hasExpressions)?_c('v-flex',{attrs:{"shrink":""}},[_c('div',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"symbol expression",attrs:{"content":"Has Expressions"}},[_c('fluro-icon',{attrs:{"icon":"brackets-curly"}})],1)]):_vm._e(),_vm._v(" "),(_vm.officeUseOnly)?_c('v-flex',{attrs:{"shrink":""}},[_c('div',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"symbol",attrs:{"content":"Office Use Only"}},[_c('fluro-icon',{attrs:{"icon":"eye-slash"}})],1)]):_vm._e(),_vm._v(" "),_c('v-flex',{staticClass:"handle"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.model.title)+" "),(_vm.summary)?_c('span',{staticClass:"summary"},[_vm._v(_vm._s(_vm.summary))]):_vm._e(),_vm._v(" "),(_vm.readableIssues)?_c('div',{staticClass:"issue-summary"},[_c('fluro-icon',{attrs:{"library":"fas","icon":"exclamation"}}),_vm._v(" "+_vm._s(_vm.readableIssues))],1):_vm._e()]),_vm._v(" "),(_vm.hasSubFields)?_c('v-flex',{attrs:{"shrink":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.toggleCollapsed()}}},[_c('fluro-icon',{attrs:{"icon":_vm.model.collapsed ? 'angle-up': 'angle-down'}})],1):_vm._e(),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();}}},[_c('div',{staticClass:"actions",class:{active:_vm.showActions}},[_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('span',_vm._g({},on),[_c('fluro-icon',{attrs:{"icon":_vm.showActions ? "times" : "ellipsis-v"}})],1)]}}]),model:{value:(_vm.showActions),callback:function ($$v) {_vm.showActions=$$v;},expression:"showActions"}},[_vm._v(" "),_c('div',{staticClass:"text-left"},[_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.availableActions),function(action){return _c('v-list-tile',{on:{"click":function($event){return action.click()}}},[_c('fluro-icon',{attrs:{"icon":action.icon,"left":""}}),_vm._v(_vm._s(action.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")],1)}),1)],1)])],1)])],1)],1),_vm._v(" "),(_vm.hasSubFields )?[(_vm.showSubFields)?_c('draggable',{staticClass:"field-editor-children",attrs:{"handle":".handle","element":"ul","options":_vm.treeOptions,"move":_vm.onPageMove},model:{value:(_vm.model.fields),callback:function ($$v) {_vm.$set(_vm.model, "fields", $$v);},expression:"model.fields"}},_vm._l((_vm.model.fields),function(leaf,index){return _c('fluro-field-editor-item',{key:leaf.guid,attrs:{"top":_vm.top,"selected":_vm.selected,"parent":_vm.model.fields,"leaf":_vm.model.fields[index],"select":_vm.select,"mouseover":_vm.mouseover,"mouseleave":_vm.mouseleave},on:{"duplicate":_vm.duplicate,"injected":_vm.injected,"deleted":_vm.deleted}})}),1):_vm._e()]:_vm._e()],2)};
var __vue_staticRenderFns__$6 = [];

  /* style */
  const __vue_inject_styles__$6 = function (inject) {
    if (!inject) return
    inject("data-v-1ce8110c_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.field-editor-children{margin:0;list-style-type:none;padding:0;display:block}.field-editor-children .field-editor-children{padding:3px 3px 3px 20px;background:#eee}.field-editor-item{border:1px solid rgba(0,0,0,.1);border-radius:3px;overflow:hidden;margin:0 0 4px;list-style-type:none;list-style:none}.field-editor-item .summary{font-size:.8em;font-weight:400;opacity:.5}.field-editor-item .issue-summary{clear:both;font-size:.8em;font-weight:400;color:#fff;background:#d93e63;border-radius:4px;padding:5px}.field-editor-item.expressions{border:1px dashed #f0974e}.field-editor-item.issues,.field-editor-item.issues>.field-editor-children,.field-editor-item.issues>.field-editor-item-field{background:rgba(217,62,99,.5)!important;border:1px solid #d93e63}.field-editor-item.ghost{border:1px dashed rgba(0,0,0,.1);opacity:.5}.field-editor-item:hover{border-color:#2ad4b9}.field-editor-item .field-editor-item-field{position:relative;padding:5px;background:#fff;font-weight:500;cursor:pointer}.field-editor-item .field-editor-item-field .grab{cursor:grab;opacity:0}.field-editor-item .field-editor-item-field .grab svg{opacity:.5}.field-editor-item .field-editor-item-field .actions{opacity:.3;cursor:pointer}.field-editor-item .field-editor-item-field .actions.active{opacity:.5}.field-editor-item .field-editor-item-field:hover .actions,.field-editor-item .field-editor-item-field:hover .grab{opacity:1}.field-editor-item.office-use-only .field-editor-item-field{background:#eee;color:#888}.field-editor-item.void{border:1px solid transparent}.field-editor-item.void .field-editor-item-field{background:0 0;color:#888;border:none}.field-editor-item.active{border:1px solid #2ad4b9}.field-editor-item.active>.field-editor-item-field{background:#2ad4b9;color:#fff}.field-editor-item .symbol{width:15px;height:20px;line-height:20px;margin-right:2px;font-size:10px}.field-editor-item .symbol.expression{color:#f0974e}.field-editor-item .icon{width:20px;height:20px;line-height:20px;border-radius:100%;text-align:center;margin-right:2px;font-size:12px}.field-editor-item .icon.ticket{color:#4cc650}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$6 = undefined;
  /* module identifier */
  const __vue_module_identifier__$6 = undefined;
  /* functional template */
  const __vue_is_functional_template__$6 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$6 = normalizeComponent(
    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
    __vue_inject_styles__$6,
    __vue_script__$6,
    __vue_scope_id__$6,
    __vue_is_functional_template__$6,
    __vue_module_identifier__$6,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$7 = {
  components: {
    FluroModalMixin
  },

  data() {
    return {
      loading: true
    };
  },

  asyncComputed: {}
};

/* script */
const __vue_script__$7 = script$7;

/* template */
var __vue_render__$7 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('pre',[_vm._v(_vm._s(_vm.sheets))])])};
var __vue_staticRenderFns__$7 = [];

  /* style */
  const __vue_inject_styles__$7 = function (inject) {
    if (!inject) return
    inject("data-v-f913ee6c_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$7 = undefined;
  /* module identifier */
  const __vue_module_identifier__$7 = undefined;
  /* functional template */
  const __vue_is_functional_template__$7 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$7 = normalizeComponent(
    { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
    __vue_inject_styles__$7,
    __vue_script__$7,
    __vue_scope_id__$7,
    __vue_is_functional_template__$7,
    __vue_module_identifier__$7,
    false,
    createInjector,
    undefined,
    undefined
  );

var vval = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchChildren = patchChildren;
exports.h = h;

function isUndef(v) {
  return v === null || v === undefined;
}

function isDef(v) {
  return v !== null && v !== undefined;
}

function sameVval(oldVval, vval) {
  return vval.tag === oldVval.tag && vval.key === oldVval.key;
}

function createVm(vval) {
  var Vm = vval.tag;
  vval.vm = new Vm({
    data: vval.args
  });
}

function updateVval(vval) {
  var keys = Object.keys(vval.args);

  for (var i = 0; i < keys.length; i++) {
    keys.forEach(function (k) {
      vval.vm[k] = vval.args[k];
    });
  }
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) map[key] = i;
  }

  return map;
}

function updateChildren(oldCh, newCh) {
  var oldStartIdx = 0;
  var newStartIdx = 0;
  var oldEndIdx = oldCh.length - 1;
  var oldStartVval = oldCh[0];
  var oldEndVval = oldCh[oldEndIdx];
  var newEndIdx = newCh.length - 1;
  var newStartVval = newCh[0];
  var newEndVval = newCh[newEndIdx];
  var oldKeyToIdx, idxInOld, elmToMove;

  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (isUndef(oldStartVval)) {
      oldStartVval = oldCh[++oldStartIdx];
    } else if (isUndef(oldEndVval)) {
      oldEndVval = oldCh[--oldEndIdx];
    } else if (sameVval(oldStartVval, newStartVval)) {
      patchVval(oldStartVval, newStartVval);
      oldStartVval = oldCh[++oldStartIdx];
      newStartVval = newCh[++newStartIdx];
    } else if (sameVval(oldEndVval, newEndVval)) {
      patchVval(oldEndVval, newEndVval);
      oldEndVval = oldCh[--oldEndIdx];
      newEndVval = newCh[--newEndIdx];
    } else if (sameVval(oldStartVval, newEndVval)) {
      patchVval(oldStartVval, newEndVval);
      oldStartVval = oldCh[++oldStartIdx];
      newEndVval = newCh[--newEndIdx];
    } else if (sameVval(oldEndVval, newStartVval)) {
      patchVval(oldEndVval, newStartVval);
      oldEndVval = oldCh[--oldEndIdx];
      newStartVval = newCh[++newStartIdx];
    } else {
      if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
      idxInOld = isDef(newStartVval.key) ? oldKeyToIdx[newStartVval.key] : null;

      if (isUndef(idxInOld)) {
        createVm(newStartVval);
        newStartVval = newCh[++newStartIdx];
      } else {
        elmToMove = oldCh[idxInOld];

        if (sameVval(elmToMove, newStartVval)) {
          patchVval(elmToMove, newStartVval);
          oldCh[idxInOld] = undefined;
          newStartVval = newCh[++newStartIdx];
        } else {
          createVm(newStartVval);
          newStartVval = newCh[++newStartIdx];
        }
      }
    }
  }

  if (oldStartIdx > oldEndIdx) {
    addVvals(newCh, newStartIdx, newEndIdx);
  } else if (newStartIdx > newEndIdx) {
    removeVvals(oldCh, oldStartIdx, oldEndIdx);
  }
}

function addVvals(vvals, startIdx, endIdx) {
  for (; startIdx <= endIdx; ++startIdx) {
    createVm(vvals[startIdx]);
  }
}

function removeVvals(vvals, startIdx, endIdx) {
  for (; startIdx <= endIdx; ++startIdx) {
    var ch = vvals[startIdx];

    if (isDef(ch)) {
      ch.vm.$destroy();
      ch.vm = null;
    }
  }
}

function patchVval(oldVval, vval) {
  if (oldVval === vval) {
    return;
  }

  vval.vm = oldVval.vm;
  updateVval(vval);
}

function patchChildren(oldCh, ch) {
  if (isDef(oldCh) && isDef(ch)) {
    if (oldCh !== ch) updateChildren(oldCh, ch);
  } else if (isDef(ch)) {
    addVvals(ch, 0, ch.length - 1);
  } else if (isDef(oldCh)) {
    removeVvals(oldCh, 0, oldCh.length - 1);
  }
}

function h(tag, key, args) {
  return {
    tag: tag,
    key: key,
    args: args
  };
}
});

unwrapExports(vval);
var vval_1 = vval.patchChildren;
var vval_2 = vval.h;

var params = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pushParams = pushParams;
exports.popParams = popParams;
exports.withParams = withParams;
exports._setTarget = exports.target = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var stack = [];
var target = null;
exports.target = target;

var _setTarget = function _setTarget(x) {
  exports.target = target = x;
};

exports._setTarget = _setTarget;

function pushParams() {
  if (target !== null) {
    stack.push(target);
  }

  exports.target = target = {};
}

function popParams() {
  var lastTarget = target;
  var newTarget = exports.target = target = stack.pop() || null;

  if (newTarget) {
    if (!Array.isArray(newTarget.$sub)) {
      newTarget.$sub = [];
    }

    newTarget.$sub.push(lastTarget);
  }

  return lastTarget;
}

function addParams(params) {
  if (_typeof(params) === 'object' && !Array.isArray(params)) {
    exports.target = target = _objectSpread({}, target, {}, params);
  } else {
    throw new Error('params must be an object');
  }
}

function withParamsDirect(params, validator) {
  return withParamsClosure(function (add) {
    return function () {
      add(params);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return validator.apply(this, args);
    };
  });
}

function withParamsClosure(closure) {
  var validator = closure(addParams);
  return function () {
    pushParams();

    try {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return validator.apply(this, args);
    } finally {
      popParams();
    }
  };
}

function withParams(paramsOrClosure, maybeValidator) {
  if (_typeof(paramsOrClosure) === 'object' && maybeValidator !== undefined) {
    return withParamsDirect(paramsOrClosure, maybeValidator);
  }

  return withParamsClosure(paramsOrClosure);
}
});

unwrapExports(params);
var params_1 = params.pushParams;
var params_2 = params.popParams;
var params_3 = params.withParams;
var params_4 = params._setTarget;
var params_5 = params.target;

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vuelidate = Vuelidate;
Object.defineProperty(exports, "withParams", {
  enumerable: true,
  get: function get() {
    return params.withParams;
  }
});
exports.default = exports.validationMixin = void 0;





function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var NIL = function NIL() {
  return null;
};

var buildFromKeys = function buildFromKeys(keys, fn, keyFn) {
  return keys.reduce(function (build, key) {
    build[keyFn ? keyFn(key) : key] = fn(key);
    return build;
  }, {});
};

function isFunction(val) {
  return typeof val === 'function';
}

function isObject(val) {
  return val !== null && (_typeof(val) === 'object' || isFunction(val));
}

function isPromise(object) {
  return isObject(object) && isFunction(object.then);
}

var getPath = function getPath(ctx, obj, path, fallback) {
  if (typeof path === 'function') {
    return path.call(ctx, obj, fallback);
  }

  path = Array.isArray(path) ? path : path.split('.');

  for (var i = 0; i < path.length; i++) {
    if (obj && _typeof(obj) === 'object') {
      obj = obj[path[i]];
    } else {
      return fallback;
    }
  }

  return typeof obj === 'undefined' ? fallback : obj;
};

var __isVuelidateAsyncVm = '__isVuelidateAsyncVm';

function makePendingAsyncVm(Vue, promise) {
  var asyncVm = new Vue({
    data: {
      p: true,
      v: false
    }
  });
  promise.then(function (value) {
    asyncVm.p = false;
    asyncVm.v = value;
  }, function (error) {
    asyncVm.p = false;
    asyncVm.v = false;
    throw error;
  });
  asyncVm[__isVuelidateAsyncVm] = true;
  return asyncVm;
}

var validationGetters = {
  $invalid: function $invalid() {
    var _this = this;

    var proxy = this.proxy;
    return this.nestedKeys.some(function (nested) {
      return _this.refProxy(nested).$invalid;
    }) || this.ruleKeys.some(function (rule) {
      return !proxy[rule];
    });
  },
  $dirty: function $dirty() {
    var _this2 = this;

    if (this.dirty) {
      return true;
    }

    if (this.nestedKeys.length === 0) {
      return false;
    }

    return this.nestedKeys.every(function (key) {
      return _this2.refProxy(key).$dirty;
    });
  },
  $anyDirty: function $anyDirty() {
    var _this3 = this;

    if (this.dirty) {
      return true;
    }

    if (this.nestedKeys.length === 0) {
      return false;
    }

    return this.nestedKeys.some(function (key) {
      return _this3.refProxy(key).$anyDirty;
    });
  },
  $error: function $error() {
    return this.$dirty && !this.$pending && this.$invalid;
  },
  $anyError: function $anyError() {
    var _this4 = this;

    if (this.$error) return true;
    return this.nestedKeys.some(function (key) {
      return _this4.refProxy(key).$anyError;
    });
  },
  $pending: function $pending() {
    var _this5 = this;

    return this.ruleKeys.some(function (key) {
      return _this5.getRef(key).$pending;
    }) || this.nestedKeys.some(function (key) {
      return _this5.refProxy(key).$pending;
    });
  },
  $params: function $params() {
    var _this6 = this;

    var vals = this.validations;
    return _objectSpread({}, buildFromKeys(this.nestedKeys, function (key) {
      return vals[key] && vals[key].$params || null;
    }), {}, buildFromKeys(this.ruleKeys, function (key) {
      return _this6.getRef(key).$params;
    }));
  }
};

function setDirtyRecursive(newState) {
  this.dirty = newState;
  var proxy = this.proxy;
  var method = newState ? '$touch' : '$reset';
  this.nestedKeys.forEach(function (key) {
    proxy[key][method]();
  });
}

var validationMethods = {
  $touch: function $touch() {
    setDirtyRecursive.call(this, true);
  },
  $reset: function $reset() {
    setDirtyRecursive.call(this, false);
  },
  $flattenParams: function $flattenParams() {
    var proxy = this.proxy;
    var params = [];

    for (var key in this.$params) {
      if (this.isNested(key)) {
        var childParams = proxy[key].$flattenParams();

        for (var j = 0; j < childParams.length; j++) {
          childParams[j].path.unshift(key);
        }

        params = params.concat(childParams);
      } else {
        params.push({
          path: [],
          name: key,
          params: this.$params[key]
        });
      }
    }

    return params;
  }
};
var getterNames = Object.keys(validationGetters);
var methodNames = Object.keys(validationMethods);
var _cachedComponent = null;

var getComponent = function getComponent(Vue) {
  if (_cachedComponent) {
    return _cachedComponent;
  }

  var VBase = Vue.extend({
    computed: {
      refs: function refs() {
        var oldVval = this._vval;
        this._vval = this.children;
        (0, vval.patchChildren)(oldVval, this._vval);
        var refs = {};

        this._vval.forEach(function (c) {
          refs[c.key] = c.vm;
        });

        return refs;
      }
    },
    beforeCreate: function beforeCreate() {
      this._vval = null;
    },
    beforeDestroy: function beforeDestroy() {
      if (this._vval) {
        (0, vval.patchChildren)(this._vval);
        this._vval = null;
      }
    },
    methods: {
      getModel: function getModel() {
        return this.lazyModel ? this.lazyModel(this.prop) : this.model;
      },
      getModelKey: function getModelKey(key) {
        var model = this.getModel();

        if (model) {
          return model[key];
        }
      },
      hasIter: function hasIter() {
        return false;
      }
    }
  });
  var ValidationRule = VBase.extend({
    data: function data() {
      return {
        rule: null,
        lazyModel: null,
        model: null,
        lazyParentModel: null,
        rootModel: null
      };
    },
    methods: {
      runRule: function runRule(parent) {
        var model = this.getModel();
        (0, params.pushParams)();
        var rawOutput = this.rule.call(this.rootModel, model, parent);
        var output = isPromise(rawOutput) ? makePendingAsyncVm(Vue, rawOutput) : rawOutput;
        var rawParams = (0, params.popParams)();
        var params$1 = rawParams && rawParams.$sub ? rawParams.$sub.length > 1 ? rawParams : rawParams.$sub[0] : null;
        return {
          output: output,
          params: params$1
        };
      }
    },
    computed: {
      run: function run() {
        var _this7 = this;

        var parent = this.lazyParentModel();

        var isArrayDependant = Array.isArray(parent) && parent.__ob__;

        if (isArrayDependant) {
          var arrayDep = parent.__ob__.dep;
          arrayDep.depend();
          var target = arrayDep.constructor.target;

          if (!this._indirectWatcher) {
            var Watcher = target.constructor;
            this._indirectWatcher = new Watcher(this, function () {
              return _this7.runRule(parent);
            }, null, {
              lazy: true
            });
          }

          var model = this.getModel();

          if (!this._indirectWatcher.dirty && this._lastModel === model) {
            this._indirectWatcher.depend();

            return target.value;
          }

          this._lastModel = model;

          this._indirectWatcher.evaluate();

          this._indirectWatcher.depend();
        } else if (this._indirectWatcher) {
          this._indirectWatcher.teardown();

          this._indirectWatcher = null;
        }

        return this._indirectWatcher ? this._indirectWatcher.value : this.runRule(parent);
      },
      $params: function $params() {
        return this.run.params;
      },
      proxy: function proxy() {
        var output = this.run.output;

        if (output[__isVuelidateAsyncVm]) {
          return !!output.v;
        }

        return !!output;
      },
      $pending: function $pending() {
        var output = this.run.output;

        if (output[__isVuelidateAsyncVm]) {
          return output.p;
        }

        return false;
      }
    },
    destroyed: function destroyed() {
      if (this._indirectWatcher) {
        this._indirectWatcher.teardown();

        this._indirectWatcher = null;
      }
    }
  });
  var Validation = VBase.extend({
    data: function data() {
      return {
        dirty: false,
        validations: null,
        lazyModel: null,
        model: null,
        prop: null,
        lazyParentModel: null,
        rootModel: null
      };
    },
    methods: _objectSpread({}, validationMethods, {
      refProxy: function refProxy(key) {
        return this.getRef(key).proxy;
      },
      getRef: function getRef(key) {
        return this.refs[key];
      },
      isNested: function isNested(key) {
        return typeof this.validations[key] !== 'function';
      }
    }),
    computed: _objectSpread({}, validationGetters, {
      nestedKeys: function nestedKeys() {
        return this.keys.filter(this.isNested);
      },
      ruleKeys: function ruleKeys() {
        var _this8 = this;

        return this.keys.filter(function (k) {
          return !_this8.isNested(k);
        });
      },
      keys: function keys() {
        return Object.keys(this.validations).filter(function (k) {
          return k !== '$params';
        });
      },
      proxy: function proxy() {
        var _this9 = this;

        var keyDefs = buildFromKeys(this.keys, function (key) {
          return {
            enumerable: true,
            configurable: true,
            get: function get() {
              return _this9.refProxy(key);
            }
          };
        });
        var getterDefs = buildFromKeys(getterNames, function (key) {
          return {
            enumerable: true,
            configurable: true,
            get: function get() {
              return _this9[key];
            }
          };
        });
        var methodDefs = buildFromKeys(methodNames, function (key) {
          return {
            enumerable: false,
            configurable: true,
            get: function get() {
              return _this9[key];
            }
          };
        });
        var iterDefs = this.hasIter() ? {
          $iter: {
            enumerable: true,
            value: Object.defineProperties({}, _objectSpread({}, keyDefs))
          }
        } : {};
        return Object.defineProperties({}, _objectSpread({}, keyDefs, {}, iterDefs, {
          $model: {
            enumerable: true,
            get: function get() {
              var parent = _this9.lazyParentModel();

              if (parent != null) {
                return parent[_this9.prop];
              } else {
                return null;
              }
            },
            set: function set(value) {
              var parent = _this9.lazyParentModel();

              if (parent != null) {
                parent[_this9.prop] = value;

                _this9.$touch();
              }
            }
          }
        }, getterDefs, {}, methodDefs));
      },
      children: function children() {
        var _this10 = this;

        return [].concat(_toConsumableArray(this.nestedKeys.map(function (key) {
          return renderNested(_this10, key);
        })), _toConsumableArray(this.ruleKeys.map(function (key) {
          return renderRule(_this10, key);
        }))).filter(Boolean);
      }
    })
  });
  var GroupValidation = Validation.extend({
    methods: {
      isNested: function isNested(key) {
        return typeof this.validations[key]() !== 'undefined';
      },
      getRef: function getRef(key) {
        var vm = this;
        return {
          get proxy() {
            return vm.validations[key]() || false;
          }

        };
      }
    }
  });
  var EachValidation = Validation.extend({
    computed: {
      keys: function keys() {
        var model = this.getModel();

        if (isObject(model)) {
          return Object.keys(model);
        } else {
          return [];
        }
      },
      tracker: function tracker() {
        var _this11 = this;

        var trackBy = this.validations.$trackBy;
        return trackBy ? function (key) {
          return "".concat(getPath(_this11.rootModel, _this11.getModelKey(key), trackBy));
        } : function (x) {
          return "".concat(x);
        };
      },
      getModelLazy: function getModelLazy() {
        var _this12 = this;

        return function () {
          return _this12.getModel();
        };
      },
      children: function children() {
        var _this13 = this;

        var def = this.validations;
        var model = this.getModel();

        var validations = _objectSpread({}, def);

        delete validations['$trackBy'];
        var usedTracks = {};
        return this.keys.map(function (key) {
          var track = _this13.tracker(key);

          if (usedTracks.hasOwnProperty(track)) {
            return null;
          }

          usedTracks[track] = true;
          return (0, vval.h)(Validation, track, {
            validations: validations,
            prop: key,
            lazyParentModel: _this13.getModelLazy,
            model: model[key],
            rootModel: _this13.rootModel
          });
        }).filter(Boolean);
      }
    },
    methods: {
      isNested: function isNested() {
        return true;
      },
      getRef: function getRef(key) {
        return this.refs[this.tracker(key)];
      },
      hasIter: function hasIter() {
        return true;
      }
    }
  });

  var renderNested = function renderNested(vm, key) {
    if (key === '$each') {
      return (0, vval.h)(EachValidation, key, {
        validations: vm.validations[key],
        lazyParentModel: vm.lazyParentModel,
        prop: key,
        lazyModel: vm.getModel,
        rootModel: vm.rootModel
      });
    }

    var validations = vm.validations[key];

    if (Array.isArray(validations)) {
      var root = vm.rootModel;
      var refVals = buildFromKeys(validations, function (path) {
        return function () {
          return getPath(root, root.$v, path);
        };
      }, function (v) {
        return Array.isArray(v) ? v.join('.') : v;
      });
      return (0, vval.h)(GroupValidation, key, {
        validations: refVals,
        lazyParentModel: NIL,
        prop: key,
        lazyModel: NIL,
        rootModel: root
      });
    }

    return (0, vval.h)(Validation, key, {
      validations: validations,
      lazyParentModel: vm.getModel,
      prop: key,
      lazyModel: vm.getModelKey,
      rootModel: vm.rootModel
    });
  };

  var renderRule = function renderRule(vm, key) {
    return (0, vval.h)(ValidationRule, key, {
      rule: vm.validations[key],
      lazyParentModel: vm.lazyParentModel,
      lazyModel: vm.getModel,
      rootModel: vm.rootModel
    });
  };

  _cachedComponent = {
    VBase: VBase,
    Validation: Validation
  };
  return _cachedComponent;
};

var _cachedVue = null;

function getVue(rootVm) {
  if (_cachedVue) return _cachedVue;
  var Vue = rootVm.constructor;

  while (Vue.super) {
    Vue = Vue.super;
  }

  _cachedVue = Vue;
  return Vue;
}

var validateModel = function validateModel(model, validations) {
  var Vue = getVue(model);

  var _getComponent = getComponent(Vue),
      Validation = _getComponent.Validation,
      VBase = _getComponent.VBase;

  var root = new VBase({
    computed: {
      children: function children() {
        var vals = typeof validations === 'function' ? validations.call(model) : validations;
        return [(0, vval.h)(Validation, '$v', {
          validations: vals,
          lazyParentModel: NIL,
          prop: '$v',
          model: model,
          rootModel: model
        })];
      }
    }
  });
  return root;
};

var validationMixin = {
  data: function data() {
    var vals = this.$options.validations;

    if (vals) {
      this._vuelidate = validateModel(this, vals);
    }

    return {};
  },
  beforeCreate: function beforeCreate() {
    var options = this.$options;
    var vals = options.validations;
    if (!vals) return;
    if (!options.computed) options.computed = {};
    if (options.computed.$v) return;

    options.computed.$v = function () {
      return this._vuelidate ? this._vuelidate.refs.$v.proxy : null;
    };
  },
  beforeDestroy: function beforeDestroy() {
    if (this._vuelidate) {
      this._vuelidate.$destroy();

      this._vuelidate = null;
    }
  }
};
exports.validationMixin = validationMixin;

function Vuelidate(Vue) {
  Vue.mixin(validationMixin);
}

var _default = Vuelidate;
exports.default = _default;
});

unwrapExports(lib);
var lib_1 = lib.Vuelidate;
var lib_2 = lib.validationMixin;

var withParamsBrowser = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withParams = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var root = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : {};

var fakeWithParams = function fakeWithParams(paramsOrClosure, maybeValidator) {
  if (_typeof(paramsOrClosure) === 'object' && maybeValidator !== undefined) {
    return maybeValidator;
  }

  return paramsOrClosure(function () {});
};

var withParams = root.vuelidate ? root.vuelidate.withParams : fakeWithParams;
exports.withParams = withParams;
});

unwrapExports(withParamsBrowser);
var withParamsBrowser_1 = withParamsBrowser.withParams;

var withParams_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var withParams = process.env.BUILD === 'web' ? withParamsBrowser.withParams : params.withParams;
var _default = withParams;
exports.default = _default;
});

unwrapExports(withParams_1);

var common = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "withParams", {
  enumerable: true,
  get: function get() {
    return _withParams.default;
  }
});
exports.regex = exports.ref = exports.len = exports.req = void 0;

var _withParams = _interopRequireDefault(withParams_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var req = function req(value) {
  if (Array.isArray(value)) return !!value.length;

  if (value === undefined || value === null) {
    return false;
  }

  if (value === false) {
    return true;
  }

  if (value instanceof Date) {
    return !isNaN(value.getTime());
  }

  if (_typeof(value) === 'object') {
    for (var _ in value) {
      return true;
    }

    return false;
  }

  return !!String(value).length;
};

exports.req = req;

var len = function len(value) {
  if (Array.isArray(value)) return value.length;

  if (_typeof(value) === 'object') {
    return Object.keys(value).length;
  }

  return String(value).length;
};

exports.len = len;

var ref = function ref(reference, vm, parentVm) {
  return typeof reference === 'function' ? reference.call(vm, parentVm) : parentVm[reference];
};

exports.ref = ref;

var regex = function regex(type, expr) {
  return (0, _withParams.default)({
    type: type
  }, function (value) {
    return !req(value) || expr.test(value);
  });
};

exports.regex = regex;
});

unwrapExports(common);
var common_1 = common.regex;
var common_2 = common.ref;
var common_3 = common.len;
var common_4 = common.req;

var alpha = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.regex)('alpha', /^[a-zA-Z]*$/);

exports.default = _default;
});

unwrapExports(alpha);

var alphaNum = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.regex)('alphaNum', /^[a-zA-Z0-9]*$/);

exports.default = _default;
});

unwrapExports(alphaNum);

var numeric = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.regex)('numeric', /^[0-9]*$/);

exports.default = _default;
});

unwrapExports(numeric);

var between = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(min, max) {
  return (0, common.withParams)({
    type: 'between',
    min: min,
    max: max
  }, function (value) {
    return !(0, common.req)(value) || (!/\s/.test(value) || value instanceof Date) && +min <= +value && +max >= +value;
  });
};

exports.default = _default;
});

unwrapExports(between);

var email = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var emailRegex = /(^$|^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$)/;

var _default = (0, common.regex)('email', emailRegex);

exports.default = _default;
});

unwrapExports(email);

var ipAddress = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.withParams)({
  type: 'ipAddress'
}, function (value) {
  if (!(0, common.req)(value)) {
    return true;
  }

  if (typeof value !== 'string') {
    return false;
  }

  var nibbles = value.split('.');
  return nibbles.length === 4 && nibbles.every(nibbleValid);
});

exports.default = _default;

var nibbleValid = function nibbleValid(nibble) {
  if (nibble.length > 3 || nibble.length === 0) {
    return false;
  }

  if (nibble[0] === '0' && nibble !== '0') {
    return false;
  }

  if (!nibble.match(/^\d+$/)) {
    return false;
  }

  var numeric = +nibble | 0;
  return numeric >= 0 && numeric <= 255;
};
});

unwrapExports(ipAddress);

var macAddress = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default() {
  var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ':';
  return (0, common.withParams)({
    type: 'macAddress'
  }, function (value) {
    if (!(0, common.req)(value)) {
      return true;
    }

    if (typeof value !== 'string') {
      return false;
    }

    var parts = typeof separator === 'string' && separator !== '' ? value.split(separator) : value.length === 12 || value.length === 16 ? value.match(/.{2}/g) : null;
    return parts !== null && (parts.length === 6 || parts.length === 8) && parts.every(hexValid);
  });
};

exports.default = _default;

var hexValid = function hexValid(hex) {
  return hex.toLowerCase().match(/^[0-9a-f]{2}$/);
};
});

unwrapExports(macAddress);

var maxLength = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(length) {
  return (0, common.withParams)({
    type: 'maxLength',
    max: length
  }, function (value) {
    return !(0, common.req)(value) || (0, common.len)(value) <= length;
  });
};

exports.default = _default;
});

unwrapExports(maxLength);

var minLength = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(length) {
  return (0, common.withParams)({
    type: 'minLength',
    min: length
  }, function (value) {
    return !(0, common.req)(value) || (0, common.len)(value) >= length;
  });
};

exports.default = _default;
});

unwrapExports(minLength);

var required = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.withParams)({
  type: 'required'
}, function (value) {
  if (typeof value === 'string') {
    return (0, common.req)(value.trim());
  }

  return (0, common.req)(value);
});

exports.default = _default;
});

unwrapExports(required);

var requiredIf = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(prop) {
  return (0, common.withParams)({
    type: 'requiredIf',
    prop: prop
  }, function (value, parentVm) {
    return (0, common.ref)(prop, this, parentVm) ? (0, common.req)(value) : true;
  });
};

exports.default = _default;
});

unwrapExports(requiredIf);

var requiredUnless = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(prop) {
  return (0, common.withParams)({
    type: 'requiredUnless',
    prop: prop
  }, function (value, parentVm) {
    return !(0, common.ref)(prop, this, parentVm) ? (0, common.req)(value) : true;
  });
};

exports.default = _default;
});

unwrapExports(requiredUnless);

var sameAs = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(equalTo) {
  return (0, common.withParams)({
    type: 'sameAs',
    eq: equalTo
  }, function (value, parentVm) {
    return value === (0, common.ref)(equalTo, this, parentVm);
  });
};

exports.default = _default;
});

unwrapExports(sameAs);

var url = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var urlRegex = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i;

var _default = (0, common.regex)('url', urlRegex);

exports.default = _default;
});

unwrapExports(url);

var or = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default() {
  for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {
    validators[_key] = arguments[_key];
  }

  return (0, common.withParams)({
    type: 'or'
  }, function () {
    var _this = this;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return validators.length > 0 && validators.reduce(function (valid, fn) {
      return valid || fn.apply(_this, args);
    }, false);
  });
};

exports.default = _default;
});

unwrapExports(or);

var and = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default() {
  for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {
    validators[_key] = arguments[_key];
  }

  return (0, common.withParams)({
    type: 'and'
  }, function () {
    var _this = this;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return validators.length > 0 && validators.reduce(function (valid, fn) {
      return valid && fn.apply(_this, args);
    }, true);
  });
};

exports.default = _default;
});

unwrapExports(and);

var not = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(validator) {
  return (0, common.withParams)({
    type: 'not'
  }, function (value, vm) {
    return !(0, common.req)(value) || !validator.call(this, value, vm);
  });
};

exports.default = _default;
});

unwrapExports(not);

var minValue = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(min) {
  return (0, common.withParams)({
    type: 'minValue',
    min: min
  }, function (value) {
    return !(0, common.req)(value) || (!/\s/.test(value) || value instanceof Date) && +value >= +min;
  });
};

exports.default = _default;
});

unwrapExports(minValue);

var maxValue = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = function _default(max) {
  return (0, common.withParams)({
    type: 'maxValue',
    max: max
  }, function (value) {
    return !(0, common.req)(value) || (!/\s/.test(value) || value instanceof Date) && +value <= +max;
  });
};

exports.default = _default;
});

unwrapExports(maxValue);

var integer = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.regex)('integer', /(^[0-9]*$)|(^-[0-9]+$)/);

exports.default = _default;
});

unwrapExports(integer);

var decimal = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



var _default = (0, common.regex)('decimal', /^[-]?\d*(\.\d+)?$/);

exports.default = _default;
});

unwrapExports(decimal);

var validators = createCommonjsModule(function (module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "alpha", {
  enumerable: true,
  get: function get() {
    return _alpha.default;
  }
});
Object.defineProperty(exports, "alphaNum", {
  enumerable: true,
  get: function get() {
    return _alphaNum.default;
  }
});
Object.defineProperty(exports, "numeric", {
  enumerable: true,
  get: function get() {
    return _numeric.default;
  }
});
Object.defineProperty(exports, "between", {
  enumerable: true,
  get: function get() {
    return _between.default;
  }
});
Object.defineProperty(exports, "email", {
  enumerable: true,
  get: function get() {
    return _email.default;
  }
});
Object.defineProperty(exports, "ipAddress", {
  enumerable: true,
  get: function get() {
    return _ipAddress.default;
  }
});
Object.defineProperty(exports, "macAddress", {
  enumerable: true,
  get: function get() {
    return _macAddress.default;
  }
});
Object.defineProperty(exports, "maxLength", {
  enumerable: true,
  get: function get() {
    return _maxLength.default;
  }
});
Object.defineProperty(exports, "minLength", {
  enumerable: true,
  get: function get() {
    return _minLength.default;
  }
});
Object.defineProperty(exports, "required", {
  enumerable: true,
  get: function get() {
    return _required.default;
  }
});
Object.defineProperty(exports, "requiredIf", {
  enumerable: true,
  get: function get() {
    return _requiredIf.default;
  }
});
Object.defineProperty(exports, "requiredUnless", {
  enumerable: true,
  get: function get() {
    return _requiredUnless.default;
  }
});
Object.defineProperty(exports, "sameAs", {
  enumerable: true,
  get: function get() {
    return _sameAs.default;
  }
});
Object.defineProperty(exports, "url", {
  enumerable: true,
  get: function get() {
    return _url.default;
  }
});
Object.defineProperty(exports, "or", {
  enumerable: true,
  get: function get() {
    return _or.default;
  }
});
Object.defineProperty(exports, "and", {
  enumerable: true,
  get: function get() {
    return _and.default;
  }
});
Object.defineProperty(exports, "not", {
  enumerable: true,
  get: function get() {
    return _not.default;
  }
});
Object.defineProperty(exports, "minValue", {
  enumerable: true,
  get: function get() {
    return _minValue.default;
  }
});
Object.defineProperty(exports, "maxValue", {
  enumerable: true,
  get: function get() {
    return _maxValue.default;
  }
});
Object.defineProperty(exports, "integer", {
  enumerable: true,
  get: function get() {
    return _integer.default;
  }
});
Object.defineProperty(exports, "decimal", {
  enumerable: true,
  get: function get() {
    return _decimal.default;
  }
});
exports.helpers = void 0;

var _alpha = _interopRequireDefault(alpha);

var _alphaNum = _interopRequireDefault(alphaNum);

var _numeric = _interopRequireDefault(numeric);

var _between = _interopRequireDefault(between);

var _email = _interopRequireDefault(email);

var _ipAddress = _interopRequireDefault(ipAddress);

var _macAddress = _interopRequireDefault(macAddress);

var _maxLength = _interopRequireDefault(maxLength);

var _minLength = _interopRequireDefault(minLength);

var _required = _interopRequireDefault(required);

var _requiredIf = _interopRequireDefault(requiredIf);

var _requiredUnless = _interopRequireDefault(requiredUnless);

var _sameAs = _interopRequireDefault(sameAs);

var _url = _interopRequireDefault(url);

var _or = _interopRequireDefault(or);

var _and = _interopRequireDefault(and);

var _not = _interopRequireDefault(not);

var _minValue = _interopRequireDefault(minValue);

var _maxValue = _interopRequireDefault(maxValue);

var _integer = _interopRequireDefault(integer);

var _decimal = _interopRequireDefault(decimal);

var helpers = _interopRequireWildcard(common);

exports.helpers = helpers;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
});

var validators$1 = unwrapExports(validators);
var validators_1 = validators.helpers;

var jsep = createCommonjsModule(function (module, exports) {
//     JavaScript Expression Parser (JSEP) 0.3.4
//     JSEP may be freely distributed under the MIT License
//     http://jsep.from.so/

/*global module: true, exports: true, console: true */
(function (root) {
	// Node Types
	// ----------

	// This is the full set of types that any JSEP node can be.
	// Store them here to save space when minified
	var COMPOUND = 'Compound',
		IDENTIFIER = 'Identifier',
		MEMBER_EXP = 'MemberExpression',
		LITERAL = 'Literal',
		THIS_EXP = 'ThisExpression',
		CALL_EXP = 'CallExpression',
		UNARY_EXP = 'UnaryExpression',
		BINARY_EXP = 'BinaryExpression',
		LOGICAL_EXP = 'LogicalExpression',
		CONDITIONAL_EXP = 'ConditionalExpression',
		ARRAY_EXP = 'ArrayExpression',

		PERIOD_CODE = 46, // '.'
		COMMA_CODE  = 44, // ','
		SQUOTE_CODE = 39, // single quote
		DQUOTE_CODE = 34, // double quotes
		OPAREN_CODE = 40, // (
		CPAREN_CODE = 41, // )
		OBRACK_CODE = 91, // [
		CBRACK_CODE = 93, // ]
		QUMARK_CODE = 63, // ?
		SEMCOL_CODE = 59, // ;
		COLON_CODE  = 58, // :

		throwError = function(message, index) {
			var error = new Error(message + ' at character ' + index);
			error.index = index;
			error.description = message;
			throw error;
		},

	// Operations
	// ----------

	// Set `t` to `true` to save space (when minified, not gzipped)
		t = true,
	// Use a quickly-accessible map to store all of the unary operators
	// Values are set to `true` (it really doesn't matter)
		unary_ops = {'-': t, '!': t, '~': t, '+': t},
	// Also use a map for the binary operations but set their values to their
	// binary precedence for quick reference:
	// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)
		binary_ops = {
			'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,
			'==': 6, '!=': 6, '===': 6, '!==': 6,
			'<': 7,  '>': 7,  '<=': 7,  '>=': 7,
			'<<':8,  '>>': 8, '>>>': 8,
			'+': 9, '-': 9,
			'*': 10, '/': 10, '%': 10
		},
	// Get return the longest key length of any object
		getMaxKeyLen = function(obj) {
			var max_len = 0, len;
			for(var key in obj) {
				if((len = key.length) > max_len && obj.hasOwnProperty(key)) {
					max_len = len;
				}
			}
			return max_len;
		},
		max_unop_len = getMaxKeyLen(unary_ops),
		max_binop_len = getMaxKeyLen(binary_ops),
	// Literals
	// ----------
	// Store the values to return for the various literals we may encounter
		literals = {
			'true': true,
			'false': false,
			'null': null
		},
	// Except for `this`, which is special. This could be changed to something like `'self'` as well
		this_str = 'this',
	// Returns the precedence of a binary operator or `0` if it isn't a binary operator
		binaryPrecedence = function(op_val) {
			return binary_ops[op_val] || 0;
		},
	// Utility function (gets called from multiple places)
	// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions
		createBinaryExpression = function (operator, left, right) {
			var type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;
			return {
				type: type,
				operator: operator,
				left: left,
				right: right
			};
		},
		// `ch` is a character code in the next three functions
		isDecimalDigit = function(ch) {
			return (ch >= 48 && ch <= 57); // 0...9
		},
		isIdentifierStart = function(ch) {
			return (ch === 36) || (ch === 95) || // `$` and `_`
					(ch >= 65 && ch <= 90) || // A...Z
					(ch >= 97 && ch <= 122) || // a...z
                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator
		},
		isIdentifierPart = function(ch) {
			return (ch === 36) || (ch === 95) || // `$` and `_`
					(ch >= 65 && ch <= 90) || // A...Z
					(ch >= 97 && ch <= 122) || // a...z
					(ch >= 48 && ch <= 57) || // 0...9
                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator
		},

		// Parsing
		// -------
		// `expr` is a string with the passed in expression
		jsep = function(expr) {
			// `index` stores the character number we are currently at while `length` is a constant
			// All of the gobbles below will modify `index` as we move along
			var index = 0,
				charAtFunc = expr.charAt,
				charCodeAtFunc = expr.charCodeAt,
				exprI = function(i) { return charAtFunc.call(expr, i); },
				exprICode = function(i) { return charCodeAtFunc.call(expr, i); },
				length = expr.length,

				// Push `index` up to the next non-space character
				gobbleSpaces = function() {
					var ch = exprICode(index);
					// space or tab
					while(ch === 32 || ch === 9 || ch === 10 || ch === 13) {
						ch = exprICode(++index);
					}
				},

				// The main parsing function. Much of this code is dedicated to ternary expressions
				gobbleExpression = function() {
					var test = gobbleBinaryExpression(),
						consequent, alternate;
					gobbleSpaces();
					if(exprICode(index) === QUMARK_CODE) {
						// Ternary expression: test ? consequent : alternate
						index++;
						consequent = gobbleExpression();
						if(!consequent) {
							throwError('Expected expression', index);
						}
						gobbleSpaces();
						if(exprICode(index) === COLON_CODE) {
							index++;
							alternate = gobbleExpression();
							if(!alternate) {
								throwError('Expected expression', index);
							}
							return {
								type: CONDITIONAL_EXP,
								test: test,
								consequent: consequent,
								alternate: alternate
							};
						} else {
							throwError('Expected :', index);
						}
					} else {
						return test;
					}
				},

				// Search for the operation portion of the string (e.g. `+`, `===`)
				// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
				// and move down from 3 to 2 to 1 character until a matching binary operation is found
				// then, return that binary operation
				gobbleBinaryOp = function() {
					gobbleSpaces();
					var to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;
					while(tc_len > 0) {
						// Don't accept a binary op when it is an identifier.
						// Binary ops that start with a identifier-valid character must be followed
						// by a non identifier-part valid character
						if(binary_ops.hasOwnProperty(to_check) && (
							!isIdentifierStart(exprICode(index)) ||
							(index+to_check.length< expr.length && !isIdentifierPart(exprICode(index+to_check.length)))
						)) {
							index += tc_len;
							return to_check;
						}
						to_check = to_check.substr(0, --tc_len);
					}
					return false;
				},

				// This function is responsible for gobbling an individual expression,
				// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
				gobbleBinaryExpression = function() {
					var node, biop, prec, stack, biop_info, left, right, i;

					// First, try to get the leftmost thing
					// Then, check to see if there's a binary operator operating on that leftmost thing
					left = gobbleToken();
					biop = gobbleBinaryOp();

					// If there wasn't a binary operator, just return the leftmost node
					if(!biop) {
						return left;
					}

					// Otherwise, we need to start a stack to properly place the binary operations in their
					// precedence structure
					biop_info = { value: biop, prec: binaryPrecedence(biop)};

					right = gobbleToken();
					if(!right) {
						throwError("Expected expression after " + biop, index);
					}
					stack = [left, biop_info, right];

					// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)
					while((biop = gobbleBinaryOp())) {
						prec = binaryPrecedence(biop);

						if(prec === 0) {
							break;
						}
						biop_info = { value: biop, prec: prec };

						// Reduce: make a binary expression from the three topmost entries.
						while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
							right = stack.pop();
							biop = stack.pop().value;
							left = stack.pop();
							node = createBinaryExpression(biop, left, right);
							stack.push(node);
						}

						node = gobbleToken();
						if(!node) {
							throwError("Expected expression after " + biop, index);
						}
						stack.push(biop_info, node);
					}

					i = stack.length - 1;
					node = stack[i];
					while(i > 1) {
						node = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);
						i -= 2;
					}
					return node;
				},

				// An individual part of a binary expression:
				// e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
				gobbleToken = function() {
					var ch, to_check, tc_len;

					gobbleSpaces();
					ch = exprICode(index);

					if(isDecimalDigit(ch) || ch === PERIOD_CODE) {
						// Char code 46 is a dot `.` which can start off a numeric literal
						return gobbleNumericLiteral();
					} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {
						// Single or double quotes
						return gobbleStringLiteral();
					} else if (ch === OBRACK_CODE) {
						return gobbleArray();
					} else {
						to_check = expr.substr(index, max_unop_len);
						tc_len = to_check.length;
						while(tc_len > 0) {
						// Don't accept an unary op when it is an identifier.
						// Unary ops that start with a identifier-valid character must be followed
						// by a non identifier-part valid character
							if(unary_ops.hasOwnProperty(to_check) && (
								!isIdentifierStart(exprICode(index)) ||
								(index+to_check.length < expr.length && !isIdentifierPart(exprICode(index+to_check.length)))
							)) {
								index += tc_len;
								return {
									type: UNARY_EXP,
									operator: to_check,
									argument: gobbleToken(),
									prefix: true
								};
							}
							to_check = to_check.substr(0, --tc_len);
						}

						if (isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis
							// `foo`, `bar.baz`
							return gobbleVariable();
						}
					}

					return false;
				},
				// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
				// keep track of everything in the numeric literal and then calling `parseFloat` on that string
				gobbleNumericLiteral = function() {
					var number = '', ch, chCode;
					while(isDecimalDigit(exprICode(index))) {
						number += exprI(index++);
					}

					if(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker
						number += exprI(index++);

						while(isDecimalDigit(exprICode(index))) {
							number += exprI(index++);
						}
					}

					ch = exprI(index);
					if(ch === 'e' || ch === 'E') { // exponent marker
						number += exprI(index++);
						ch = exprI(index);
						if(ch === '+' || ch === '-') { // exponent sign
							number += exprI(index++);
						}
						while(isDecimalDigit(exprICode(index))) { //exponent itself
							number += exprI(index++);
						}
						if(!isDecimalDigit(exprICode(index-1)) ) {
							throwError('Expected exponent (' + number + exprI(index) + ')', index);
						}
					}


					chCode = exprICode(index);
					// Check to make sure this isn't a variable name that start with a number (123abc)
					if(isIdentifierStart(chCode)) {
						throwError('Variable names cannot start with a number (' +
									number + exprI(index) + ')', index);
					} else if(chCode === PERIOD_CODE) {
						throwError('Unexpected period', index);
					}

					return {
						type: LITERAL,
						value: parseFloat(number),
						raw: number
					};
				},

				// Parses a string literal, staring with single or double quotes with basic support for escape codes
				// e.g. `"hello world"`, `'this is\nJSEP'`
				gobbleStringLiteral = function() {
					var str = '', quote = exprI(index++), closed = false, ch;

					while(index < length) {
						ch = exprI(index++);
						if(ch === quote) {
							closed = true;
							break;
						} else if(ch === '\\') {
							// Check for all of the common escape codes
							ch = exprI(index++);
							switch(ch) {
								case 'n': str += '\n'; break;
								case 'r': str += '\r'; break;
								case 't': str += '\t'; break;
								case 'b': str += '\b'; break;
								case 'f': str += '\f'; break;
								case 'v': str += '\x0B'; break;
								default : str += ch;
							}
						} else {
							str += ch;
						}
					}

					if(!closed) {
						throwError('Unclosed quote after "'+str+'"', index);
					}

					return {
						type: LITERAL,
						value: str,
						raw: quote + str + quote
					};
				},

				// Gobbles only identifiers
				// e.g.: `foo`, `_value`, `$x1`
				// Also, this function checks if that identifier is a literal:
				// (e.g. `true`, `false`, `null`) or `this`
				gobbleIdentifier = function() {
					var ch = exprICode(index), start = index, identifier;

					if(isIdentifierStart(ch)) {
						index++;
					} else {
						throwError('Unexpected ' + exprI(index), index);
					}

					while(index < length) {
						ch = exprICode(index);
						if(isIdentifierPart(ch)) {
							index++;
						} else {
							break;
						}
					}
					identifier = expr.slice(start, index);

					if(literals.hasOwnProperty(identifier)) {
						return {
							type: LITERAL,
							value: literals[identifier],
							raw: identifier
						};
					} else if(identifier === this_str) {
						return { type: THIS_EXP };
					} else {
						return {
							type: IDENTIFIER,
							name: identifier
						};
					}
				},

				// Gobbles a list of arguments within the context of a function call
				// or array literal. This function also assumes that the opening character
				// `(` or `[` has already been gobbled, and gobbles expressions and commas
				// until the terminator character `)` or `]` is encountered.
				// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
				gobbleArguments = function(termination) {
					var ch_i, args = [], node, closed = false;
					while(index < length) {
						gobbleSpaces();
						ch_i = exprICode(index);
						if(ch_i === termination) { // done parsing
							closed = true;
							index++;
							break;
						} else if (ch_i === COMMA_CODE) { // between expressions
							index++;
						} else {
							node = gobbleExpression();
							if(!node || node.type === COMPOUND) {
								throwError('Expected comma', index);
							}
							args.push(node);
						}
					}
					if (!closed) {
						throwError('Expected ' + String.fromCharCode(termination), index);
					}
					return args;
				},

				// Gobble a non-literal variable name. This variable name may include properties
				// e.g. `foo`, `bar.baz`, `foo['bar'].baz`
				// It also gobbles function calls:
				// e.g. `Math.acos(obj.angle)`
				gobbleVariable = function() {
					var ch_i, node;
					ch_i = exprICode(index);

					if(ch_i === OPAREN_CODE) {
						node = gobbleGroup();
					} else {
						node = gobbleIdentifier();
					}
					gobbleSpaces();
					ch_i = exprICode(index);
					while(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {
						index++;
						if(ch_i === PERIOD_CODE) {
							gobbleSpaces();
							node = {
								type: MEMBER_EXP,
								computed: false,
								object: node,
								property: gobbleIdentifier()
							};
						} else if(ch_i === OBRACK_CODE) {
							node = {
								type: MEMBER_EXP,
								computed: true,
								object: node,
								property: gobbleExpression()
							};
							gobbleSpaces();
							ch_i = exprICode(index);
							if(ch_i !== CBRACK_CODE) {
								throwError('Unclosed [', index);
							}
							index++;
						} else if(ch_i === OPAREN_CODE) {
							// A function call is being made; gobble all the arguments
							node = {
								type: CALL_EXP,
								'arguments': gobbleArguments(CPAREN_CODE),
								callee: node
							};
						}
						gobbleSpaces();
						ch_i = exprICode(index);
					}
					return node;
				},

				// Responsible for parsing a group of things within parentheses `()`
				// This function assumes that it needs to gobble the opening parenthesis
				// and then tries to gobble everything within that parenthesis, assuming
				// that the next thing it should see is the close parenthesis. If not,
				// then the expression probably doesn't have a `)`
				gobbleGroup = function() {
					index++;
					var node = gobbleExpression();
					gobbleSpaces();
					if(exprICode(index) === CPAREN_CODE) {
						index++;
						return node;
					} else {
						throwError('Unclosed (', index);
					}
				},

				// Responsible for parsing Array literals `[1, 2, 3]`
				// This function assumes that it needs to gobble the opening bracket
				// and then tries to gobble the expressions as arguments.
				gobbleArray = function() {
					index++;
					return {
						type: ARRAY_EXP,
						elements: gobbleArguments(CBRACK_CODE)
					};
				},

				nodes = [], ch_i, node;

			while(index < length) {
				ch_i = exprICode(index);

				// Expressions can be separated by semicolons, commas, or just inferred without any
				// separators
				if(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {
					index++; // ignore separators
				} else {
					// Try to gobble each expression individually
					if((node = gobbleExpression())) {
						nodes.push(node);
					// If we weren't able to find a binary expression and are out of room, then
					// the expression passed in probably has too much
					} else if(index < length) {
						throwError('Unexpected "' + exprI(index) + '"', index);
					}
				}
			}

			// If there's only one expression just try returning the expression
			if(nodes.length === 1) {
				return nodes[0];
			} else {
				return {
					type: COMPOUND,
					body: nodes
				};
			}
		};

	// To be filled in by the template
	jsep.version = '0.3.4';
	jsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };

	/**
	 * @method jsep.addUnaryOp
	 * @param {string} op_name The name of the unary op to add
	 * @return jsep
	 */
	jsep.addUnaryOp = function(op_name) {
		max_unop_len = Math.max(op_name.length, max_unop_len);
		unary_ops[op_name] = t; return this;
	};

	/**
	 * @method jsep.addBinaryOp
	 * @param {string} op_name The name of the binary op to add
	 * @param {number} precedence The precedence of the binary op (can be a float)
	 * @return jsep
	 */
	jsep.addBinaryOp = function(op_name, precedence) {
		max_binop_len = Math.max(op_name.length, max_binop_len);
		binary_ops[op_name] = precedence;
		return this;
	};

	/**
	 * @method jsep.addLiteral
	 * @param {string} literal_name The name of the literal to add
	 * @param {*} literal_value The value of the literal
	 * @return jsep
	 */
	jsep.addLiteral = function(literal_name, literal_value) {
		literals[literal_name] = literal_value;
		return this;
	};

	/**
	 * @method jsep.removeUnaryOp
	 * @param {string} op_name The name of the unary op to remove
	 * @return jsep
	 */
	jsep.removeUnaryOp = function(op_name) {
		delete unary_ops[op_name];
		if(op_name.length === max_unop_len) {
			max_unop_len = getMaxKeyLen(unary_ops);
		}
		return this;
	};

	/**
	 * @method jsep.removeAllUnaryOps
	 * @return jsep
	 */
	jsep.removeAllUnaryOps = function() {
		unary_ops = {};
		max_unop_len = 0;

		return this;
	};

	/**
	 * @method jsep.removeBinaryOp
	 * @param {string} op_name The name of the binary op to remove
	 * @return jsep
	 */
	jsep.removeBinaryOp = function(op_name) {
		delete binary_ops[op_name];
		if(op_name.length === max_binop_len) {
			max_binop_len = getMaxKeyLen(binary_ops);
		}
		return this;
	};

	/**
	 * @method jsep.removeAllBinaryOps
	 * @return jsep
	 */
	jsep.removeAllBinaryOps = function() {
		binary_ops = {};
		max_binop_len = 0;

		return this;
	};

	/**
	 * @method jsep.removeLiteral
	 * @param {string} literal_name The name of the literal to remove
	 * @return jsep
	 */
	jsep.removeLiteral = function(literal_name) {
		delete literals[literal_name];
		return this;
	};

	/**
	 * @method jsep.removeAllLiterals
	 * @return jsep
	 */
	jsep.removeAllLiterals = function() {
		literals = {};

		return this;
	};

	// In desktop environments, have a way to restore the old value for `jsep`
	{
		// In Node.JS environments
		if ( module.exports) {
			exports = module.exports = jsep;
		} else {
			exports.parse = jsep;
		}
	}
}());
});
var jsep_1 = jsep.parse;

/**
 * Evaluation code from JSEP project, under MIT License.
 * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/
 */

const binops = {
  '||':  function (a, b) { return a || b; },
  '&&':  function (a, b) { return a && b; },
  '|':   function (a, b) { return a | b; },
  '^':   function (a, b) { return a ^ b; },
  '&':   function (a, b) { return a & b; },
  '==':  function (a, b) { return a == b; }, // jshint ignore:line
  '!=':  function (a, b) { return a != b; }, // jshint ignore:line
  '===': function (a, b) { return a === b; },
  '!==': function (a, b) { return a !== b; },
  '<':   function (a, b) { return a < b; },
  '>':   function (a, b) { return a > b; },
  '<=':  function (a, b) { return a <= b; },
  '>=':  function (a, b) { return a >= b; },
  '<<':  function (a, b) { return a << b; },
  '>>':  function (a, b) { return a >> b; },
  '>>>': function (a, b) { return a >>> b; },
  '+':   function (a, b) { return a + b; },
  '-':   function (a, b) { return a - b; },
  '*':   function (a, b) { return a * b; },
  '/':   function (a, b) { return a / b; },
  '%':   function (a, b) { return a % b; }
};

const unops = {
  '-' :  function (a) { return -a; },
  '+' :  function (a) { return +a; },
  '~' :  function (a) { return ~a; },
  '!' :  function (a) { return !a; },
};

function evaluateArray ( list, context ) {
  return list.map(function (v) { return evaluate(v, context); });
}

async function evaluateArrayAsync( list, context ) {
  const res = await Promise.all(list.map((v) => evaluateAsync(v, context)));
  return res;
}

function evaluateMember ( node, context ) {
  const object = evaluate(node.object, context);
  if ( node.computed ) {
    return [object, object[evaluate(node.property, context)]];
  } else {
    return [object, object[node.property.name]];
  }
}

async function evaluateMemberAsync( node, context ) {
  const object = await evaluateAsync(node.object, context);
  if (  node.computed) {
    return [object, object[await evaluateAsync(node.property, context)]];
  } else {
    return [object, object[node.property.name]];
  }
}

function evaluate ( node, context ) {

  switch ( node.type ) {

    case 'ArrayExpression':
      return evaluateArray( node.elements, context );

    case 'BinaryExpression':
      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );

    case 'CallExpression':
      let caller, fn, assign;
      if (node.callee.type === 'MemberExpression') {
        assign = evaluateMember( node.callee, context );
        caller = assign[0];
        fn = assign[1];
      } else {
        fn = evaluate( node.callee, context );
      }
      if (typeof fn  !== 'function') { return undefined; }
      return fn.apply( caller, evaluateArray( node.arguments, context ) );

    case 'ConditionalExpression':
      return evaluate( node.test, context )
        ? evaluate( node.consequent, context )
        : evaluate( node.alternate, context );

    case 'Identifier':
      return context[node.name];

    case 'Literal':
      return node.value;

    case 'LogicalExpression':
      if (node.operator === '||') {
        return evaluate( node.left, context ) || evaluate( node.right, context );
      } else if (node.operator === '&&') {
        return evaluate( node.left, context ) && evaluate( node.right, context );
      }
      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );

    case 'MemberExpression':
      return evaluateMember(node, context)[1];

    case 'ThisExpression':
      return context;

    case 'UnaryExpression':
      return unops[ node.operator ]( evaluate( node.argument, context ) );

    default:
      return undefined;
  }

}

async function evaluateAsync( node, context ) {

  switch ( node.type ) {

    case 'ArrayExpression':
      return await evaluateArrayAsync( node.elements, context );

    case 'BinaryExpression': {
      const [left, right] = await Promise.all([
        evaluateAsync( node.left, context ),
        evaluateAsync( node.right, context )
      ]);
      return binops[ node.operator ]( left, right );
    }

    case 'CallExpression':
      let caller, fn, assign;
      if (node.callee.type === 'MemberExpression') {
        assign = await evaluateMemberAsync( node.callee, context );
        caller = assign[0];
        fn = assign[1];
      } else {
        fn = await evaluateAsync( node.callee, context );
      }
      if (typeof fn !== 'function') {
        return undefined;
      }
      return await fn.apply(
        caller,
        await evaluateArrayAsync( node.arguments, context )
      );

    case 'ConditionalExpression':
      return (await evaluateAsync( node.test, context ))
        ? await evaluateAsync( node.consequent, context )
        : await evaluateAsync( node.alternate, context );

    case 'Identifier':
      return context[node.name];

    case 'Literal':
      return node.value;

    case 'LogicalExpression': {
      if (node.operator === '||') {
        return (
          (await evaluateAsync( node.left, context )) ||
          (await evaluateAsync( node.right, context ))
        );
      } else if (node.operator === '&&') {
        return (
          (await evaluateAsync( node.left, context )) &&
          (await evaluateAsync( node.right, context ))
        );
      }

      const [left, right] = await Promise.all([
        evaluateAsync( node.left, context ),
        evaluateAsync( node.right, context )
      ]);

      return binops[ node.operator ]( left, right );
    }

    case 'MemberExpression':
      return (await evaluateMemberAsync(node, context))[1];

    case 'ThisExpression':
      return context;

    case 'UnaryExpression':
      return unops[ node.operator ](await evaluateAsync( node.argument, context ));

    default:
      return undefined;
  }
}

function compile (expression) {
  return evaluate.bind(null, jsep(expression));
}

function compileAsync(expression) {
  return evaluateAsync.bind(null, jsep(expression));
}

var expressionEval = {
  parse: jsep,
  eval: evaluate,
  evalAsync: evaluateAsync,
  compile: compile,
  compileAsync: compileAsync
};

//
var script$8 = {
  props: {
    'template': {
      type: String,

      default() {
        return '';
      }

    },
    'context': {
      type: Object,

      default() {
        return {};
      }

    }
  },

  data() {
    return {
      component: null
    };
  },

  watch: {
    'template': 'render',
    'context': 'render'
  },

  // mounted() {
  //     this.render();
  // },
  created() {
    this.render();
  },

  methods: {
    render() {
      var self = this;

      if (!self.template || !self.template.length) {
        self.component = null;
        return;
      }

      let DynamicComponent = Vue.extend({
        template: `<div>${self.template}</div>`,

        data() {
          return self.context || {};
        }

      });
      self.component = DynamicComponent;
    }

  }
};

/* script */
const __vue_script__$8 = script$8;

/* template */
var __vue_render__$8 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.component,{tag:"component"})};
var __vue_staticRenderFns__$8 = [];

  /* style */
  const __vue_inject_styles__$8 = function (inject) {
    if (!inject) return
    inject("data-v-f6ba0a90_0", { source: ".border-top[data-v-f6ba0a90]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-f6ba0a90]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-f6ba0a90]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-f6ba0a90]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$8 = "data-v-f6ba0a90";
  /* module identifier */
  const __vue_module_identifier__$8 = undefined;
  /* functional template */
  const __vue_is_functional_template__$8 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$8 = normalizeComponent(
    { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
    __vue_inject_styles__$8,
    __vue_script__$8,
    __vue_scope_id__$8,
    __vue_is_functional_template__$8,
    __vue_module_identifier__$8,
    false,
    createInjector,
    undefined,
    undefined
  );

/*!
 * v-currency-field v3.0.7 
 * (c) 2020 Philipe Augusto <phiny1@gmail.com>
 * Released under the MIT License.
 */

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var dispatchEvent = (function (el, eventName, data) {
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(eventName, true, true, data);
  el.dispatchEvent(event);
});

var startsWith = function startsWith(str, search) {
  return str.substring(0, search.length) === search;
};
var removePrefix = function removePrefix(str, prefix) {
  if (prefix && startsWith(str, prefix)) {
    return str.substr(prefix.length);
  }

  return str;
};
var stripCurrencySymbolAndMinusSign = function stripCurrencySymbolAndMinusSign(str, _ref) {
  var prefix = _ref.prefix,
      suffix = _ref.suffix;
  var value = str.replace(prefix, '').replace(suffix, '');
  return {
    value: removePrefix(value, '-'),
    negative: startsWith(value, '-')
  };
};
var isNumber = function isNumber(str) {
  return str.match(/^-?\d+(\.\d+)?$/);
};

var parse = (function (str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      prefix = _ref.prefix,
      suffix = _ref.suffix,
      groupingSymbol = _ref.groupingSymbol,
      decimalSymbol = _ref.decimalSymbol;

  if (typeof str === 'number') {
    return str;
  } else if (str && typeof str === 'string') {
    if (isNumber(str)) {
      return Number(str);
    }

    var _stripCurrencySymbolA = stripCurrencySymbolAndMinusSign(str, {
      prefix: prefix,
      suffix: suffix
    }),
        value = _stripCurrencySymbolA.value,
        negative = _stripCurrencySymbolA.negative;

    var numberParts = value.split(decimalSymbol);

    if (numberParts.length > 2) {
      return null;
    }

    var integer = numberParts[0].replace(new RegExp("\\".concat(groupingSymbol), 'g'), '');

    if (integer.length && !integer.match(/^\d+$/g)) {
      return null;
    }

    var number = integer;

    if (numberParts.length === 2) {
      var fraction = numberParts[1];

      if (fraction.length && !fraction.match(/^\d+$/g)) {
        return null;
      }

      number += ".".concat(fraction);
    }

    if (number) {
      if (negative) {
        number = "-".concat(number);
      }

      return Number(number);
    }
  }

  return null;
});

var createCurrencyFormat = function createCurrencyFormat(numberFormat) {
  var ps = numberFormat.format(123456);
  var ns = numberFormat.format(-1);
  var decimalLength = (ps.match(/0/g) || []).length;
  var decimalSymbol = decimalLength > 0 ? ps.substr(ps.indexOf('6') + 1, 1) : null;
  var prefix = ps.substring(0, ps.indexOf('1'));
  var negativePrefix = ns.substring(0, ns.indexOf('1'));
  var suffix = ps.substring(ps.lastIndexOf(decimalLength > 0 ? '0' : '6') + 1);
  var groupingSymbol = ps.substr(ps.indexOf('3') + 1, 1);
  return {
    prefix: prefix,
    negativePrefix: negativePrefix,
    suffix: suffix,
    groupingSymbol: groupingSymbol,
    decimalSymbol: decimalSymbol,
    decimalLength: decimalLength
  };
};

function createCurrencyFormat$1(ref) {
  var locale = ref.locale;
  var currency = ref.currency;

  if (currency == null) {
    return createCurrencyFormat(new Intl.NumberFormat(locale, {
      minimumFractionDigits: 2
    }));
  } else if (_typeof(currency) === 'object') {
    return Object.assign({}, createCurrencyFormat(new Intl.NumberFormat(locale, {
      minimumFractionDigits: 2
    })), {
      prefix: currency.prefix || '',
      negativePrefix: "-" + (currency.prefix || ''),
      suffix: currency.suffix || ''
    });
  } else {
    return createCurrencyFormat(new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currency
    }));
  }
}

var removeLeadingZeros = function removeLeadingZeros(str) {
  return str.replace(/^0+(0$|[^0])/, '$1');
};

var onlyDigits = function onlyDigits(str) {
  return str.replace(/\D+/g, '');
};

var count = function count(str, search) {
  return (str.match(new RegExp("\\" + search, 'g')) || []).length;
};

var endsWith = function endsWith(str, search) {
  return str.substring(str.length - search.length, str.length) === search;
};

var startsWith$1 = function startsWith(str, search) {
  return str.substring(0, search.length) === search;
};

var removePrefix$1 = function removePrefix(str, prefix) {
  if (prefix && startsWith$1(str, prefix)) {
    return str.substr(prefix.length);
  }

  return str;
};

var removeSuffix = function removeSuffix(str, suffix) {
  if (suffix && endsWith(str, suffix)) {
    return str.slice(0, suffix.length * -1);
  }

  return str;
};

var stripCurrencySymbolAndMinusSign$1 = function stripCurrencySymbolAndMinusSign(str, ref) {
  var prefix = ref.prefix;
  var suffix = ref.suffix;
  var value = str.replace(prefix, '').replace(suffix, '');
  return {
    value: removePrefix$1(value, '-'),
    negative: startsWith$1(value, '-')
  };
};

var isNumber$1 = function isNumber(str) {
  return str.match(/^-?\d+(\.\d+)?$/);
};

function parse$1(str, ref) {
  if (ref === void 0) ref = {};
  var prefix = ref.prefix;
  var suffix = ref.suffix;
  var groupingSymbol = ref.groupingSymbol;
  var decimalSymbol = ref.decimalSymbol;

  if (typeof str === 'number') {
    return str;
  } else if (str && typeof str === 'string') {
    if (isNumber$1(str)) {
      return Number(str);
    }

    var ref$1 = stripCurrencySymbolAndMinusSign$1(str, {
      prefix: prefix,
      suffix: suffix
    });
    var value = ref$1.value;
    var negative = ref$1.negative;
    var numberParts = value.split(decimalSymbol);

    if (numberParts.length > 2) {
      return null;
    }

    var integer = numberParts[0].replace(new RegExp("\\" + groupingSymbol, 'g'), '');

    if (integer.length && !integer.match(/^\d+$/g)) {
      return null;
    }

    var number = integer;

    if (numberParts.length === 2) {
      var fraction = numberParts[1];

      if (fraction.length && !fraction.match(/^\d+$/g)) {
        return null;
      }

      number += "." + fraction;
    }

    if (number) {
      if (negative) {
        number = "-" + number;
      }

      return Number(number);
    }
  }

  return null;
}

var defaultOptions = {
  locale: undefined,
  currency: 'EUR',
  distractionFree: true,
  decimalLength: undefined,
  autoDecimalMode: false,
  min: null,
  max: null
};

var setCaretPosition = function setCaretPosition(el, position) {
  return el.setSelectionRange(position, position);
};

var getCaretPositionAfterFormat = function getCaretPositionAfterFormat(el, inputtedValue, caretPosition) {
  var ref = el.$ci.currencyFormat;
  var prefix = ref.prefix;
  var suffix = ref.suffix;
  var decimalSymbol = ref.decimalSymbol;
  var decimalLength = ref.decimalLength;
  var groupingSymbol = ref.groupingSymbol;
  var newValue = el.value;
  var decimalSymbolPosition = inputtedValue.indexOf(decimalSymbol) + 1;
  var caretPositionFromLeft = inputtedValue.length - caretPosition;

  if (Math.abs(newValue.length - inputtedValue.length) > 1 && caretPosition <= decimalSymbolPosition) {
    return newValue.indexOf(decimalSymbol) + 1;
  } else if (newValue.substr(caretPosition, 1) === groupingSymbol && count(newValue, groupingSymbol) === count(inputtedValue, groupingSymbol) + 1) {
    return newValue.length - caretPositionFromLeft - 1;
  } else {
    if (!el.$ci.options.autoDecimalMode && decimalSymbolPosition !== 0 && caretPosition > decimalSymbolPosition) {
      if (onlyDigits(removeSuffix(inputtedValue.substr(decimalSymbolPosition), suffix)).length - 1 === decimalLength) {
        caretPositionFromLeft -= 1;
      }
    }

    return el.$ci.options.hideCurrencySymbol ? newValue.length - caretPositionFromLeft : Math.max(newValue.length - Math.max(caretPositionFromLeft, suffix.length), prefix.length === 0 ? 0 : prefix.length + 1);
  }
};

var getCaretPositionAfterApplyingDistractionFreeFormat = function getCaretPositionAfterApplyingDistractionFreeFormat(ref, ref$1, value, caretPosition) {
  var prefix = ref.prefix;
  var groupingSymbol = ref.groupingSymbol;
  var hideCurrencySymbol = ref$1.hideCurrencySymbol;
  var hideGroupingSymbol = ref$1.hideGroupingSymbol;
  var result = caretPosition;

  if (hideCurrencySymbol) {
    result -= prefix.length;
  }

  if (hideGroupingSymbol) {
    result -= count(value.substring(0, caretPosition), groupingSymbol);
  }

  return Math.max(0, result);
};

var isValidInteger = function isValidInteger(integer, groupingSymbol) {
  return integer.match(new RegExp("^-?(0|[1-9]\\d{0,2}(\\" + groupingSymbol + "?\\d{3})*)$"));
};

var isFractionIncomplete = function isFractionIncomplete(value, ref) {
  var decimalSymbol = ref.decimalSymbol;
  var groupingSymbol = ref.groupingSymbol;
  var numberParts = value.split(decimalSymbol);
  return endsWith(value, decimalSymbol) && numberParts.length === 2 && isValidInteger(numberParts[0], groupingSymbol);
};

var checkIncompleteValue = function checkIncompleteValue(value, negative, previousConformedValue, formatConfig) {
  var prefix = formatConfig.prefix;
  var negativePrefix = formatConfig.negativePrefix;
  var suffix = formatConfig.suffix;
  var decimalSymbol = formatConfig.decimalSymbol;
  var decimalLength = formatConfig.decimalLength;

  if (value === '' && negative && previousConformedValue !== negativePrefix) {
    return "" + negativePrefix + suffix;
  } else if (decimalLength > 0) {
    if (isFractionIncomplete(value, formatConfig)) {
      return "" + (negative ? negativePrefix : prefix) + value + suffix;
    } else if (startsWith$1(value, decimalSymbol)) {
      return (negative ? negativePrefix : prefix) + "0" + decimalSymbol + onlyDigits(value.substr(1)).substr(0, decimalLength) + suffix;
    }
  }

  return null;
};

var getAutoDecimalModeConformedValue = function getAutoDecimalModeConformedValue(value, previousConformedValue, ref) {
  var decimalLength = ref.decimalLength;

  if (value === '') {
    return {
      conformedValue: ''
    };
  } else {
    var negative = startsWith$1(value, '-');
    var conformedValue = value === '-' ? Number(-0) : Number("" + (negative ? '-' : '') + removeLeadingZeros(onlyDigits(value))) / Math.pow(10, decimalLength);
    return {
      conformedValue: conformedValue,
      fractionDigits: conformedValue.toFixed(decimalLength).slice(-decimalLength)
    };
  }
};

var isFractionInvalid = function isFractionInvalid(fraction, numberOfFractionDigits) {
  return fraction.length > 0 && numberOfFractionDigits === 0;
};

function conformToMask(str, formatConfig, options, previousConformedValue) {
  if (previousConformedValue === void 0) previousConformedValue = '';

  if (typeof str === 'string') {
    str = str.trim();

    if (options.autoDecimalMode) {
      return getAutoDecimalModeConformedValue(str, previousConformedValue, formatConfig);
    }

    var ref = stripCurrencySymbolAndMinusSign$1(str, formatConfig);
    var value = ref.value;
    var negative = ref.negative;
    var incompleteValue = checkIncompleteValue(value, negative, previousConformedValue, formatConfig);

    if (incompleteValue != null) {
      return {
        conformedValue: incompleteValue
      };
    }

    var ref$1 = value.split(formatConfig.decimalSymbol);
    var integer = ref$1[0];
    var fraction = ref$1.slice(1);
    var integerDigits = removeLeadingZeros(onlyDigits(integer));
    var fractionDigits = onlyDigits(fraction.join('')).substr(0, formatConfig.decimalLength);

    if (isFractionInvalid(fraction, fractionDigits.length)) {
      return {
        conformedValue: previousConformedValue
      };
    }

    var number = integerDigits;

    if (negative) {
      number = "-" + number;
    }

    if (isNumber$1(number)) {
      return {
        conformedValue: Number(number + "." + fractionDigits),
        fractionDigits: fractionDigits
      };
    } else if (number === '-' && previousConformedValue !== formatConfig.negativePrefix) {
      return {
        conformedValue: previousConformedValue
      };
    } else {
      return {
        conformedValue: ''
      };
    }
  }

  return {
    conformedValue: previousConformedValue
  };
}

function dispatchEvent$1(el, eventName, data) {
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(eventName, true, true, data);
  el.dispatchEvent(event);
}

var init = function init(el, optionsFromBinding, defaultOptions) {
  var inputElement = el.tagName.toLowerCase() === 'input' ? el : el.querySelector('input');

  if (!inputElement) {
    throw new Error('No input element found');
  }

  var options = Object.assign({}, defaultOptions, optionsFromBinding);
  var min = options.min;
  var max = options.max;
  var decimalLength = options.decimalLength;
  var distractionFree = options.distractionFree;
  var autoDecimalMode = options.autoDecimalMode;
  options.hideCurrencySymbol = options.currency == null || distractionFree === true || distractionFree.hideCurrencySymbol;
  options.hideNegligibleDecimalDigits = !autoDecimalMode && (distractionFree === true || distractionFree.hideNegligibleDecimalDigits);
  options.hideGroupingSymbol = distractionFree === true || distractionFree.hideGroupingSymbol;

  if (min != null && max != null && min > max) {
    throw new Error('Invalid value range');
  }

  if (decimalLength < 0 || decimalLength > 20) {
    throw new Error('Decimal length must be between 0 and 20');
  }

  var currencyFormat = createCurrencyFormat$1(options);

  if (currencyFormat.decimalLength > 0 && decimalLength !== undefined) {
    currencyFormat.decimalLength = decimalLength;
  }

  inputElement.$ci = Object.assign({}, inputElement.$ci || {}, {
    options: options,
    currencyFormat: currencyFormat,
    decimalFormat: Object.assign({}, currencyFormat, {
      prefix: '',
      negativePrefix: '-',
      suffix: ''
    })
  });
  return inputElement;
};

var applyFixedFractionFormat = function applyFixedFractionFormat(el, value) {
  var ref = el.$ci;
  var ref_options = ref.options;
  var min = ref_options.min;
  var max = ref_options.max;
  var locale = ref_options.locale;
  var decimalLength = ref.currencyFormat.decimalLength;

  if (value != null) {
    if (min != null && value < min) {
      value = min;
    }

    if (max != null && value > max) {
      value = max;
    }

    value = new Intl.NumberFormat(locale, {
      minimumFractionDigits: decimalLength,
      maximumFractionDigits: decimalLength
    }).format(value);
  }

  format(el, value);
};

var updateInputValue = function updateInputValue(el, value, distractionFree) {
  if (distractionFree === void 0) distractionFree = false;

  if (value != null) {
    var ref = el.$ci;
    var options = ref.options;
    var decimalFormat = ref.decimalFormat;
    var currencyFormat = ref.currencyFormat;
    var focus = ref.focus;
    var previousConformedValue = ref.previousConformedValue;
    var hideCurrencySymbol = focus && options.hideCurrencySymbol;
    var formatConfig = hideCurrencySymbol ? decimalFormat : currencyFormat;
    var ref$1 = conformToMask(value, formatConfig, options, previousConformedValue);
    var conformedValue = ref$1.conformedValue;
    var fractionDigits = ref$1.fractionDigits;

    if (typeof conformedValue === 'number') {
      var formattedValue = new Intl.NumberFormat(options.locale, {
        useGrouping: !(focus && options.hideGroupingSymbol),
        minimumFractionDigits: distractionFree ? options.hideNegligibleDecimalDigits ? fractionDigits.replace(/0+$/, '').length : currencyFormat.decimalLength : fractionDigits.length
      }).format(Math.abs(conformedValue));
      var isNegativeZero = conformedValue === 0 && 1 / conformedValue < 0;
      el.value = "" + (isNegativeZero || conformedValue < 0 ? formatConfig.negativePrefix : formatConfig.prefix) + formattedValue + formatConfig.suffix;
      el.$ci.numberValue = conformedValue;
    } else {
      el.value = conformedValue;
      el.$ci.numberValue = parse$1(el.value, formatConfig);
    }
  } else {
    el.value = el.$ci.numberValue = null;
  }

  el.$ci.previousConformedValue = el.value;
};

var format = function format(el, value) {
  updateInputValue(el, value);
  dispatchEvent$1(el, 'format-complete', {
    numberValue: el.$ci.numberValue
  });
};

var addEventListener = function addEventListener(el) {
  el.addEventListener('input', function () {
    var value = el.value;
    var selectionStart = el.selectionStart;
    format(el, value);

    if (el.$ci.focus) {
      setCaretPosition(el, getCaretPositionAfterFormat(el, value, selectionStart));
    }
  }, {
    capture: true
  });
  el.addEventListener('format', function (ref) {
    var detail = ref.detail;

    if (!el.$ci.focus) {
      applyFixedFractionFormat(el, detail.value);
    }
  });
  el.addEventListener('focus', function () {
    el.$ci.focus = true;
    var ref = el.$ci;
    var currencyFormat = ref.currencyFormat;
    var options = ref.options;
    var distractionFree = options.distractionFree;
    var hideCurrencySymbol = options.hideCurrencySymbol;
    var hideGroupingSymbol = options.hideGroupingSymbol;
    var hideNegligibleDecimalDigits = options.hideNegligibleDecimalDigits;

    if (distractionFree === true || hideCurrencySymbol || hideGroupingSymbol || hideNegligibleDecimalDigits) {
      setTimeout(function () {
        var value = el.value;
        var selectionStart = el.selectionStart;
        var selectionEnd = el.selectionEnd;
        updateInputValue(el, el.value, true);

        if (Math.abs(selectionStart - selectionEnd) > 0) {
          el.setSelectionRange(0, el.value.length);
        } else {
          setCaretPosition(el, getCaretPositionAfterApplyingDistractionFreeFormat(currencyFormat, options, value, selectionStart));
        }
      });
    }
  });
  el.addEventListener('blur', function () {
    el.$ci.focus = false;
    applyFixedFractionFormat(el, el.$ci.numberValue);
  });
};

var directive = {
  bind: function bind(el, ref, ref$1) {
    var options = ref.value;
    var context = ref$1.context;
    var inputElement = init(el, options, context.$CI_DEFAULT_OPTIONS || defaultOptions);
    Vue.nextTick(function () {
      if (inputElement.value) {
        applyFixedFractionFormat(inputElement, parse$1(inputElement.value, inputElement.$ci.currencyFormat));
      }
    });
    addEventListener(inputElement);
  },
  componentUpdated: function componentUpdated(el, ref, ref$1) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    var context = ref$1.context;

    if (!!value && Object.keys(defaultOptions).some(function (key) {
      return oldValue[key] !== value[key];
    })) {
      var inputElement = init(el, value, context.$CI_DEFAULT_OPTIONS || defaultOptions);
      applyFixedFractionFormat(inputElement, inputElement.$ci.numberValue);
    }
  }
};

var options = {
  locale: undefined,
  decimalLength: 2,
  autoDecimalMode: true,
  min: null,
  max: null,
  defaultValue: 0
};

var script$9 = {
  name: 'VCurrencyField',
  props: {
    value: {
      type: [Number, String],
      default: function _default() {
        return options.defaultValue;
      }
    },
    locale: {
      type: String,
      default: function _default() {
        return options.locale;
      }
    },
    decimalLength: {
      type: Number,
      default: function _default() {
        return options.decimalLength;
      }
    },
    autoDecimalMode: {
      type: Boolean,
      default: function _default() {
        return options.autoDecimalMode;
      }
    },
    min: {
      type: Number,
      default: function _default() {
        return options.min;
      }
    },
    max: {
      type: Number,
      default: function _default() {
        return options.max;
      }
    },
    defaultValue: {
      type: Number,
      default: function _default() {
        return options.defaultValue;
      }
    }
  },
  directives: {
    CurrencyDirective: directive
  },
  data: function data() {
    return {
      currency: null,
      formattedValue: this.value
    };
  },
  mounted: function mounted() {
    this.$refs.textfield.resetValidation();
  },
  computed: {
    attrs: function attrs() {
      // eslint-disable-next-line
      var _this$$attrs = this.$attrs,
          value = _this$$attrs.value,
          attrs = _objectWithoutProperties(_this$$attrs, ["value"]); // all but input event


      return attrs;
    },
    distractionFree: function distractionFree() {
      if (this.decimalLength > 0) {
        return !this.autoDecimalMode;
      } else {
        return false;
      }
    },
    decimalMode: function decimalMode() {
      if (this.decimalLength > 0) {
        return this.autoDecimalMode;
      } else {
        return false;
      }
    }
  },
  watch: {
    value: function value(_value) {
      dispatchEvent(this.$el.querySelector('input'), 'format', {
        value: _value
      });
    }
  },
  methods: {
    listeners: function listeners() {
      var _this = this;

      // eslint-disable-next-line
      var _this$$listeners = this.$listeners,
          input = _this$$listeners.input,
          listeners = _objectWithoutProperties(_this$$listeners, ["input"]); // all but input event


      return _objectSpread2({}, listeners, {
        'format-complete': function formatComplete(_ref) {
          var detail = _ref.detail;

          if (detail.numberValue === null && _this.defaultValue !== null && _this.$el.querySelector('input').$ci.focus === false) {
            detail.numberValue = _this.defaultValue;
            dispatchEvent(_this.$el.querySelector('input'), 'format', {
              value: _this.defaultValue
            });
          }

          _this.$emit('input', detail.numberValue);

          _this.formattedValue = _this.$el.querySelector('input').value;
        },
        'keyup': function keyup(event) {
          if (event.key === '-' || event.key === '+') {
            var _stripCurrencySymbolA = stripCurrencySymbolAndMinusSign(_this.$el.querySelector('input').value, {
              prefix: '',
              suffix: ''
            }),
                value = _stripCurrencySymbolA.value,
                negative = _stripCurrencySymbolA.negative;

            var numberParts = value.split(_this.$el.querySelector('input').$ci.currencyFormat.decimalSymbol);
            var parsedValue = parse(value, _this.$el.querySelector('input').$ci.currencyFormat);
            var stringValue = null;

            if (numberParts.length === 2) {
              var fraction = numberParts[1];
              stringValue = new Intl.NumberFormat(_this.locale, {
                minimumFractionDigits: fraction.length,
                maximumFractionDigits: fraction.length
              }).format(parsedValue);
            }

            var numberValue = stringValue || parsedValue;

            if (event.key === '-' && !negative && numberValue !== null) {
              _this.$el.querySelector('input').value = "-".concat(numberValue);
              dispatchEvent(_this.$el.querySelector('input'), 'input');
            }

            if (event.key === '+' && negative && numberValue !== null) {
              _this.$el.querySelector('input').value = "".concat(numberValue);
              dispatchEvent(_this.$el.querySelector('input'), 'input');
            }
          }
        }
      });
    }
  }
};

function normalizeComponent$1(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent$1;

/* script */
const __vue_script__$9 = script$9;

/* template */
var __vue_render__$9 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-text-field',_vm._g(_vm._b({directives:[{name:"currency-directive",rawName:"v-currency-directive",value:({currency: _vm.currency, locale: _vm.locale, distractionFree: _vm.distractionFree, decimalLength: _vm.decimalLength, autoDecimalMode: _vm.decimalMode, min: _vm.min, max: _vm.max}),expression:"{currency, locale, distractionFree, decimalLength, autoDecimalMode: decimalMode, min, max}"}],ref:"textfield",attrs:{"type":"tel"},model:{value:(_vm.formattedValue),callback:function ($$v) {_vm.formattedValue=$$v;},expression:"formattedValue"}},'v-text-field',_vm.attrs,false),_vm.listeners()))};
var __vue_staticRenderFns__$9 = [];

  /* style */
  const __vue_inject_styles__$9 = undefined;
  /* scoped */
  const __vue_scope_id__$9 = undefined;
  /* module identifier */
  const __vue_module_identifier__$9 = undefined;
  /* functional template */
  const __vue_is_functional_template__$9 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var VCurrencyField = normalizeComponent_1(
    { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
    __vue_inject_styles__$9,
    __vue_script__$9,
    __vue_scope_id__$9,
    __vue_is_functional_template__$9,
    __vue_module_identifier__$9,
    undefined,
    undefined
  );

function install(Vue, globalOptions) {
  if (globalOptions) {
    Object.keys(globalOptions).map(function (key) {
      options[key] = globalOptions[key];
    });
  }

  Vue.component('v-currency-field', VCurrencyField);
}

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(install);
}

//
var script$a = {
  methods: {
    blur(event) {
      this.$emit('blur', event);
    }

  },
  components: {
    VCurrencyField
  },
  props: {
    currency: {
      type: String,
      default: 'USD'
    },
    hint: {
      type: String
    },
    placeholder: {
      type: String
    },
    persistentHint: {
      type: Boolean
    },
    errorMessages: {
      type: Array
    },
    label: {
      type: String
    },
    required: {
      type: Boolean
    },
    success: {
      type: Boolean
    },
    autofocus: {
      type: Boolean
    },
    outline: {
      type: Boolean
    },
    outline: {
      type: Boolean
    },
    'hideSuffix': {
      type: Boolean
    },
    'value': {
      type: Number,

      default() {
        return 0;
      }

    },
    'min': {
      type: Number,

      default() {
        return 0;
      }

    },
    'max': {
      type: Number
    }
  },
  computed: {
    prefix() {
      return this.$fluro.utils.currencySymbol(this.currency);
    },

    suffix() {
      if (this.hideSuffix) {
        return;
      }

      return String(this.currency || '').toUpperCase();
    }

  },

  data() {
    return {
      model: this.value / 100
    };
  },

  watch: {
    model(v) {
      v = parseInt(v);
      v = Math.max(v, 0);
      v = v * 100;
      console.log('Input changed', v);
      this.$emit('input', v);
    }

  }
};

/* script */
const __vue_script__$a = script$a;

/* template */
var __vue_render__$a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-currency-field',{attrs:{"prefix":_vm.prefix,"suffix":_vm.suffix,"label":_vm.label,"required":_vm.required,"autofocus":_vm.autofocus,"outline":_vm.outline,"success":_vm.success,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentHint,"hint":_vm.hint,"placeholder":_vm.placeholder,"min":_vm.min,"max":_vm.max},on:{"blur":_vm.blur},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)};
var __vue_staticRenderFns__$a = [];

  /* style */
  const __vue_inject_styles__$a = function (inject) {
    if (!inject) return
    inject("data-v-eb25d5b6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$a = undefined;
  /* module identifier */
  const __vue_module_identifier__$a = undefined;
  /* functional template */
  const __vue_is_functional_template__$a = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$9 = normalizeComponent(
    { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
    __vue_inject_styles__$a,
    __vue_script__$a,
    __vue_scope_id__$a,
    __vue_is_functional_template__$a,
    __vue_module_identifier__$a,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$b = {
  // components:{
  // VueSignature,
  // },
  props: {
    'errorMessages': {
      type: Array
    },
    'hint': {
      type: String
    },
    'required': {
      type: [Boolean, Number]
    },
    'label': {
      type: String
    },
    'value': {
      type: String
    },
    'width': {
      default: '100%',
      type: [String, Number]
    },
    'height': {
      default: '300px',
      type: [String, Number]
    },
    'readonly': {
      type: Boolean
    }
  },

  mounted() {
    var self = this;
    var canvas = this.$refs.canvas;
    self.pad = new SignaturePad(canvas, {
      dotSize: (0.5 + 2.5) / 2,
      minWidth: 0.5,
      maxWidth: 2.5,
      throttle: 16,
      minDistance: 5,
      backgroundColor: 'rgba(0,0,0,0)',
      penColor: 'black',
      velocityFilterWeight: 0.7
    });

    self.pad.onBegin = function () {
      console.log('Begin!');
    };

    self.pad.onEnd = function () {
      console.log('End!');
      self.model = self.pad.toDataURL();
      self.save();
    }; // console.log('Mounted', canvas, self.pad);


    window.addEventListener("resize", self.resizeCanvas);
    self.resizeCanvas();
  },

  data() {
    return {
      model: this.value,
      pad: null // signatureData: TRANSPARENT_PNG,
      // options:{
      //     onEnd:this.save,
      // }

    };
  },

  methods: {
    resizeCanvas() {
      var ratio = Math.max(window.devicePixelRatio || 1, 1);
      var canvas = this.$refs.canvas;
      canvas.width = canvas.offsetWidth * ratio;
      canvas.height = canvas.offsetHeight * ratio;
      canvas.getContext("2d").scale(ratio, ratio);
      this.pad.clear(); // otherwise isEmpty() might return incorrect value
    },

    // resizeCanvas() {
    //     const canvas = this.$refs.canvas;
    //     const data = this.pad.toData();
    //     const ratio = Math.max(window.devicePixelRatio || 1, 1);
    //     canvas.width = canvas.offsetWidth * ratio;
    //     canvas.height = canvas.offsetHeight * ratio;
    //     canvas.getContext('2d').scale(ratio, ratio);
    //     this.pad.clear();
    //     // this.signatureData = TRANSPARENT_PNG;
    //     this.pad.fromData(data);
    // },
    clear() {
      this.pad.clear();
      this.model = '';
      this.save();
    },

    save() {
      // var pad = this.$refs.pad;
      // const { isEmpty, data } = pad.saveSignature();
      // // console.log(isEmpty);
      // // console.log(data);
      // if(isEmpty) {
      //     this.model ='';
      // } else {
      //     this.model = data;
      // }
      this.$emit('input', this.model);
    }

  },

  beforeDestroy() {
    if (process.browser) {
      window.removeEventListener("resize", this.resizeCanvas);
    } //Destroy the Pad?

  }

};

/* script */
const __vue_script__$b = script$b;

/* template */
var __vue_render__$b = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-signature-field"},[_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.label,"persistent-hint":true,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.hint}},[_c('div',{staticClass:"signature-pad-wrap"},[_c('canvas',{ref:"canvas",staticClass:"signature-pad",attrs:{"id":"signature-pad"}}),_vm._v(" "),_c('v-btn',{staticClass:"clear",on:{"click":function($event){return _vm.clear()}}},[_vm._v("\n                Clear "),_c('fluro-icon',{attrs:{"right":"","icon":"times"}})],1)],1)])],1)};
var __vue_staticRenderFns__$b = [];

  /* style */
  const __vue_inject_styles__$b = function (inject) {
    if (!inject) return
    inject("data-v-8f0bfbfa_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-signature-field .v-input__slot{display:block!important}", map: undefined, media: undefined })
,inject("data-v-8f0bfbfa_1", { source: ".border-top[data-v-8f0bfbfa]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-8f0bfbfa]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-8f0bfbfa]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-8f0bfbfa]{border-left:1px solid rgba(0,0,0,.05)}.signature-pad-wrap[data-v-8f0bfbfa]{flex:1;position:relative;height:0;padding-bottom:50%;border:2px solid;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.signature-pad-wrap canvas[data-v-8f0bfbfa]{display:block;width:100%;height:100%;position:absolute;left:0;right:0;bottom:0;top:0;cursor:pointer}.signature-pad-wrap .clear[data-v-8f0bfbfa]{position:absolute;bottom:0;right:0}.pad[data-v-8f0bfbfa]{border:1px solid rgba(0,0,0,.1);border-radius:3px;box-shadow:0 3px 3px rgba(0,0,0,.2);background:#fff;margin:5px 0 10px;min-height:300px;width:100%}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$b = "data-v-8f0bfbfa";
  /* module identifier */
  const __vue_module_identifier__$b = undefined;
  /* functional template */
  const __vue_is_functional_template__$b = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$a = normalizeComponent(
    { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
    __vue_inject_styles__$b,
    __vue_script__$b,
    __vue_scope_id__$b,
    __vue_is_functional_template__$b,
    __vue_module_identifier__$b,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$c = {
  props: {
    muted: {
      type: Boolean
    },
    enabled: {
      type: Boolean,
      default: true
    },
    heading: {
      type: String
    },
    tooltip: {
      type: String,

      default() {
        return null;
      }

    },
    iconType: {
      type: String
    },
    icon: {
      type: Object
    }
  },
  inject: ['tabs', 'addTab', 'activeTabIndex', 'removeTab'],

  created() {
    // console.log('THISIIIIITY', this.tabs)
    // this.tabs.push(this);
    this.index = this.tabs.length;
    this.addTab(this);
    this.active = this.index == this.activeTabIndex;
  },

  watch: {
    active: 'emitActive'
  },

  beforeDestroy() {
    this.removeTab(this); // _.pull(this.tabs, this);
    // .splice(this.index, 1);
  },

  methods: {
    emitActive(val) {
      if (this.active) {
        this.$emit('activeTab');
      }
    }

  },

  data() {
    return {
      index: 0,
      active: false
    };
  } // methods: {
  //     act() {
  //         var self = this;
  //         //Run a batch
  //         var promise = self.$batch.run({
  //             operation: 'add tag',
  //             ids: self.ids,
  //             tags: self.$fluro.utils.arrayIDs(self.selectedTags),
  //         });
  //         //Close the modal with the promise
  //         return self.close(promise)
  //     },
  // }


};

/* script */
const __vue_script__$c = script$c;

/* template */
var __vue_render__$c = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"slide"}},[(_vm.active)?_c('flex-column',[_vm._t("default")],2):_vm._e()],1)};
var __vue_staticRenderFns__$c = [];

  /* style */
  const __vue_inject_styles__$c = function (inject) {
    if (!inject) return
    inject("data-v-5eaeea30_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.slide-enter-active,.slide-leave-active{transition:.2s}.slide-enter{top:0;left:0;right:0;bottom:0;width:100%;position:absolute;transform:translate(15px,0);opacity:0}.slide-leave-to{top:0;left:0;right:0;bottom:0;width:100%;position:absolute;transform:translate(-15px,0);opacity:0}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$c = undefined;
  /* module identifier */
  const __vue_module_identifier__$c = undefined;
  /* functional template */
  const __vue_is_functional_template__$c = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$b = normalizeComponent(
    { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
    __vue_inject_styles__$c,
    __vue_script__$c,
    __vue_scope_id__$c,
    __vue_is_functional_template__$c,
    __vue_module_identifier__$c,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$d = {
  props: {
    value: {
      type: Number
    },
    options: {
      type: Object
    },
    justified: {
      type: Boolean
    },
    persist: {
      type: Boolean
    },
    vertical: {
      type: Boolean
    }
  },

  provide() {
    return {
      removeTab: this.removeTab,
      addTab: this.addTab,
      tabs: this.tabs,
      activeTabIndex: this.activeTabIndex
    };
  },

  data() {
    return {
      tabs: [],
      activeTabIndex: this.value || 0
    };
  },

  watch: {
    value: 'selectTab',

    activeTabIndex(val) {
      this.$emit('input', val);
    }

  },
  computed: {
    enabledTabs() {
      var self = this;
      return self.tabs; //_.filter(self.tabs, {enabled:true});
    }

  },
  methods: {
    removeTab(tab) {
      lodash.pull(this.tabs, tab);
    },

    addTab(tab) {
      if (lodash.includes(this.tabs, tab)) {
        return;
      }

      this.tabs.push(tab);
    },

    selectTab(index) {
      // console.log('Select', index)
      var self = this;
      index = Math.max(index, 0);
      index = Math.min(index, self.tabs.length - 1);
      self.activeTabIndex = index;
      var menuElement = self.$refs.outer;
      var containerElement = self.$refs.inner;
      var childElement = containerElement.children[self.activeTabIndex]; ////////////////////////////////////////////////
      ////////////////////////////////////////////////
      ////////////////////////////////////////////////

      var parentPos = containerElement.getBoundingClientRect();
      var childPos = childElement.getBoundingClientRect();
      var relativePos = {};
      relativePos.top = childPos.top - parentPos.top, relativePos.right = childPos.right - parentPos.right, relativePos.bottom = childPos.bottom - parentPos.bottom, relativePos.left = childPos.left - parentPos.left; ////////////////////////////////////////////////

      var menuWidth = menuElement.offsetWidth;
      var childWidth = childElement.offsetWidth;
      var scrollWidth = menuElement.scrollWidth;
      var target = relativePos.left - (menuWidth / 2 - childWidth / 2); //relativePos.left;
      // var target = relativePos.left; //relativePos.left;
      ////////////////////////////////////////////////
      ////////////////////////////////////////////////
      // var target = relativePos.left; //(menuElement.offsetWidth/2) - relativePos.left;
      // console.log('TEST', menuWidth, scrollWidth, target);

      menuElement.scrollTo({
        // top: 100,
        left: target,
        behavior: 'smooth'
      }); // menuElement.scrollLeft = target;
      // console.log(relativePos);
      // something like: {top: 50, right: -100, bottom: -50, left: 100}
      // 
      // 
      // 
      // console.log(menuElement);​
      // var menuWidth = menuElement.offsetWidth;
      // var childPosition = childElement.clientLeft;
      // var half = menuWidth /2;
      // var target = childPosition - half;
      // if(target < half) {
      //     target = 0;
      // }
      // console.log('TARGEt', self.$refs, target);
      // menuElement.scrollLeft =target
      // var contentWidth = menuElement.scrollWidth;
      // var childPosition = childElement.offsetLeft;
      // var halfWidth = menuWidth/2;
      // console.log('MENU', '____', menuWidth, contentWidth, childPosition)
      // menuElement.scrollLeft = childPosition - halfWidth;// childPosition;
      // var maxLimit = menuElement.scrollWidth - menuElement.offsetWidth;
      // var scrollTarget = maxLimit - childElement.offsetLeft;
      // console.log(self.$refs, scrollTarget, menuElement.scrollWidth - menuElement.offsetWidth);
      // menuElement.scrollLeft = scrollTarget;

      lodash.each(self.tabs, function (tab) {
        tab.active = tab.index == self.activeTabIndex;
      });
    }

  } //     act() {
  //         var self = this;
  //         //Run a batch
  //         var promise = self.$batch.run({
  //             operation: 'add tag',
  //             ids: self.ids,
  //             tags: self.$fluro.utils.arrayIDs(self.selectedTags),
  //         });
  //         //Close the modal with the promise
  //         return self.close(promise)
  //     },
  // }

};

/* script */
const __vue_script__$d = script$d;

/* template */
var __vue_render__$d = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"tabset",class:{justified: _vm.justified, vertical: _vm.vertical}},[(_vm.enabledTabs.length > 1 || _vm.persist)?_c('flex-column-header',{staticClass:"tabset-header"},[_vm._t("menuprefix"),_vm._v(" "),_c('div',{ref:"outer",staticClass:"tabset-menu"},[_c('div',{ref:"inner",staticClass:"tabset-menu-inner"},[_vm._l((_vm.enabledTabs),function(tab,index){return [_c('a',{class:{active:index == _vm.activeTabIndex, muted:tab.muted},attrs:{"flat":"","v-tippy":tab.tooltip && tab.tooltip.length,"content":tab.tooltip},on:{"click":function($event){return _vm.selectTab(index)}}},[_vm._v("\n                        "+_vm._s(tab.heading)+" \n                        "),(tab.icon)?[(tab.icon.icon)?_c('fluro-icon',{style:({ color: tab.icon.color }),attrs:{"icon":tab.icon.icon,"library":tab.icon.library}}):_vm._e(),_vm._v(" "),(tab.icon.type)?_c('fluro-icon',{style:({ color: tab.icon.color }),attrs:{"type":tab.icon.type,"library":tab.icon.library}}):_vm._e()]:_vm._e()],2)]})],2)]),_vm._v(" "),_vm._t("menusuffix")],2):_vm._e(),_vm._v(" "),_c('flex-column',{staticClass:"tabset-content"},[_vm._t("default")],2)],1)};
var __vue_staticRenderFns__$d = [];

  /* style */
  const __vue_inject_styles__$d = function (inject) {
    if (!inject) return
    inject("data-v-34a6a010_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.tabset{flex:1}.tabset .tabset-menu{flex:none;overflow:hidden;white-space:nowrap;overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch}.tabset .tabset-menu a{display:inline-block;color:inherit;opacity:.6;padding:15px 35px;font-size:.8em;letter-spacing:.05em;text-transform:uppercase;font-weight:500;flex:1;text-align:center;border-top:3px solid transparent;border-left:1px solid transparent;border-right:1px solid transparent;border-bottom:1px solid rgba(0,0,0,.05);position:relative;transition:opacity .2s,background .2s}.tabset .tabset-menu a.muted{opacity:.4;background:#ccc}.tabset .tabset-menu a.active{opacity:1;background:#fff;border-left:1px solid rgba(0,0,0,.05);border-right:1px solid rgba(0,0,0,.05);border-top:3px solid #2ad4b9;border-bottom:1px solid transparent}.tabset .tabset-content{flex:1;position:relative}.tabset.justified .tabset-menu a{padding:15px 17px}.tabset.justified .tabset-menu-inner{display:flex}@media (min-width:768px){.tabset.vertical{display:flex;flex-direction:row}.tabset.vertical>.tabset-header{min-width:200px;max-width:260px;width:25%;display:flex;flex-direction:column;background:rgba(0,0,0,.05)}.tabset.vertical>.tabset-header .tabset-menu{background:0 0;flex:1;white-space:normal;overflow-x:hidden;overflow-y:auto}.tabset.vertical>.tabset-header .tabset-menu .tabset-menu-inner{display:block}.tabset.vertical>.tabset-header .tabset-menu .tabset-menu-inner a{background:0 0;border:none;display:block;border-left:3px solid transprent;text-align:left;text-transform:none;letter-spacing:0;font-size:1.1em;padding:10px 5px 10px 15px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;flex:none}.tabset.vertical>.tabset-header .tabset-menu .tabset-menu-inner a.muted{opacity:.2;background:#bbb}.tabset.vertical>.tabset-header .tabset-menu .tabset-menu-inner a.active{background:#fafafa;border-left:3px solid #2ad4b9}}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$d = undefined;
  /* module identifier */
  const __vue_module_identifier__$d = undefined;
  /* functional template */
  const __vue_is_functional_template__$d = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$c = normalizeComponent(
    { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
    __vue_inject_styles__$d,
    __vue_script__$d,
    __vue_scope_id__$d,
    __vue_is_functional_template__$d,
    __vue_module_identifier__$d,
    false,
    createInjector,
    undefined,
    undefined
  );

//
const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_TIME_FORMAT = 'HH:mm';
const DEFAULT_TIME = '00:00';
var script$e = {
  name: 'datetime-picker',
  model: {
    prop: 'datetime',
    event: 'input'
  },
  components: {
    FluroTab: __vue_component__$b,
    FluroTabset: __vue_component__$c
  },
  props: {
    datetime: {
      type: [Date, String],
      default: null
    },
    label: {
      type: String,
      default: ''
    },
    hint: {
      type: String,
      default: ''
    },
    placeholder: {
      type: String,
      default: 'Select a date'
    },
    min: {
      type: Date
    },
    max: {
      type: Date
    },
    outline: {
      type: Boolean
    },
    width: {
      type: Number,
      default: 320
    },
    format: {
      type: String,
      default: 'YYYY-MM-DD HH:mm:ss'
    },
    timePickerFormat: {
      type: String,
      default: '24hr'
    },
    locale: {
      type: String,
      default: 'en-us'
    },
    clearText: {
      type: String,
      default: 'CLEAR'
    },
    okText: {
      type: String,
      default: 'OK'
    },
    disabled: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    errorMessages: {
      type: [String, Array],
      default: () => []
    },
    errorCount: {
      type: [Number, String],
      default: 1
    },
    error: {
      type: Boolean,
      default: false
    },
    hideDetails: {
      type: Boolean,
      default: false
    },
    appendIcon: {
      type: String
    },
    prependIcon: {
      type: String
    }
  },

  data() {
    return {
      display: false,
      dateSelected: false,
      timeSelected: false,
      activeTab: 0,
      selectedDatetime: null
    };
  },

  created() {
    var self = this;

    if (self.datetime) {
      if (self.datetime instanceof Date) {
        self.selectedDatetime = self.datetime;
      } else if (typeof self.datetime === 'string' || self.datetime instanceof String) {
        // see https://stackoverflow.com/a/9436948
        self.selectedDatetime = self.$fluro.date.moment(new Date(self.datetime), self.format);
      }
    }
  },

  computed: {
    minDateString() {
      var self = this;
      return self.min ? self.$fluro.date.moment(self.min).format(DEFAULT_DATE_FORMAT) : null;
    },

    maxDateString() {
      var self = this;
      return self.max ? self.$fluro.date.moment(self.max).format(DEFAULT_DATE_FORMAT) : null;
    },

    readable() {
      return this.datetime ? this.formattedDatetime : this.placeholder; //'Select a date'
    },

    datePart: {
      get() {
        var self = this;
        let val = self.selectedDatetime ? self.$fluro.date.moment(self.selectedDatetime).format(DEFAULT_DATE_FORMAT) : '';
        return val;
      },

      set(val) {
        var self = this;
        self.dateSelected = true;
        self.activeTab = 1;
        var moment = self.$fluro.date.moment;
        let date = moment(val, DEFAULT_DATE_FORMAT);
        let hour = self.selectedDatetime ? moment(self.selectedDatetime).hour() : 0;
        let minute = self.selectedDatetime ? moment(self.selectedDatetime).minute() : 0;
        let input = moment().year(date.year()).month(date.month()).date(date.date()).hour(hour).minute(minute).second(0);
        self.selectedDatetime = input.toDate();
      }

    },
    timePart: {
      get() {
        var self = this;
        let val = self.selectedDatetime ? self.$fluro.date.moment(self.selectedDatetime).format(DEFAULT_TIME_FORMAT) : DEFAULT_TIME;
        return val;
      },

      set(val) {
        var self = this;
        self.timeSelected = true;
        let time = self.$fluro.date.moment(val, DEFAULT_TIME_FORMAT);
        let input = self.$fluro.date.moment(self.selectedDatetime).hour(time.hour()).minute(time.minute()).second(0);
        self.selectedDatetime = input.toDate();
      }

    },

    formattedDatetime() {
      var self = this;
      return self.datetime ? self.$fluro.date.moment(self.datetime).format(self.format) : '';
    }

  },
  methods: {
    okHandler() {
      this.display = false;
      this.activeTab = 0;

      if (this.$refs.timer) {
        this.$refs.timer.selectingHour = true;
      }

      this.$emit('input', this.selectedDatetime);
    },

    clearHandler() {
      this.display = false;
      this.activeTab = 0;

      if (this.$refs.timer) {
        this.$refs.timer.selectingHour = true;
      }

      this.$emit('input', null);
    }

  }
};

/* script */
const __vue_script__$e = script$e;

/* template */
var __vue_render__$e = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-dialog',{attrs:{"lazy":"","full-width":"","width":_vm.width,"disabled":_vm.disabled},model:{value:(_vm.display),callback:function ($$v) {_vm.display=$$v;},expression:"display"}},[_c('v-input',{staticClass:"no-flex",attrs:{"slot":"activator","label":_vm.label,"hint":_vm.hint,"persistent-hint":true,"disabled":_vm.disabled,"loading":_vm.loading,"error-messages":_vm.errorMessages,"error-count":_vm.errorCount,"error":_vm.error,"hide-details":_vm.hideDetails},slot:"activator"},[_c('v-btn',{staticClass:"mx-0",attrs:{"block":"","large":"","color":"#e0e0e0"}},[_c('fluro-icon',{attrs:{"left":"","icon":"calendar-alt"}}),_vm._v(_vm._s(_vm.readable)+"\n            ")],1)],1),_vm._v(" "),_c('flex-column',[_c('fluro-tabset',{attrs:{"justified":true},model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v;},expression:"activeTab"}},[_c('fluro-tab',{attrs:{"heading":"Date"}},[_c('v-date-picker',{staticClass:"elevation-0",attrs:{"attach":"","min":_vm.minDateString,"max":_vm.maxDateString,"full-width":"","scrollable":"","locale":_vm.locale,"actions":""},model:{value:(_vm.datePart),callback:function ($$v) {_vm.datePart=$$v;},expression:"datePart"}})],1),_vm._v(" "),_c('fluro-tab',{attrs:{"heading":"Time"}},[_c('v-time-picker',{ref:"timer",staticClass:"v-time-picker-custom elevation-0",attrs:{"attach":"","full-width":"","scrollable":"","format":_vm.timePickerFormat,"actions":""},model:{value:(_vm.timePart),callback:function ($$v) {_vm.timePart=$$v;},expression:"timePart"}})],1)],1),_vm._v(" "),_c('v-card-actions',[_c('v-spacer'),_vm._v(" "),_vm._t("actions",[_c('v-btn',{attrs:{"color":"","flat":""},nativeOn:{"click":function($event){return _vm.clearHandler($event)}}},[_vm._v(_vm._s(_vm.clearText))]),_vm._v(" "),_c('v-btn',{attrs:{"color":"primary"},on:{"click":_vm.okHandler}},[_vm._v(_vm._s(_vm.okText))])],{"parent":this})],2)],1)],1)};
var __vue_staticRenderFns__$e = [];

  /* style */
  const __vue_inject_styles__$e = undefined;
  /* scoped */
  const __vue_scope_id__$e = undefined;
  /* module identifier */
  const __vue_module_identifier__$e = undefined;
  /* functional template */
  const __vue_is_functional_template__$e = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$d = normalizeComponent(
    { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
    __vue_inject_styles__$e,
    __vue_script__$e,
    __vue_scope_id__$e,
    __vue_is_functional_template__$e,
    __vue_module_identifier__$e,
    false,
    undefined,
    undefined,
    undefined
  );

var FluroSelectionMixin = {
  data() {
    return {
      selectionMinimum: 0,
      selectionMaximum: 0,
      selection: []
    };
  },

  methods: {
    select(item) {
      var self = this;

      if (!self.isSelected(item)) {
        var currentSize = self.selection.length;
        var maxLimit = self.selectionMaximum; //If there is no limit or we are under the limit

        if (!maxLimit || currentSize < maxLimit) {
          //Add to our selection
          return self.$set(self.selection, self.selection.length, item);
        } //Replace the last item in our selection with the new item
        //console.log('Select', self.selection.length, item);


        return self.$set(self.selection, self.selection.length - 1, item);
      }
    },

    selectMultiple(items) {
      var self = this; // console.time('select multiple')
      // console.log('Select multiple items', self.selection, items);

      var newSelection = [...self.selection, ...items];
      newSelection = lodash.uniqBy(newSelection, function (item) {
        return item._id || item;
      });
      console.log('SELECT NEW ITEMS', self.selectionMaximum, newSelection.length);
      self.setSelection(newSelection); // console.timeEnd('select multiple')
      // rehash()
      // service.previousIntent = 'select';
    },

    setSelection(array) {
      var self = this;

      if (self.selectionMaximum && array.length > self.selectionMaximum) {
        array = array.slice(0, self.selectionMaximum); // console.log('sliced to', array.length, self.selectionMaximum)
      }

      self.selection = array; // self.selection.length = 0;
      // _.each(array, function(item) {
      //     self.$set(self.selection, self.selection.length, item);
      // })
    },

    deselect(item) {
      var self = this;

      if (!item) {
        return;
      } //Get the item ID


      var itemID = self.$fluro.utils.getStringID(item); //Find the index of the matching item

      var index = lodash.findIndex(self.selection, function (selectedItem) {
        var selectedItemID = self.$fluro.utils.getStringID(selectedItem);
        return itemID == selectedItemID;
      });

      self.selection.splice(index, 1);
    },

    toggle(item) {
      var self = this;

      if (self.isSelected(item)) {
        self.deselect(item);
      } else {
        self.select(item);
      } // console.log('TOGGLE', self.selection);

    },

    deselectAll() {
      this.selection = []; // this.selection.length =0;
    },

    isSelected(item) {
      var self = this; // console.log('SHOULD BE FLURO', !!self.$fluro)

      var itemID = self.$fluro.utils.getStringID(item); //Check if the ID is already selected

      var match = lodash.some(self.selection, function (selectedItem) {
        var selectedItemID = self.$fluro.utils.getStringID(selectedItem);
        return itemID == selectedItemID;
      });

      return match;
    }

  }
};

//
//
//
//
//
var script$f = {// props:{
  //     'color':{
  //         type:String,
  //     }
  // },
  // data() {
  // },
  // computed:{
  //     styles() {
  //         var style = {};
  //         if(this.color && this.color.length) {
  //             style.backgroundColor = this.color;
  //         }
  //         return style;
  //     }
  // }
};

/* script */
const __vue_script__$f = script$f;

/* template */
var __vue_render__$f = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"wrapper"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$f = [];

  /* style */
  const __vue_inject_styles__$f = function (inject) {
    if (!inject) return
    inject("data-v-0e7ad159_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.wrapper{padding:70px 0}.wrapper[bottom]{padding-top:0!important}.wrapper[top]{padding-top:0!important}.wrapper [wrapper-title]{margin-bottom:56px}.wrapper [centered]{text-align:center}.wrapper[xs]{padding:23px 0}.wrapper[xs] [wrapper-title]{margin-bottom:18.4px}.wrapper[sm]{padding:35px 0}.wrapper[sm] [wrapper-title]{margin-bottom:28px}.wrapper[lg]{padding:140px 0}.wrapper[lg] [wrapper-title]{margin-bottom:37.3333333333px}.wrapper[xl]{padding:210px 0}.wrapper[xl] [wrapper-title]{margin-bottom:56px}@media (max-width:1024px){.wrapper{padding:50px 0}.wrapper [wrapper-title]{margin-bottom:40px}.wrapper[xs]{padding:16px 0}.wrapper[xs] [wrapper-title]{margin-bottom:12.8px}.wrapper[sm]{padding:25px 0}.wrapper[sm] [wrapper-title]{margin-bottom:20px}.wrapper[lg]{padding:100px 0}.wrapper[lg] [wrapper-title]{margin-bottom:26.6666666667px}.wrapper[xl]{padding:150px 0}.wrapper[xl] [wrapper-title]{margin-bottom:40px}}@media (max-width:768px){.wrapper{padding:30px 0}.wrapper [wrapper-title]{margin-bottom:24px}.wrapper[xs]{padding:10px 0}.wrapper[xs] [wrapper-title]{margin-bottom:8px}.wrapper[sm]{padding:15px 0}.wrapper[sm] [wrapper-title]{margin-bottom:12px}.wrapper[lg]{padding:60px 0}.wrapper[lg] [wrapper-title]{margin-bottom:16px}.wrapper[xl]{padding:90px 0}.wrapper[xl] [wrapper-title]{margin-bottom:24px}}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$f = undefined;
  /* module identifier */
  const __vue_module_identifier__$f = undefined;
  /* functional template */
  const __vue_is_functional_template__$f = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$e = normalizeComponent(
    { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
    __vue_inject_styles__$f,
    __vue_script__$f,
    __vue_scope_id__$f,
    __vue_is_functional_template__$f,
    __vue_module_identifier__$f,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$g = {};

/* script */
const __vue_script__$g = script$g;

/* template */
var __vue_render__$g = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"constrain"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$g = [];

  /* style */
  const __vue_inject_styles__$g = function (inject) {
    if (!inject) return
    inject("data-v-9c55224c_0", { source: ".border-top[data-v-9c55224c]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-9c55224c]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-9c55224c]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-9c55224c]{border-left:1px solid rgba(0,0,0,.05)}.constrain[data-v-9c55224c]{margin:auto;max-width:1200px}.constrain[gutterless][data-v-9c55224c]{padding:0}.constrain[xs][data-v-9c55224c]{max-width:320px}.constrain[sm][data-v-9c55224c]{max-width:740px}.constrain[md][data-v-9c55224c]{max-width:1200px}.constrain[lg][data-v-9c55224c]{max-width:1600px}.constrain[left][data-v-9c55224c]{margin:0}.constrain[centered][data-v-9c55224c]{text-align:center}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$g = "data-v-9c55224c";
  /* module identifier */
  const __vue_module_identifier__$g = undefined;
  /* functional template */
  const __vue_is_functional_template__$g = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$f = normalizeComponent(
    { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
    __vue_inject_styles__$g,
    __vue_script__$g,
    __vue_scope_id__$g,
    __vue_is_functional_template__$g,
    __vue_module_identifier__$g,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$h = {
  props: {
    'realm': {
      type: [Object, Array, String]
    }
  },
  computed: {
    allRealms() {
      var options = [];

      if (this.realm) {
        if (Array.isArray(this.realm)) {
          options = options.concat(this.realm);
        } else {
          options.push(this.realm);
        }
      } // if (this.realms) {
      //     if (Array.isArray(this.realms)) {
      //         options = options.concat(this.realms);
      //     } else {
      //         options.push(this.realms);
      //     }
      // }


      return options;
    },

    primaryRealm() {
      return lodash.find(this.allRealms, function (realm) {
        return realm.bgColor && realm.bgColor.length;
      });
    },

    style() {
      if (this.primaryRealm) {
        return {
          backgroundColor: this.primaryRealm.bgColor
        };
      }
    }

  }
};

/* script */
const __vue_script__$h = script$h;

/* template */
var __vue_render__$h = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"realm-bar",style:(_vm.style)})};
var __vue_staticRenderFns__$h = [];

  /* style */
  const __vue_inject_styles__$h = function (inject) {
    if (!inject) return
    inject("data-v-949987c0_0", { source: ".border-top[data-v-949987c0]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-949987c0]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-949987c0]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-949987c0]{border-left:1px solid rgba(0,0,0,.05)}.realm-bar[data-v-949987c0]{width:5px;position:absolute;left:0;top:0;bottom:0;height:100%;background:rgba(0,0,0,.1)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$h = "data-v-949987c0";
  /* module identifier */
  const __vue_module_identifier__$h = undefined;
  /* functional template */
  const __vue_is_functional_template__$h = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$g = normalizeComponent(
    { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
    __vue_inject_styles__$h,
    __vue_script__$h,
    __vue_scope_id__$h,
    __vue_is_functional_template__$h,
    __vue_module_identifier__$h,
    false,
    createInjector,
    undefined,
    undefined
  );

var Layout = {
  components: {
    Wrapper: __vue_component__$e,
    Constrain: __vue_component__$f,
    FluroRealmBar: __vue_component__$g
  }
};

//
//
//
//
//
//
//
//
//
/////////////////////////////////
var script$i = {
  props: {
    all: {
      type: Boolean
    },
    some: {
      type: Boolean
    }
  },
  computed: {
    icon() {
      if (!this.all && this.some) {
        return 'minus';
      }

      return 'check';
    }

  }
};

/* script */
const __vue_script__$i = script$i;

/* template */
var __vue_render__$i = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""}},[_c('span',{staticClass:"checkbox-outer",class:{active:_vm.all, some:_vm.some}},[_c('fluro-icon',{attrs:{"library":"fas","icon":_vm.icon}})],1)])};
var __vue_staticRenderFns__$i = [];

  /* style */
  const __vue_inject_styles__$i = function (inject) {
    if (!inject) return
    inject("data-v-bbfe0cc6_0", { source: ".border-top[data-v-bbfe0cc6]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-bbfe0cc6]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-bbfe0cc6]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-bbfe0cc6]{border-left:1px solid rgba(0,0,0,.05)}.v-btn .checkbox-outer[data-v-bbfe0cc6]{background:#fff;border-radius:2px;border:2px solid rgba(0,0,0,.2);width:18px;height:18px;display:inline-block;padding:0;margin:0;line-height:18px;text-align:center;font-size:12px}.v-btn .checkbox-outer svg[data-v-bbfe0cc6]{opacity:0}.v-btn .checkbox-outer.some[data-v-bbfe0cc6]{color:#f0974e}.v-btn .checkbox-outer.some svg[data-v-bbfe0cc6]{opacity:1}.v-btn .checkbox-outer.active[data-v-bbfe0cc6]{background:#4cc650;color:#fff;border-color:#4cc650!important}.v-btn .checkbox-outer.active svg[data-v-bbfe0cc6]{opacity:1}.v-btn:hover .checkbox-outer[data-v-bbfe0cc6]{border:2px solid rgba(0,0,0,.5)}.v-btn:hover .checkbox-outer svg[data-v-bbfe0cc6]{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$i = "data-v-bbfe0cc6";
  /* module identifier */
  const __vue_module_identifier__$i = undefined;
  /* functional template */
  const __vue_is_functional_template__$i = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$h = normalizeComponent(
    { render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i },
    __vue_inject_styles__$i,
    __vue_script__$i,
    __vue_scope_id__$i,
    __vue_is_functional_template__$i,
    __vue_module_identifier__$i,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
/////////////////////////////////
var script$j = {
  props: {
    'checked': {
      type: Boolean
    }
  },

  data() {
    return {};
  },

  computed: {
    library() {
      if (this.checked) {
        return 'fas';
      } else {
        return;
      }
    },

    icon() {
      if (this.checked) {
        return 'check-square';
      } else {
        return 'square';
      }
    } // selected() {
    //     return this.$selection.isSelected(this.value)
    // }


  }
};

/* script */
const __vue_script__$j = script$j;

/* template */
var __vue_render__$j = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('th',{staticClass:"checkbox-cell"},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""}},[_c('span',{staticClass:"checkbox-outer",class:{active:_vm.checked}},[_c('fluro-icon',{attrs:{"library":"fas","icon":"check"}})],1)])],1)};
var __vue_staticRenderFns__$j = [];

  /* style */
  const __vue_inject_styles__$j = function (inject) {
    if (!inject) return
    inject("data-v-7f6777c8_0", { source: ".border-top[data-v-7f6777c8]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-7f6777c8]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-7f6777c8]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-7f6777c8]{border-left:1px solid rgba(0,0,0,.05)}.v-btn .checkbox-outer[data-v-7f6777c8]{background:#fff;border-radius:2px;border:2px solid rgba(0,0,0,.2);width:18px;height:18px;display:inline-block;padding:0;margin:0;line-height:18px;text-align:center;font-size:12px}.v-btn .checkbox-outer svg[data-v-7f6777c8]{opacity:0}.v-btn .checkbox-outer.active[data-v-7f6777c8]{background:#4cc650;color:#fff;border-color:#4cc650!important}.v-btn .checkbox-outer.active svg[data-v-7f6777c8]{opacity:1}.v-btn:hover .checkbox-outer[data-v-7f6777c8]{border:2px solid rgba(0,0,0,.5)}.v-btn:hover .checkbox-outer svg[data-v-7f6777c8]{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$j = "data-v-7f6777c8";
  /* module identifier */
  const __vue_module_identifier__$j = undefined;
  /* functional template */
  const __vue_is_functional_template__$j = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$i = normalizeComponent(
    { render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j },
    __vue_inject_styles__$j,
    __vue_script__$j,
    __vue_scope_id__$j,
    __vue_is_functional_template__$j,
    __vue_module_identifier__$j,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$k = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    empty() {
      if (parseInt(this.data) == 0) {
        return true;
      }
    }

  }
};

/* script */
const __vue_script__$k = script$k;

/* template */
var __vue_render__$k = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"number-cell-text",class:{muted:_vm.empty}},[_vm._v("\n    "+_vm._s(_vm.data)+"\n    ")])};
var __vue_staticRenderFns__$k = [];

  /* style */
  const __vue_inject_styles__$k = function (inject) {
    if (!inject) return
    inject("data-v-66e6c71e_0", { source: ".border-top[data-v-66e6c71e]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-66e6c71e]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-66e6c71e]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-66e6c71e]{border-left:1px solid rgba(0,0,0,.05)}.number-cell-text[data-v-66e6c71e]{text-align:center;opacity:.8;font-size:.9em}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$k = "data-v-66e6c71e";
  /* module identifier */
  const __vue_module_identifier__$k = undefined;
  /* functional template */
  const __vue_is_functional_template__$k = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$j = normalizeComponent(
    { render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k },
    __vue_inject_styles__$k,
    __vue_script__$k,
    __vue_scope_id__$k,
    __vue_is_functional_template__$k,
    __vue_module_identifier__$k,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$l = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    booleanTrue() {
      if (lodash.isString(this.data)) {
        switch (String(this.data).toLowerCase()) {
          case 'true':
          case 'y':
          case 'yes':
            return true;

          case 'false':
          case 'null':
          case 'undefined':
          case 'n':
          case 'no':
          case '':
            return;
        }

        return;
      }

      return this.data ? true : false;
    }

  }
};

/* script */
const __vue_script__$l = script$l;

/* template */
var __vue_render__$l = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"boolean-cell text-xs-center",class:{'true':_vm.booleanTrue, 'false':!_vm.booleanTrue}},[(_vm.booleanTrue)?_c('fluro-icon',{attrs:{"library":"fas","icon":"check-circle"}}):_c('fluro-icon',{attrs:{"library":"far","icon":"times"}})],1)};
var __vue_staticRenderFns__$l = [];

  /* style */
  const __vue_inject_styles__$l = function (inject) {
    if (!inject) return
    inject("data-v-9090baf6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.boolean-cell.true{color:#4cc650}.boolean-cell.false{opacity:.3}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$l = undefined;
  /* module identifier */
  const __vue_module_identifier__$l = undefined;
  /* functional template */
  const __vue_is_functional_template__$l = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$k = normalizeComponent(
    { render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l },
    __vue_inject_styles__$l,
    __vue_script__$l,
    __vue_scope_id__$l,
    __vue_is_functional_template__$l,
    __vue_module_identifier__$l,
    false,
    createInjector,
    undefined,
    undefined
  );

//

function mapDate(entry) {
  if (!entry) {
    return;
  }

  var date = new Date(entry);
  var isValid = date instanceof Date && !isNaN(date);

  if (isValid) {
    return date;
  } else {
    // console.log('ENTRY', entry);
    return `Invalid date ${entry}`;
  }
}

var script$m = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    isArray() {
      return lodash.isArray(this.data);
    },

    rendered() {
      var self = this;

      if (!self.data) {
        return;
      } // ////////////////////////
      // ////////////////////////


      if (lodash.isArray(self.data)) {
        var array = lodash.chain(self.data).compact().map(mapDate).value();

        if (array.length) {
          return array;
        } else {
          return;
        }
      } else {
        return self.data ? mapDate(self.data) : false;
      }
    }

  }
};

/* script */
const __vue_script__$m = script$m;

/* template */
var __vue_render__$m = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.isArray)?_vm._l((_vm.rendered),function(date){return _c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"inline-tag",attrs:{"content":_vm._f("timeago")(date)}},[_vm._v(_vm._s(_vm._f("formatDate")(date,'MMM D, YYYY')))])}):(_vm.rendered)?[(_vm.rendered)?_c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"inline-tag",attrs:{"content":_vm._f("timeago")(_vm.rendered)}},[_vm._v(_vm._s(_vm._f("formatDate")(_vm.rendered,'MMM D, YYYY')))]):_vm._e()]:_vm._e()],2)};
var __vue_staticRenderFns__$m = [];

  /* style */
  const __vue_inject_styles__$m = function (inject) {
    if (!inject) return
    inject("data-v-71e08d96_0", { source: ".border-top[data-v-71e08d96]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-71e08d96]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-71e08d96]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-71e08d96]{border-left:1px solid rgba(0,0,0,.05)}span[data-v-71e08d96]{white-space:nowrap}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$m = "data-v-71e08d96";
  /* module identifier */
  const __vue_module_identifier__$m = undefined;
  /* functional template */
  const __vue_is_functional_template__$m = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$l = normalizeComponent(
    { render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m },
    __vue_inject_styles__$m,
    __vue_script__$m,
    __vue_scope_id__$m,
    __vue_is_functional_template__$m,
    __vue_module_identifier__$m,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$n = {
  props: {
    'context': {
      type: String
    },
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$n = script$n;

/* template */
var __vue_render__$n = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.context != 'print')?_c('div',[(_vm.$vuetify.breakpoint.smAndUp)?_c('fluro-realm-dots',{attrs:{"realms":_vm.data}}):_vm._e(),(_vm.$vuetify.breakpoint.xsOnly)?_c('fluro-realm-bar',{attrs:{"realm":_vm.data}}):_vm._e()],1):_vm._e()};
var __vue_staticRenderFns__$n = [];

  /* style */
  const __vue_inject_styles__$n = undefined;
  /* scoped */
  const __vue_scope_id__$n = undefined;
  /* module identifier */
  const __vue_module_identifier__$n = undefined;
  /* functional template */
  const __vue_is_functional_template__$n = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$m = normalizeComponent(
    { render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n },
    __vue_inject_styles__$n,
    __vue_script__$n,
    __vue_scope_id__$n,
    __vue_is_functional_template__$n,
    __vue_module_identifier__$n,
    false,
    undefined,
    undefined,
    undefined
  );

//
//
//
//
//
var script$o = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$o = script$o;

/* template */
var __vue_render__$o = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"sm muted"},[_vm._v("\n    "+_vm._s(_vm._f("timeago")(_vm.data))+"\n")])};
var __vue_staticRenderFns__$o = [];

  /* style */
  const __vue_inject_styles__$o = function (inject) {
    if (!inject) return
    inject("data-v-315ad5f4_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$o = undefined;
  /* module identifier */
  const __vue_module_identifier__$o = undefined;
  /* functional template */
  const __vue_is_functional_template__$o = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$n = normalizeComponent(
    { render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o },
    __vue_inject_styles__$o,
    __vue_script__$o,
    __vue_scope_id__$o,
    __vue_is_functional_template__$o,
    __vue_module_identifier__$o,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$p = {
  props: {
    'column': {
      type: Object
    },
    'row': {
      type: Object
    }
  },
  methods: {
    clicked(item) {
      if (!item._id) {
        return;
      }

      console.log('Sub item click', item);
      this.$actions.open([item]); // this.$fluro.global.view(item);
    }

  },
  computed: {
    characterCount() {
      return String(this.rawValue).length;
    },

    shouldWrap() {
      return this.column.wrap || lodash.isString(this.rawValue) && this.characterCount > 100;
    },

    complexTitle() {
      return this.preValue.title;
    },

    complexAppendage() {
      return this.subField ? lodash.get(this.preValue, this.subField) : null;
    },

    renderer() {
      // if (this.subField) {
      //     return;
      // }
      //  && this.subFieldLength == 2 ) {
      //     // console.log('KEY RENDER', this.column.key);
      //     return;
      // }
      var renderer = this.column.renderer;

      switch (this.column.renderer) {
        case 'date':
        case 'datetime':
          this.column.type = 'date';
          return __vue_component__$l;

        case 'timeago':
          this.column.type = 'date';
          return __vue_component__$n;

        case 'capitalize':
          renderer = null;
          break;

        case 'realmDots':
          renderer = __vue_component__$m;
          break;
      }

      if (renderer) {
        return renderer;
      }

      switch (this.column.type) {
        case 'date':
          return __vue_component__$l;

        case 'number':
        case 'integer':
        case 'decimal':
        case 'float':
          if (!this.subField) {
            return __vue_component__$j;
          }

          break;

        case 'boolean':
          return __vue_component__$k;

        default:
          return;
      }
    },

    preArray() {
      return lodash.isArray(this.preValue) && this.preValue.length;
    },

    // simpleArray() {
    //     var self = this;
    //     return self.formattedArray && !_.some(self.formattedArray, function(entry) {
    //         return !_.isObject(entry);
    //     })
    // },
    formattedArray() {
      var self = this;

      if (!self.preArray) {
        return;
      }

      var subFieldPath = self.subField;

      if (subFieldPath) {
        if (subFieldPath[0] == '.') {
          subFieldPath = subFieldPath.slice(1);
        }

        return lodash.chain(self.preValue).map(function (entry) {
          if (!entry) {
            return;
          } //If it's not an object but a simple number or string


          if (!lodash.isObject(entry)) {
            return entry;
          } //Check if we have a title or name


          var title = entry.title || entry.name;
          var appendage = self.subField ? lodash.get(entry, subFieldPath) : null; //If it's a reference

          if (entry._id) {
            //Check if it's a real complicated badboy
            if (subFieldPath.indexOf('.')) {
              if (!title && !appendage) {
                return;
              } //Its a deep nested simple value


              if (!title && appendage && subFieldPath.indexOf('.')) {
                return appendage;
              }
            }

            return {
              title,
              appendage,
              _type: entry._type,
              _id: entry._id,
              color: entry.color,
              bgColor: entry.bgColor,
              startDate: entry.startDate,
              endDate: entry.endDate,
              created: entry.created
            };
          } ////////////////////////////////////////////
          ////////////////////////////////////////////


          return entry;
        }).filter(function (entry) {
          return entry == 0 || entry;
        }).value();
      }

      return self.preValue;
    },

    simpleArray() {
      return lodash.some(this.formattedArray, function (e) {
        var match = !(e._id || e.title || e.name || e.id); // if(match) {
        // 	console.log('Thing is missing', e);
        // }

        return match;
      }); //_.isArray(this.preValue) && this.preValue[0] && (!this.preValue[0].title && !this.preValue[0].name);
    },

    // complexArray() {
    //     var self = this;
    //     return _.isArray(this.preValue) && _.some(this.preValue, function(e) {
    //         return (e._id || e.title || e.name)
    //     })
    //     // return _.isArray(this.preValue) && _.chain(this.preValue)
    //     //     .map(function(e) {
    //     //         if (self.subField) {
    //     //             e.rendered = _.get(e, self.subField);
    //     //         }
    //     //         return e;
    //     //     })
    //     //     .some(function(e) {
    //     //         return (e._id || e.title || e.name)
    //     //     })
    //     //     .value();
    //     //_.isArray(this.preValue) && this.preValue[0] && (this.preValue[0].title || this.preValue[0].name);
    // },
    complexObject() {
      // return !this.complexArray && _.isObject(this.preValue);
      return lodash.isObject(this.preValue);
    },

    value() {
      var self = this;
      var val = self.preValue;

      if (!val) {
        return;
      }

      if (val.join) {
        if (self.subField) {
          return lodash.map(val, function (entry) {
            return entry[self.subField];
          }).join(', ');
        } else {
          return lodash.map(val, function (entry) {
            return entry.title || entry.name || entry;
          }).join(', ');
        }
      }

      if (self.column.sortType == 'date' || self.column.type == 'date') {
        if (self.column.format) {
          return self.$fluro.date.formatDate(val, self.column.format);
        } else {
          return self.$fluro.date.formatDate(val, 'D MMM YYYY');
        }
      } // console.log('COMPLEX', val)


      return val.title || val.name || val;
    },

    key() {
      //Get the basic key
      var mainKey = (this.column.key || '').split('|')[0]; //Split it out 

      return mainKey; //.split('[]')[0];
    },

    subField() {
      var key = this.column.key || '';
      var pieces = key.split('[]');

      if (pieces.length > 1) {
        pieces.shift();
        return pieces.join(''); //.split('|')[0];
      }
    },

    // subFieldLength() {
    //     var key = this.column.key || '';
    //     var pieces = key.split('[]');
    //     return pieces.length
    // },
    rawValue() {
      var self = this;
      var path = self.key;
      var pieces = path.split('[]');
      var steps = pieces.length; //Starter array

      if (pieces.length < 2) {
        return lodash.get(self.row, self.key);
      } else if (pieces.length == 2) {
        // var pathPiece = pieces[0];
        // if(_.startsWith(pathPiece,'.')) {
        //     pathPiece = pathPiece.slice(1);
        // }
        // var shallowArray = _.get(this.row, pieces[0]);
        var match = lodash.get(self.row, pieces[0]);

        var subFieldPath = self.subField;

        if (subFieldPath) {
          if (subFieldPath[0] == '.') {
            subFieldPath = subFieldPath.slice(1);
          }

          if (lodash.isArray(match)) {
            match = lodash.map(match, subFieldPath);
          } else {
            match = lodash.get(match, subFieldPath);
          }
        }

        return match; // if(shallowArray)
        // return shallowArray;
      } else {
        //We have multiple nested arrays in arrays
        //data.one[].two[].three
        var collated = []; //one[].two[].three

        var start = pieces.shift(); ////////////////////////////////////
        //Loop through and retrieve the values
        //pieces would be ['.two', '.three]

        getChildValue(lodash.get(this.row, start), pieces);

        function getChildValue(array, depthTrail) {
          //Loop through each item in this array
          lodash.each(array, function (entry) {
            //Take a copy of this trail
            var pieces = depthTrail.slice();
            var currentTrail = pieces.shift();

            if (currentTrail && currentTrail[0] == '.') {
              currentTrail = currentTrail.slice(1);
            }

            var childArray = lodash.get(entry, currentTrail);

            if (!childArray) {
              return;
            } // console.log('Go deeper', pieces, childArray)


            if (pieces.length) {
              getChildValue(childArray, pieces);
            } else {
              // console.log('REACHED END', path, childArray);
              collated.push(childArray);
            }
          });
        } //////////////////////////


        return lodash.chain(collated).reduce(function (set, value) {
          var val = value;

          if (value._id) {
            val = value._id;
          }

          if (value.id) {
            val = value.id;
          }

          if (value.title) {
            val = value.title;
          }

          if (value.name) {
            val = value.name;
          }

          set[val] = val;
          return set;
        }, {}).values().compact().value(); // return _.chain(collated)
        //     .compact()
        //     .uniqBy(function(value) {
        //         if (value._id) {
        //             return value._id
        //         }
        //         if (value.id) {
        //             return value.id
        //         }
        //         if (value.title) {
        //             return value.title
        //         }
        //         if (value.name) {
        //             return value.name;
        //         }
        //         return value;
        //     })
        //     .value();
      }
    },

    preValue() {
      var val = this.rawValue; // console.log('RAW VAL', val);
      ///////////////////////////////

      var definitionDiscriminator = (this.column.key || '').split('|')[1]; ///////////////////////////////
      //If there is an array

      if (lodash.isArray(val)) {
        ///////////////////////////////
        var array = lodash.chain(val) // .compact()
        .filter(function (v) {
          if (v == undefined || v == '' || v == null) {
            return;
          }

          if (definitionDiscriminator) {
            return v.definition == definitionDiscriminator || v._discriminator == definitionDiscriminator || v._discriminatorType == definitionDiscriminator;
          }

          return true;
        }).map(function (object) {
          if (object.title || object.name) {
            object.title = object.title || object.name; // if(self.subField) {
            //     object.title = `${object.title} (${_.get(object, self.subField)})`
            // }

            return object;
          }

          return object;
        }).filter(function (v) {
          return v == 0 || v;
        }).uniqBy(function (v) {
          return v._id || v.id || v;
        }).orderBy(function (entry) {
          if (entry.startDate) {
            return new Date(entry.startDate);
          }

          if (entry.created) {
            return new Date(entry.created);
          }

          return entry.title || entry.name || '';
        }).reverse().value();

        if (!array.length) {
          return;
        } //////////////////////////////


        var childLimit = Math.min(100, array.length);
        return array.slice(0, childLimit);
      } ///////////////////////////////


      return val;
    }

  },
  filters: {
    simple(input) {
      if (lodash.isArray(input)) {
        return input.join(', ');
      }

      return input;
    }

  }
};

/* script */
const __vue_script__$p = script$p;

/* template */
var __vue_render__$p = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('td',{class:{wrap:_vm.shouldWrap, 'text-xs-center':_vm.column.align == 'center', 'text-xs-right':_vm.column.align =='right'}},[_c('div',{class:{'wrap-limit':_vm.shouldWrap}},[(_vm.renderer)?_c(_vm.renderer,{tag:"component",attrs:{"data":_vm.preValue,"row":_vm.row,"column":_vm.column}}):(_vm.simpleArray)?[_vm._l((_vm.formattedArray),function(entry){return [(_vm.renderer)?_c(_vm.renderer,{tag:"component",attrs:{"data":entry,"row":_vm.row,"column":_vm.column}}):_c('div',[_c('span',{staticClass:"inline-tag"},[_vm._v("\n                        "+_vm._s(_vm._f("simple")(entry))+"\n                    ")])])]})]:(_vm.formattedArray)?_c('div',{staticStyle:{"max-width":"600px","white-space":"normal"}},[_vm._l((_vm.formattedArray),function(entry){return [(entry._id)?_c('a',{staticClass:"inline-tag",style:({color:entry.color, backgroundColor:entry.bgColor}),on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.clicked(entry)}}},[(entry._type == 'event')?[_c('fluro-icon',{attrs:{"type":"event"}}),_vm._v(" "+_vm._s(entry.title)+" "),_c('span',{staticClass:"text-muted"},[_vm._v("// "+_vm._s(_vm._f("readableEventDate")(entry)))])]:(entry._type == 'post')?[_c('fluro-icon',{attrs:{"type":"post"}}),_vm._v(" "+_vm._s(entry.title)+" "),_c('span',{staticClass:"text-muted"},[_vm._v("// "+_vm._s(entry.managedAuthor ? entry.managedAuthor.title : '')+" "+_vm._s(_vm._f("timeago")(entry.created)))])]:(entry._type == 'ticket')?[_c('fluro-icon',{attrs:{"type":"ticket"}}),_vm._v(" "+_vm._s(entry.title)+" - "+_vm._s(entry.event.title)),_c('span',{staticClass:"text-muted"},[_vm._v("// "+_vm._s(_vm._f("readableEventDate")(entry.event)))])]:(entry._type == 'team' && entry.position)?[_vm._v("\n                        "+_vm._s(entry.position)+"\n                        ")]:[(entry._type)?_c('fluro-icon',{attrs:{"type":entry._type}}):_vm._e(),_vm._v(" "+_vm._s(entry.title)+" "),(entry.appendage)?[_vm._v(" - "+_vm._s(entry.appendage))]:_vm._e()]],2):(_vm.renderer)?[_c(_vm.renderer,{tag:"component",attrs:{"data":entry,"row":_vm.row,"column":_vm.column}})]:[_vm._v(_vm._s(entry))]]})],2):(_vm.complexObject)?_c('div',[(_vm.preValue._type == 'event')?[_c('a',{staticClass:"inline-tag",on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.clicked(_vm.preValue)}}},[_c('fluro-icon',{attrs:{"type":"event"}}),_vm._v(" "+_vm._s(_vm.preValue.title)+" "),_c('span',{staticClass:"text-muted"},[_vm._v("// "+_vm._s(_vm._f("readableEventDate")(_vm.preValue)))])],1)]:(_vm.preValue._type == 'team' && _vm.preValue.position)?[_vm._v("\n                "+_vm._s(_vm.preValue.position)+"\n            ")]:[_c('a',{staticClass:"inline-tag",style:({color:_vm.preValue.color, backgroundColor:_vm.preValue.bgColor}),on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.clicked(_vm.preValue)}}},[(_vm.preValue._type)?_c('fluro-icon',{attrs:{"type":_vm.preValue._type}}):_vm._e(),_vm._v(" "+_vm._s(_vm.complexTitle)+" "),(_vm.complexAppendage)?[_vm._v(" - "+_vm._s(_vm.complexAppendage))]:_vm._e()],2)]],2):(_vm.renderer)?_c(_vm.renderer,{tag:"component",attrs:{"data":_vm.rawValue,"row":_vm.row,"column":_vm.column}}):_vm._t("default",[_vm._v("\n            "+_vm._s(_vm.value)+"\n        ")],{"value":_vm.value,"row":_vm.row,"column":_vm.column})],2)])};
var __vue_staticRenderFns__$p = [];

  /* style */
  const __vue_inject_styles__$p = function (inject) {
    if (!inject) return
    inject("data-v-0a453029_0", { source: ".border-top[data-v-0a453029]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-0a453029]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-0a453029]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-0a453029]{border-left:1px solid rgba(0,0,0,.05)}.wrap-limit[data-v-0a453029]{max-width:500px;overflow:hidden;white-space:pre-line;text-overflow:ellipsis}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$p = "data-v-0a453029";
  /* module identifier */
  const __vue_module_identifier__$p = undefined;
  /* functional template */
  const __vue_is_functional_template__$p = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$o = normalizeComponent(
    { render: __vue_render__$p, staticRenderFns: __vue_staticRenderFns__$p },
    __vue_inject_styles__$p,
    __vue_script__$p,
    __vue_scope_id__$p,
    __vue_is_functional_template__$p,
    __vue_module_identifier__$p,
    false,
    createInjector,
    undefined,
    undefined
  );

var DynamicListMixin = {
  props: {
    changeKey: {
      type: [String, Number]
    },
    filterConfig: {
      type: Object,

      default() {
        return {
          operator: 'and',
          filters: []
        };
      }

    },
    lockFilter: {
      type: Object
    },
    allDefinitions: {
      type: Boolean,
      default: false
    },
    searchInheritable: {
      type: Boolean,
      default: false
    },
    includeArchivedByDefault: {
      type: Boolean
    },
    search: {
      type: String
    },
    startDate: {
      type: Date
    },
    endDate: {
      type: Date
    },
    dataType: {
      type: String
    },
    defaultSort: {
      type: String
    },
    defaultSortType: {
      type: String
    },
    defaultSortDirection: {
      type: String
    },
    initSort: {
      type: Object,

      default() {
        var defaultSort = {
          key: this.defaultSort,
          direction: this.defaultSortDirection,
          type: this.defaultSortType
        };
        return defaultSort;
      }

    }
  },

  data() {
    return {
      cacheKey: null,
      all: [],
      //Including unmatched
      rows: [],
      //Only the rows that match
      groupingColumn: null,
      debouncedSearch: this.search,
      loadingItems: true,
      sort: JSON.parse(JSON.stringify(this.initSort))
    };
  },

  watch: {
    changeKey() {
      this.reload();
    },

    search: lodash.debounce(function (newValue) {
      // console.log('Search changed!')
      this.debouncedSearch = newValue; // this.refine();
    }, 500),
    reloadRequired: {
      immediate: true,
      handler: lodash.debounce(function (string) {
        // console.log('RELOAD NOW')
        this.reload();
      }, 500)
    }
  },
  methods: {
    updateCacheKey() {
      this.cacheKey = this.$fluro.global.CACHE_KEY;
    },

    reload() {
      var self = this; //////////////////////////////////////////

      self.loadingItems = true; ///////////////////////////////////////

      var sort = self.sort;
      var filter = JSON.parse(JSON.stringify(self.filterConfig));

      if (this.lockFilter) {
        if (filter.operator == 'and') {
          filter.filters.push(this.lockFilter);
        } else {
          filter = this.lockFilter.filters.push(filter);
        }

        console.log('LOCK FILTER CHECK', filter);
      } ///////////////////////////////////////


      var filterCriteria = {
        // return self.$fluro.api.get(`/system/test`, {
        sort,
        filter,
        //: self.filterConfig,
        search: self.debouncedSearch,
        includeArchived: self.includeArchived,
        allDefinitions: self.allDefinitions,
        searchInheritable: self.searchInheritable,
        includeUnmatched: true,
        groupingColumn: self.groupingColumn ? self.groupingColumn.key : undefined
      }; /////////////////////////////////////////////////////////////

      if (this.select) {
        filterCriteria.select = this.select;
      }

      if (this.populateAll) {
        filterCriteria.populateAll = this.populateAll;
      } /////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////


      if (self.startDate) {
        filterCriteria.startDate = new Date(self.startDate);
      }

      if (self.endDate) {
        filterCriteria.endDate = new Date(self.endDate);
      } //Include the timezone of the current requesting user


      filterCriteria.timezone = self.$fluro.date.defaultTimezone; /////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////
      //Load just the IDS from the server and required fields

      return self.$fluro.api.post(`/content/${self.dataType}/filter`, filterCriteria).then(function (res) {
        self.all = res.data;
        self.$emit('raw', self.all);
        self.rows = lodash.filter(res.data, {
          _matched: true
        });
        self.$emit('filtered', self.rows);

        if (self.setPage) {
          self.setPage(1);
        }

        self.loadingItems = false;
      }).catch(function (err) {
        self.loadingItems = false;
        self.rows = [];
        self.$emit('filtered', self.rows);
        self.all = [];
        self.$emit('raw', self.all);

        if (self.setPage) {
          self.setPage(1);
        }

        if (self.$fluro.api.axios.isCancel(err)) ;
      });
    }

  },
  computed: {
    includeArchived() {
      return this.includeArchivedByDefault;
    },

    reloadRequired() {
      return `${this.cacheKey}-${this.dataType}-${this.filterCheckString} ${this.dateWatchString} ${this.sort.sortKey} ${this.sort.sortDirection} ${this.sort.sortType} ${this.groupingColumn ? this.groupingColumn.key : ''}  ${this.debouncedSearch}`;
    },

    activeFilters() {
      return FilterService.activeFilters(this.filterConfig);
    },

    activeFilterRows() {
      var self = this;
      return lodash.filter(self.activeFilters, function (row) {
        return row.comparator && row.comparator.length;
      });
    },

    activeFilterKeys() {
      return FilterService.activeFilterKeys(this.filterConfig);
    },

    activeFilterValues() {
      return FilterService.activeFilterValues(this.filterConfig);
    },

    activeFilterComparators() {
      return FilterService.activeFilterComparators(this.filterConfig);
    },

    activeFilterOperators() {
      return FilterService.activeFilterComparators(this.filterConfig);
    },

    filterCheckString() {
      var filterString = FilterService.getFilterChangeString(this.filterConfig); // console.log('Filters changed', filterString)

      return filterString;
    },

    dateWatchString() {
      if (!this.startDate) {
        return;
      }

      if (!this.endDate) {
        return;
      }

      var startDate = new Date(this.startDate);
      startDate.setHours(0, 0, 0, 0);
      var endDate = new Date(this.endDate);
      endDate.setHours(0, 0, 0, 0);
      return `${startDate.getTime()} ${endDate.getTime()}`;
    }

  },

  created() {
    this.$fluro.addEventListener('cache.reset', this.updateCacheKey);
  },

  beforeDestroy() {
    this.$fluro.removeEventListener('cache.reset', this.updateCacheKey);
  }

};

//

var script$q = {
  props: {
    // queryString:{
    //     type:Boolean,
    //     default:true,
    // },
    // changeKey: {
    //     type: [String, Number],
    // },
    fixedColumns: {
      type: Boolean,
      default: false
    },
    // allDefinitions: {
    //     type: Boolean,
    //     default: false,
    // },
    // searchInheritable: {
    //     type: Boolean,
    //     default: false,
    // },
    grouping: {
      type: Function
    },
    // includeArchivedByDefault: {
    //     type: Boolean,
    // },
    enableSelection: {
      type: Boolean,
      default: true
    },
    enableActions: {
      type: Boolean,
      default: true
    },
    defaultSort: {
      type: String,

      default() {
        return 'updated';
      }

    },
    defaultSortType: {
      type: String,

      default() {
        return 'date';
      }

    },
    defaultSortDirection: {
      type: String,

      default() {
        return 'desc';
      }

    },
    selectionController: {
      type: Object,

      default() {
        return this.$selection;
      }

    },
    clickable: {
      type: Boolean,

      default() {
        return true;
      }

    },
    clicked: {
      type: Function,

      default() {
        // console.log('default')
        return function (item, column) {// console.log('clicked', item, column);
        };
      }

    },
    columns: {
      type: Array,

      default() {
        return [];
      }

    },
    availableKeys: {
      type: Array,

      default() {
        return [];
      }

    },
    additionalColumns: {
      type: Array,

      default() {
        return [];
      }

    },
    // filterConfig: {
    //     type: Object,
    //     default () {
    //         return {
    //             operator: 'and',
    //             filters: [],
    //         }
    //     }
    // },
    initPage: {
      type: [Number, String],
      default: 1
    },
    // initSort: {
    //     type: Object,
    //     default () {
    //         var defaultSort = {
    //             key: this.defaultSort,
    //             direction: this.defaultSortDirection,
    //             type: this.defaultSortType,
    //         }
    //         return defaultSort;
    //     },
    // },
    pageSize: {
      type: Number,
      default: 50
    } // dataType: {
    //     type: String,
    // },
    // search: {
    //     type: String,
    // },
    // startDate: {
    //     type: Date,
    // },
    // endDate: {
    //     type: Date,
    // }

  },

  data() {
    return {
      // groupingColumn: null,
      cacheKey: null,
      columnState: {},
      structureColumns: lodash.compact(this.columns),
      extraColumns: [],
      // all: [],
      // rows: [],
      page: [],
      // debouncedSearch: this.search,
      perPage: this.pageSize,
      loading: false,
      // loadingItems: true,
      currentPage: parseInt(this.initPage),
      previousSelectionIndex: -1 // sort: JSON.parse(JSON.stringify(this.initSort)),

    };
  },

  computed: {
    availableGroupingKeys() {
      var currentFilterColumns = lodash.chain(this.activeFilterRows).map(function (row) {
        if (!row) {
          return;
        }

        return {
          title: `Current Filter > ${row.title || row.key}`,
          key: row.key
        };
      }).compact().value();

      var array = currentFilterColumns.concat(this.availableKeys.slice());
      array.unshift({
        title: 'None',
        key: null
      });
      return array;
    },

    totalGroups() {
      var self = this;

      if (!self.groupingColumn) {
        return;
      }

      var num = lodash.chain(self.rows).groupBy(function (row) {
        return row._groupingKey;
      }).values().value().length;

      return num;
    },

    plural() {
      return this.$fluro.types.readable(this.dataType, true);
    },

    pagePopulationString() {
      return [this.currentPage, lodash.map(this.rawPage, '_id'), lodash.map(this.renderColumns, 'key')].join('-'); //this.structureColumns, this.groupingColumn ? this.groupingColumn.key : '', this.extraColumns];
    },

    renderColumns() {
      var self = this;
      var array = self.structureColumns ? self.structureColumns.slice() : [];
      var iteratorCounts = {}; //Columns selected by the user

      if (self.extraColumns) {
        array = array.concat(self.extraColumns);
      } // array = _.filter(array, function(column) {
      //     return !self.columnState[column.key];
      // })
      /////////////////////////////////////
      //Columns to show because we are filtering on them


      if (!self.fixedColumns) {
        ///////////////////////////////////////////////
        var filterFields = lodash.chain(self.activeFilters || []).map(function (filter) {
          var filterKey = filter.key;
          var columnDataType = filter.dataType;
          var allowDuplicates;

          if (filter.criteria && filter.criteria.length) {
            if (!iteratorCounts[filter.key]) {
              iteratorCounts[filter.key] = 0;
            }

            filterKey = `_matchedFilters['${filterKey}'][${iteratorCounts[filterKey]}]`;
            columnDataType = 'reference';
            allowDuplicates = true;
            iteratorCounts[filter.key]++;
          } // console.log('FILTER', filter);


          if (filter.comparator) {
            var column = {
              title: filter.title || lodash.startCase(filter.key),
              key: filterKey,
              allowDuplicates
            }; //Treat as a date value

            if (lodash.startsWith(filter.comparator, 'date') || filter.dataType == 'date') {
              column.sortType = column.type = 'date';
            }

            switch (filter.dataType) {
              case 'number':
              case 'integer':
              case 'decimal':
              case 'float':
                column.sortType = column.type = columnDataType;
                break;
            } // console.log('FILTER COMPARATOR', filter);
            // switch(filter.comparator) {
            //     case 'datesameday':
            //     case 'datenotyear':
            //     case 'datemonthnotyear':
            //     case 'datesameweek':
            //     case 'datesamemonth':
            //     case 'datesameyear':
            //     case 'datesameweekday':
            //     case 'datebefore':
            //     case 'dateafter':
            //     case 'datebetween':
            //     case 'datenotbetween':
            //         column.sortType = 
            //         column.type = 'date';
            //     break;
            // }


            return column;
          }
        }).compact().value(); /////////////////////////////////////


        lodash.each(filterFields, function (column) {
          if (column.allowDuplicates) {
            array.push(column);
          } else {
            // console.log('COLUMN', column)
            if (!lodash.some(array, {
              key: column.key
            })) {
              // console.log('COLUMNS', column);
              array.push(column);
            }
          }
        });
      } /////////////////////////////////////


      return array;
    },

    // dateWatchString() {
    //     if (!this.startDate) {
    //         return
    //     }
    //     if (!this.endDate) {
    //         return
    //     }
    //     return String(Date(this.startDate).setHours(0, 0, 0, 0).getTime()) + String(Date(this.endDate).setHours(0, 0, 0, 0).getTime());
    // },
    grouped() {
      var self = this;
      var results;

      if (self.grouping) {
        results = self.grouping(self.page);
      } else if (self.groupingColumn && self.groupingColumn.key) {
        results = self.groupByColumn(self.page.slice(), self.groupingColumn);
      } // console.log('RESULTS', results);


      return results;
    },

    reloadRequired() {
      return `${this.cacheKey}-${this.dataType}-${this.filterCheckString} ${this.dateWatchString} ${this.sort.sortKey} ${this.sort.sortDirection} ${this.sort.sortType} ${this.groupingColumn ? this.groupingColumn.key : ''}  ${this.debouncedSearch}`;
    },

    selectionEnabled() {
      return !(this.enableSelection === false) && this.selectionController ? true : false;
    },

    actionsEnabled() {
      return !(this.enableActions === false);
    },

    rowsTotal() {
      return this.rowsLoaded || this.rows.length || MAX_CHUNK_SIZE || MAX_ROWS;
    },

    showLoading() {
      return this.loading || this.loadingItems;
    },

    // activeFilters() {
    //     return FilterService.activeFilters(this.filterConfig);
    // },
    // activeFilterRows() {
    //     return _.filter(this.activeFilters, function(row) {
    //         return row.comparator && row.comparator.length;
    //     })
    // },
    // activeFilterKeys() {
    //     return FilterService.activeFilterKeys(this.filterConfig);
    // },
    // activeFilterValues() {
    //     return FilterService.activeFilterValues(this.filterConfig);
    // },
    // activeFilterComparators() {
    //     return FilterService.activeFilterComparators(this.filterConfig);
    // },
    // activeFilterOperators() {
    //     return FilterService.activeFilterComparators(this.filterConfig);
    // },
    rowCheckString() {
      // console.log('RECOMPUTE ROWS')
      var rows = this.rows || [];

      var ids = lodash.map(rows, '_id').join('');

      var keys = lodash.keys(rows[0]);

      return `${ids}${keys}`; // return _.chain(this.rows).map('_id').orderBy(function(id) {
      //     return id;
      // }).join('');
    },

    // dateWatchString() {
    //     if (!this.startDate) {
    //         return
    //     }
    //     if (!this.endDate) {
    //         return
    //     }
    //     return String(this.startDate) + String(this.endDate);
    // },
    // filterCheckString() {
    //     var filterString = FilterService.getFilterChangeString(this.filterConfig);
    //     return filterString;
    // },
    isAsync() {
      return this.dataType && this.dataType.length;
    },

    previousPageDisabled() {
      return this.currentPage <= 1;
    },

    nextPageDisabled() {
      return this.currentPage == this.totalPages;
    },

    filteredTotal() {
      return this.rows.length;
    },

    availablePages() {
      var chunk = lodash.chunk(this.rows, this.perPage);

      return chunk;
    },

    startOffset() {
      return Math.floor((this.currentPage - 1) * this.perPage);
    },

    endOffset() {
      return Math.min(this.startOffset + this.perPage, this.filteredTotal);
    },

    rawPage() {
      if (this.currentPage > this.totalPages) {
        var set = lodash.first(this.availablePages);
      } else {
        var set = this.availablePages[this.currentPage - 1];
      } // console.log('RAW', set)


      return set || [];
    },

    totalPages() {
      return this.availablePages ? this.availablePages.length : 0;
    },

    allSelected() {
      var self = this;

      if (!self.page || !self.page.length) {
        return;
      } //Check if any of the rows are not selected


      var anyNotSelected = lodash.some(self.page, function (item) {
        var notSelected = !self.selectionController.isSelected(item);
        return notSelected;
      });

      return !anyNotSelected;
    },

    someSelected() {
      var self = this;

      if (self.allSelected) {
        return true;
      }

      return lodash.some(self.page, function (item) {
        return self.selectionController.isSelected(item);
      });
    },

    selectAllIcon() {
      if (this.allSelected) {
        return 'check-square';
      }

      if (this.someSelected) {
        return 'minus-square';
      }

      return 'square';
    }

  },
  asyncComputed: {
    availableColumns: {
      default: [],

      get() {
        var self = this; ////////////////////////////////////
        //There are no rows

        if (!self.rows || !self.rows.length) {
          self.loadingKeys = false;
          return Promise.resolve([]);
        } ////////////////////////////////////
        //Show feedback to the user that we are loading
        //the values for them


        self.loadingKeys = true;
        return new Promise(function (resolve, reject) {
          //This is the key for our cached request
          var cacheKey = `${self.dataType}-columns`; ////////////////////////////////////
          //Get the storage cache

          var valueStorageCache = self.$fluro.cache.get('filter-distinct-keys'); ////////////////////////////////////
          //Check to see if there is already a cached set of values
          //for this query

          var valueCache = valueStorageCache[cacheKey]; ////////////////////////////////////
          //If we haven't already got the values for this request

          if (!valueCache) {
            //Get all the ids
            var subSetIDs = self.$fluro.utils.arrayIDs(self.rows); //We need to make an asynchronous request to the server
            //to find out what values we can filter by

            var options = {
              type: self.dataType
            }; ///////////////////////////////////////////////////////
            //Make the request and cache it

            valueCache = valueStorageCache[cacheKey] = self.$fluro.content.keys(subSetIDs, options);
          } /////////////////////////////////////////////////////////////////
          //When the request is complete


          valueCache.then(function (res) {
            resolve(res);
            self.loadingKeys = false;
          }, function (err) {
            console.log('Error', err);
            resolve([]);
            self.loadingKeys = false; //Clear the cache request for next time

            valueStorageCache[cacheKey] = null;
          });
        });
      }

    }
  },
  // created() {
  // 	console.log('DynamicTable - Created', this.$fluro)
  // //     this.$fluro.addEventListener('cache.reset', this.updateCacheKey);
  // },
  // mounted() {
  // 	console.log('DynamicTable - Mounted', this.$fluro)
  // },
  // beforeDestroy() {
  //     this.$fluro.removeEventListener('cache.reset', this.updateCacheKey);
  // },
  filters: {
    numberWithCommas(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

  },
  watch: {
    extraColumns() {
      this.$emit('additionalColumns', this.extraColumns);
    },

    'pagePopulationString': function (str) {
      // console.log('POPULATION STRING CHANGED')
      this.loading = true;
      this.populatePage();
    } // changeKey() {
    //     this.reload();
    // },
    // reloadRequired: {
    //     immediate: true,
    //     handler: _.debounce(function(string) {
    //         this.reload();
    //     }, 500)
    // },
    //COMMENTED DUE TO MOVE TO MIXIN
    // search: _.debounce(function(newValue) {
    //     // console.log('Search changed!')
    //     this.debouncedSearch = newValue;
    //     // this.refine();
    // }, 500),

  },
  methods: {
    allInGroupSelected(items) {
      var self = this;

      if (!items || !items.length) {
        return;
      } //Check if any of the rows are not selected


      var anyNotSelected = lodash.some(items, function (item) {
        var notSelected = !self.selectionController.isSelected(item);
        return notSelected;
      });

      return !anyNotSelected;
    },

    someInGroupSelected(items) {
      var self = this;

      if (self.allInGroupSelected(items)) {
        return true;
      }

      return lodash.some(items, function (item) {
        return self.selectionController.isSelected(item);
      });
    },

    groupByColumn(rows, column, local) {

      if (!column || !column.key) {
        return rows;
      } ////////////////////////////////////////////////////


      var grouped;

      if (!local) {
        //We need to contact the server get the rows and then 
        grouped = lodash.chain(rows).reduce(function (set, row) {
          // addGroupingEntry(rawValue)
          var groupingTitle = row._groupingTitle || row._groupingKey;
          var existing = set[row._groupingKey];

          if (!existing) {
            existing = set[row._groupingKey] = {
              title: groupingTitle,
              items: [],
              sortKey: groupingTitle
            };
          } //////////////////


          existing.items.push(row); //////////////////

          return set;
        }, {}).values().orderBy('sortKey').value();
      } else {
        ////////////////////////////////////////////////////
        var key = column.key;
        var split = key.split('|');
        var dataPath = split[0];
        var discriminator = split[1]; //////////////////////////////////////////////

        grouped = lodash.chain(rows).reduce(function (set, row) {
          var rawValue = lodash.get(row, dataPath);

          if (!rawValue) {
            // rawValue = '';
            //don't include the row if it can't be grouped
            return set;
          } ///////////////////////////////////////


          if (lodash.isArray(rawValue)) {
            lodash.chain(rawValue).filter(function (rawEntry) {
              if (!discriminator) {
                return true;
              }

              var match = rawEntry._discriminator == discriminator;
              return match;
            }).each(addGroupingEntry).value();
          } else {
            addGroupingEntry(rawValue);
          } ////////////////////////////////////////////////////


          function addGroupingEntry(groupingObjectValue) {
            var groupingKey = lodash.get(groupingObjectValue, '_id') || lodash.get(groupingObjectValue, 'title') || lodash.get(groupingObjectValue, 'name') || lodash.get(groupingObjectValue, 'value') || groupingObjectValue;
            var groupingTitle = lodash.get(groupingObjectValue, 'title') || lodash.get(groupingObjectValue, 'name') || groupingKey || '';
            var sortKey = String(groupingTitle || '').toLowerCase(); // console.log('Group by column', column.key, row, groupingObjectValue, groupingTitle, groupingKey)

            var existing = set[groupingKey];

            if (!existing) {
              existing = set[groupingKey] = {
                title: groupingTitle,
                items: [],
                sortKey
              };
            }

            existing.items.push(row);
          }

          return set;
        }, {}).values().orderBy('sortKey').value();
      }

      return grouped;
    },

    toggleColumnGrouping(column) {
      var self = this;
      self.groupingColumn = column;
    },

    columnIsGrouping(column) {
      var self = this;
      return self.groupingColumn && self.groupingColumn.key == column.key;
    },

    // updateCacheKey() {
    //     this.cacheKey = this.$fluro.global.CACHE_KEY;
    // },
    showOptionsForColumn(column) {},

    columnIsSelected(column) {
      var self = this;
      return lodash.some(self.extraColumns, {
        key: column.key
      });
    },

    toggleColumn(column) {
      var self = this;

      var index = lodash.findIndex(self.extraColumns, {
        key: column.key
      });

      if (index == -1) {
        self.$set(self.extraColumns, self.extraColumns.length, column);
      } else {
        self.extraColumns.splice(index, 1);
      }
    },

    // toggleColumn(column) {
    //     var self = this;
    //     var currentValue = self.columnState[column.key];
    //     self.$set(self.columnState, column.key, !currentValue)
    //     // var isDisabled = column.disabled;
    //     // if (isDisabled) {
    //     //     this.$set(column, 'disabled', true);
    //     // } else {
    //     //     this.$set(column, 'disabled', false);
    //     // }
    // },
    populatePage() {
      var self = this; //////////////////////////////////////

      if (self.dataType == 'node') {
        console.log('Node > Show raw page');
        self.page = self.rawPage.slice();
        self.loading = false;
        return;
      } //Add a bit of a delay so they can't spam the server
      //by clicking 'nextPage()' over and over


      self.populatePageDebounced();
    },

    populatePageItems(rawPage, dataType, renderColumns) {
      var self = this; // var rawPageLookup = _.reduce(rawPage, function(set, item) {
      //     set[item._id] = JSON.parse(JSON.stringify(item));
      //     return set;
      // }, {});

      renderColumns = renderColumns.slice();

      if (self.groupingColumn) {
        renderColumns.push(self.groupingColumn);
      } //////////////////////////////////////


      return new Promise(function (resolve, reject) {
        // var ids = _.map(rawPage, '_id');//_.keys(rawPageLookup);
        if (!rawPage || !rawPage.length) {
          self.loading = false;
          return resolve([]);
        }

        var fields = ['title', '_type', 'definition']; //////////////////////////////////////

        var appendContactDetails = [];
        var appendFullFamily;
        var appendAssignments = true; //////////////////////////////////////
        //Include the extra fields that make sense

        fields = fields.concat(lodash.chain(renderColumns).compact().map(function (column) {
          if (column.actualField) {
            return column.actualField;
          }

          switch (column.key) {
            case 'width':
            case 'height':
              return ['width', 'height'];

            case 'firstName':
              return ['firstName', 'preferredName', 'ethnicName'];

            case 'lastName':
              return ['lastName', 'maidenName'];
          } //////////////////////////////////////


          if (column.additionalFields && column.additionalFields.length) {
            return [column.additionalFields, column.key];
          } //////////////////////////////////////


          return column.key;
        }).flattenDeep().compact().map(function (key) {
          // console.log('KEY SPLIT', key);
          return key.split('|')[0];
        }).map(function (key) {
          if (lodash.startsWith(key, 'details.')) {
            var definitionName = key.split('.')[1];
            appendContactDetails.push(definitionName);
          }

          if (lodash.startsWith(key, 'family.')) {
            appendFullFamily = true;
            return 'family'; // appendContactDetails.push(definitionName);
          }

          return key.split('[')[0]; // return key;
        }).value()); /////////////////////////////////////////////////

        var ids = self.$fluro.utils.arrayIDs(rawPage); /////////////////////////////////////////////////

        self.$fluro.api.post(`/content/${dataType}/multiple`, {
          ids,
          select: lodash.uniq(fields),
          populateAll: true,
          limit: ids.length,
          appendContactDetails,
          appendAssignments,
          appendFullFamily // cancelToken: currentPageItemsRequest.token,

        }).then(function (res) {
          var lookup = lodash.reduce(res.data, function (set, entry, i) {
            set[entry._id] = entry;
            return set;
          }, {}); /////////////////////////////////////////
          // console.log('Look for ids', ids);


          var pageItems = lodash.chain(rawPage).map(function (rawRow, i) {
            var entry = lookup[rawRow._id];

            if (!entry) {
              return;
            }

            entry._pageIndex = i; //Add all the keys of the original object
            //Merge the information we already know about the family

            if (rawRow.family && entry.family) {
              if (rawRow.family.items) {
                delete entry.family.items;
              }

              entry.family = Object.assign({}, rawRow.family, entry.family);
            }

            entry = Object.assign({}, rawRow, entry); // _.merge(rawRow, entry);
            // console.log('MERGED',  entry);

            return entry;
          }).compact().value(); /////////////////////////////////////


          resolve(pageItems.slice());
        }).catch(function (err) {
          if (self.$fluro.api.axios.isCancel(err)) {
            // return reject(err)
            // //Not sure if this is correct
            resolve([]);
          } else {
            return reject(err);
          }
        });
      });
    },

    populatePageDebounced: lodash.debounce(function () {
      var self = this;
      self.loading = true;
      self.populatePageItems(self.rawPage, self.dataType, self.renderColumns).then(function (res) {
        self.page = res; // console.log('>> Page is populated', res)

        self.loading = false;
      }).catch(function (err) {
        console.log('Error', err);
        self.page = [];
        self.loading = false;
      });
    }, 500),

    checkboxClick(item, $event, itemIndex) {
      // console.log('ITEM INDEX', itemIndex, item, $event);
      return this.toggleSelection(item, $event, itemIndex); // //console.log('Checkbox click!');
    },

    toggleSelection(item, $event, itemIndex, isolateOnClick) {
      ////////////////////
      //No event data
      if (!$event) {
        if (isolateOnClick) {
          //Set the selection to just this item
          this.selectionController.setSelection([item]); //console.log('SET SELECTION', item)

          return;
        } else {
          //Select/Deselect this item
          this.selectionController.toggle(item);
          return;
        }
      } ////////////////////
      //They held CTRL/CMD down when they clicked


      if ($event.metaKey) {
        this.previousSelectionIndex = -1;
        return this.selectionController.toggle(item);
      } ////////////////////
      //No button was pressed


      if (!$event.shiftKey) {
        //Remember this thing as what we selected
        this.previousSelectionIndex = itemIndex;

        if (isolateOnClick) {
          this.selectionController.previousIntent = 'select';
          return this.selectionController.setSelection([item]);
        } else {
          return this.selectionController.toggle(item);
        }
      } ////////////////////////////////////////////


      if (!itemIndex) {
        //Forget about it
        this.previousSelectionIndex = -1;
      } ////////////////////////////////////////////
      //If there is a previous index


      if (this.previousSelectionIndex != -1) {
        //Find our range
        var start = Math.min(this.previousSelectionIndex, itemIndex);
        var end = Math.max(this.previousSelectionIndex, itemIndex);

        if (itemIndex > this.previousSelectionIndex) {
          end += 1;
        }

        this.previousSelectionIndex = itemIndex;
        var getRange = this.page.slice(start, end);

        switch (this.selectionController.previousIntent) {
          case 'deselect':
            return this.selectionController.deselectMultiple(getRange);

          default:
            return this.selectionController.selectMultiple(getRange);
        }
      }

      this.previousSelectionIndex = itemIndex;
      return this.selectionController.toggle(item);
    },

    isActiveSort(key) {
      return this.sort.sortKey == key;
    },

    isSortable(column) {
      if (!column) {
        return;
      }

      var v = !(column.sortable === false);
      return v;
    },

    setSort(sortObject) {
      this.sort = sortObject;
      this.$emit('sort', sortObject);
    },

    toggleSort(column) {
      var self = this;

      if (!self.isSortable(column)) {
        return;
      } // console.log('COLUMN', column);


      if (!column.key || !column.key.length) {
        return;
      } /////////////////////////


      var sortKey = column.key;
      var sortType = column.sortType || 'string';
      var alreadyActive = self.sort && self.sort.sortKey == sortKey;
      var currentDirection = self.sort.sortDirection;
      var sortDirection = alreadyActive ? currentDirection == 'asc' ? 'desc' : 'asc' : 'asc'; // console.log('SORT SET', self.sort)

      self.setSort({
        sortKey,
        sortType,
        sortDirection
      }); //Change to first page

      self.setPage(1);
    },

    classes(item) {
      var classes = [];

      if (!item) {
        return classes;
      }

      if (this.selectionController.isSelected(item)) {
        classes.push('selected');
      } //// console.log('iTEM ISSUE', item)


      classes.push('status-' + item.status);

      if (item.paymentStatus) {
        classes.push('payment-status-' + item.paymentStatus);
      }

      if (item.processStatus) {
        classes.push('process-status-' + item.processStatus);
      } //////////////////////////////////
      //If it's a mailout


      switch (item.state) {
        case 'sent':
          classes.push('state-sent');
          break;

        case 'scheduled':
          classes.push('state-scheduled');
          break;

        case 'ready':
          classes.push('state-ready');
          break;
      } //////////////////////////////////


      return classes;
    },

    setPage(pageNumber) {
      if (this.currentPage == pageNumber) {
        //console.log('Already at page', pageNumber)
        return;
      }

      this.currentPage = pageNumber; // this.pageChange();

      var topElement = this.$refs.top;

      if (topElement) {
        // console.log('SCROLL INTO VIEW')
        topElement.scrollIntoView({// block:'center',
          // behavior:'smooth',
        });
      } // console.log('Recreate page!')


      this.$emit('page', pageNumber);
    },

    firstPage() {
      this.currentPage = 1;
    },

    lastPage() {
      this.currentPage = this.totalPages;
    },

    nextPage() {
      //console.log(this.currentPage, this.totalPages);
      this.currentPage < this.totalPages ? this.setPage(this.currentPage + 1) : this.setPage(this.totalPages);
    },

    previousPage() {
      this.currentPage > 1 ? this.setPage(this.currentPage - 1) : this.setPage(1);
    },

    selectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      this.selectionController.selectMultiple(this.page);
    },

    deselectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      this.selectionController.deselectMultiple(this.page);
    },

    selectAll() {
      this.selectionController.selectMultiple(this.rows);
    },

    deselectAll() {
      this.selectionController.deselectAll();
    },

    toggleSet(items) {
      var self = this;

      if (self.allInGroupSelected(items)) {
        // console.log('Toggle set select', items.length)
        self.selectionController.deselectMultiple(items);
      } else {
        // console.log('Toggle set deselect', items.length)
        self.selectionController.selectMultiple(items);
      }
    },

    toggleSelectAll() {
      if (!this.page || !this.page.length) {
        return;
      } // //console.log('Toggle All', this.page);


      if (this.allSelected) {
        this.selectionController.deselectMultiple(this.page);
      } else {
        this.selectionController.selectMultiple(this.page);
      }
    }

  },
  mixins: [DynamicListMixin],
  components: {
    TableHeaderCheckbox: __vue_component__$h,
    TableRowCheckbox: __vue_component__$i,
    TableCell: __vue_component__$o
  }
};

/* script */
const __vue_script__$q = script$q;

/* template */
var __vue_render__$q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-table-wrapper"},[(_vm.showLoading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_vm._e(),_vm._v(" "),(!_vm.showLoading && !_vm.page.length)?_c('v-container',{staticClass:"flex-center"},[_vm._t("emptytext",[_vm._v("\n               No "+_vm._s(_vm._f("definitionTitle")(_vm.dataType,true))+" were found matching your criteria\n           ")])],2):[_c('div',{ref:"scrollableArea",staticClass:"fluro-table-scroll",class:{clickable:_vm.clickable, loading:_vm.showLoading}},[_c('span',{ref:"top"}),_vm._v(" "),_c('table',{staticClass:"fluro-table-main no-select"},[_c('thead',[_c('tr',[(_vm.selectionEnabled)?_c('th',{staticClass:"first shrink checkbox-cell"},[_c('v-menu',{attrs:{"attach":"","offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('div',_vm._g({},on),[_c("table-header-checkbox",{tag:"div",attrs:{"all":_vm.allSelected,"some":_vm.someSelected}})],1)]}}],null,false,3536504858)},[_vm._v(" "),_c('v-card',{staticClass:"select-options",attrs:{"tile":""}},[_c('v-list',{attrs:{"dense":""}},[(!_vm.allSelected)?_c('v-list-tile',{on:{"click":function($event){return _vm.selectPage()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                       Select this page\n                                                   ")])],1)],1):_vm._e(),_vm._v(" "),(_vm.someSelected)?_c('v-list-tile',{on:{"click":function($event){return _vm.deselectPage()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                       Deselect this page\n                                                   ")])],1)],1):_vm._e(),_vm._v(" "),(_vm.filteredTotal)?_c('v-list-tile',{on:{"click":function($event){return _vm.selectAll()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                       Select all "+_vm._s(_vm.filteredTotal)+" items\n                                                   ")])],1)],1):_vm._e(),_vm._v(" "),(_vm.selectionController.selection.length)?_c('v-list-tile',{on:{"click":function($event){return _vm.deselectAll()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                       Deselect all "+_vm._s(_vm.filteredTotal)+" items\n                                                   ")])],1)],1):_vm._e()],1)],1)],1)],1):_vm._e(),_vm._v(" "),_vm._l((_vm.renderColumns),function(column){return _c('th',{class:{'shrink':column.shrink, sortable:_vm.isSortable(column), 'sorting':_vm.sort.sortKey == column.key, 'text-xs-center':column.align == 'center', 'text-xs-right':column.align =='right'},on:{"contextmenu":function($event){$event.preventDefault();return _vm.showOptionsForColumn(column)},"click":function($event){return _vm.toggleSort(column)}}},[(column.icon)?[_c('fluro-icon',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":column.title,"library":"fas","icon":column.icon}})]:[(_vm.isActiveSort(column.key))?_c('div',{staticClass:"sort-icon"},[(_vm.sort.sortDirection == 'desc')?_c('fluro-icon',{attrs:{"library":"fas","icon":"caret-down"}}):_vm._e(),_vm._v(" "),(_vm.sort.sortDirection == 'asc')?_c('fluro-icon',{attrs:{"library":"fas","icon":"caret-up"}}):_vm._e()],1):_vm._e(),_vm._v("\n                                   "+_vm._s(column.title)+"\n                               ")]],2)}),_vm._v(" "),_c('th',{staticClass:"last shrink"},[_c('v-menu',{attrs:{"close-on-content-click":false,"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('div',_vm._g({},on),[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"content":"Table Settings","small":"","icon":""}},[_c('fluro-icon',{attrs:{"icon":"cog"}})],1)],1)]}}])},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_vm._t("optionsabove"),_vm._v(" "),(_vm.availableKeys.length)?_c('v-container',[_c('v-autocomplete',{attrs:{"label":"Group rows by","items":_vm.availableGroupingKeys,"return-object":true,"item-text":"title"},on:{"change":_vm.toggleColumnGrouping}})],1):_vm._e(),_vm._v(" "),_c('v-container',{staticClass:"border-top border-bottom"},[_c('strong',[_vm._v("Select Columns")])]),_vm._v(" "),_c('v-list',{staticClass:"scroll-y",staticStyle:{"max-height":"50vh"},attrs:{"dense":""}},_vm._l((_vm.availableKeys),function(field){return _c('v-list-tile',{class:{columnselected:_vm.columnIsSelected(field)},on:{"click":function($event){return _vm.toggleColumn(field)}}},[_c('v-list-tile-action',[(_vm.columnIsSelected(field))?_c('fluro-icon',{attrs:{"icon":"check"}}):_vm._e()],1),_vm._v(" "),_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                       "+_vm._s(field.title)+"\n                                                   ")])],1)],1)}),1),_vm._v(" "),_vm._t("optionsbelow")],2)],1)],1)],2)]),_vm._v(" "),_c('tbody',[(_vm.grouped)?[_vm._l((_vm.grouped),function(group){return [_c('tr',{staticClass:"breaker"},[_c("table-row-checkbox",{tag:"th",staticClass:"first",attrs:{"checked":_vm.allInGroupSelected(group.items)},nativeOn:{"click":function($event){return _vm.toggleSet(group.items)}}}),_vm._v(" "),_c('td',{attrs:{"colspan":1 + _vm.renderColumns.length}},[_vm._v(_vm._s(group.title || 'No value')+" "),_c('span',{staticClass:"sm muted"},[_vm._v("("+_vm._s(group.items.length)+")")])])],1),_vm._v(" "),_vm._l((group.items),function(item,key){return _c('tr',{key:item.guid,class:_vm.classes(item)},[(item._populating)?[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th",staticClass:"first"}):_vm._e(),_vm._v(" "),_c('td',{attrs:{"colspan":_vm.renderColumns.length},nativeOn:{"click":function($event){return _vm.clicked(item, _vm.column, key)}}},[_vm._v("-")]),_vm._v(" "),(_vm.actionsEnabled)?_c('th',{staticClass:"last shrink"}):_vm._e()]:[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th",staticClass:"first",attrs:{"checked":_vm.selectionController.isSelected(item),"value":item},nativeOn:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.checkboxClick(item, $event, key)}}}):_vm._e(),_vm._v(" "),_vm._l((_vm.renderColumns),function(column){return _c('table-cell',{class:{'sorting':_vm.sort.sortKey == column.key},attrs:{"row":item,"column":column},nativeOn:{"click":function($event){return _vm.clicked(item, column, key)}}})}),_vm._v(" "),(_vm.actionsEnabled)?_c('th',{staticClass:"last shrink"},[_c('div',{staticClass:"action-buttons"},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)]):_vm._e()]],2)})]})]:_vm._l((_vm.page),function(item,key){return _c('tr',{key:item.guid,class:_vm.classes(item)},[(item._populating)?[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th",staticClass:"first"}):_vm._e(),_vm._v(" "),_c('td',{attrs:{"colspan":_vm.renderColumns.length},nativeOn:{"click":function($event){return _vm.clicked(item, _vm.column, key)}}},[_vm._v("-")]),_vm._v(" "),(_vm.actionsEnabled)?_c('th',{staticClass:"last shrink"}):_vm._e()]:[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th",staticClass:"first",attrs:{"checked":_vm.selectionController.isSelected(item),"value":item},nativeOn:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.checkboxClick(item, $event, key)}}}):_vm._e(),_vm._v(" "),_vm._l((_vm.renderColumns),function(column){return _c('table-cell',{class:{'sorting':_vm.sort.sortKey == column.key},attrs:{"row":item,"column":column},nativeOn:{"click":function($event){return _vm.clicked(item, column, key)}}})}),_vm._v(" "),(_vm.actionsEnabled)?_c('th',{staticClass:"last shrink"},[_c('div',{staticClass:"action-buttons"},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)]):_vm._e()]],2)})],2)])]),_vm._v(" "),_c('div',{staticClass:"footer-stats"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[(!_vm.totalPages)?[_c('v-flex',{staticClass:"text-muted"},[_vm._v("\n                           No "+_vm._s(_vm.plural)+"\n                       ")])]:[_c('v-flex',{staticClass:"text-muted",attrs:{"xs6":"","align-center":"","d-flex":""}},[_c('v-menu',{attrs:{"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('div',_vm._g({},on),[(_vm.groupingColumn)?_c('div',[_vm._v("\n                                           "+_vm._s(_vm.totalGroups)+" groups - Showing "+_vm._s(_vm._f("numberWithCommas")(_vm.startOffset + 1))+" to "+_vm._s(_vm._f("numberWithCommas")(_vm.endOffset))+" of "+_vm._s(_vm._f("numberWithCommas")(_vm.filteredTotal))+" rows\n                                       ")]):_c('div',[_vm._v("\n                                           "+_vm._s(_vm._f("numberWithCommas")(_vm.startOffset + 1))+" to "+_vm._s(_vm._f("numberWithCommas")(_vm.endOffset))+" of "+_vm._s(_vm._f("numberWithCommas")(_vm.filteredTotal))+" "+_vm._s(_vm.plural)+"\n                                       ")])])]}}])},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){_vm.perPage = 25;}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                   Show 25 per page\n                                               ")])],1)],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){_vm.perPage = 50;}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                   Show 50 per page\n                                               ")])],1)],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){_vm.perPage = 100;}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                   Show 100 per page\n                                               ")])],1)],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){_vm.perPage = 200;}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                   Show 250 per page\n                                               ")])],1)],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){_vm.perPage = 500;}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                                                   Show 500 per page\n                                               ")])],1)],1)],1)],1)],1)],1),_vm._v(" "),_c('v-flex',{staticClass:"text-xs-right",staticStyle:{"white-space":"nowrap"},attrs:{"xs6":"","align-center":"","d-flex":""}},[_c('div',[_c('div',{staticClass:"pagenumber-select"},[(_vm.$vuetify.breakpoint.smAndUp)?_c('span',{staticClass:"text-muted"},[_vm._v("Page "+_vm._s(_vm.currentPage)+" of "+_vm._s(_vm.totalPages))]):_vm._e(),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.currentPage),expression:"currentPage"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.currentPage=$event.target.multiple ? $$selectedVal : $$selectedVal[0];}}},_vm._l((_vm.availablePages),function(page,index){return _c('option',{domProps:{"value":index+1}},[_vm._v(_vm._s(index+1))])}),0)]),_vm._v(" "),_c('span',{staticClass:"ml-3"},[[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.firstPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-left"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.previousPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-left"}})],1)],_vm._v(" "),[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.nextPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-right"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.lastPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-right"}})],1)]],2)])])]],2)],1)]],2)};
var __vue_staticRenderFns__$q = [];

  /* style */
  const __vue_inject_styles__$q = function (inject) {
    if (!inject) return
    inject("data-v-5ed5cf4b_0", { source: ".border-top,.fluro-table-wrapper .footer-stats{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.columnselected{background:#eee;color:#aaa}.fluro-table-wrapper{position:relative;flex:1;display:flex;flex-direction:column;overflow:hidden;height:100%}.fluro-table-wrapper .select-options{font-size:normal;font-weight:400;letter-spacing:0;text-transform:none}.fluro-table-wrapper .v-progress-linear{position:absolute;top:0;left:0;right:0;margin:0;padding:0}.fluro-table-wrapper .thumbnail{background-size:cover;background-position:center;width:50px;height:30px;border-radius:3px;display:block}.fluro-table-wrapper .fluro-table-scroll{position:relative;width:100%;z-index:1;margin:auto;overflow:auto;height:100%;overscroll-behavior-x:none!important;overscroll-behavior-y:none!important;overscroll-behavior:none!important}.fluro-table-wrapper .fluro-table-scroll table{width:100%;margin:auto;border-collapse:separate;border-spacing:0}.fluro-table-wrapper .fluro-table-scroll.loading table{opacity:.5}.fluro-table-wrapper .fluro-table-scroll td,.fluro-table-wrapper .fluro-table-scroll th{padding:8px 7px;border-bottom:1px solid #e8edf1;vertical-align:middle;white-space:nowrap;position:relative}.fluro-table-wrapper .fluro-table-scroll td.shrink,.fluro-table-wrapper .fluro-table-scroll th.shrink{width:1px}.fluro-table-wrapper .fluro-table-scroll th.sorting{background:#f6f6f6!important}.fluro-table-wrapper .fluro-table-scroll .action-buttons{opacity:.3;white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll tr{background:#fff}.fluro-table-wrapper .fluro-table-scroll tr th.first,.fluro-table-wrapper .fluro-table-scroll tr th.last{background:#fff}.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd){background:#fcfcfc}.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.first,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.last{background:#fcfcfc}.fluro-table-wrapper .fluro-table-scroll tr.payment-status-refund td,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-refund th,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-refund th.first,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-refund th.last,.fluro-table-wrapper .fluro-table-scroll tr.status-archived td,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.first,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.last,.fluro-table-wrapper .fluro-table-scroll tr.status-cancelled td,.fluro-table-wrapper .fluro-table-scroll tr.status-cancelled th,.fluro-table-wrapper .fluro-table-scroll tr.status-cancelled th.first,.fluro-table-wrapper .fluro-table-scroll tr.status-cancelled th.last,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased td,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.first,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.last{color:#888;background:#f4f4f4}.fluro-table-wrapper .fluro-table-scroll tr.state-sent td,.fluro-table-wrapper .fluro-table-scroll tr.state-sent th,.fluro-table-wrapper .fluro-table-scroll tr.state-sent th.first,.fluro-table-wrapper .fluro-table-scroll tr.state-sent th.last{background:#f7f7f7!important}.fluro-table-wrapper .fluro-table-scroll tr.process-status-pending td,.fluro-table-wrapper .fluro-table-scroll tr.process-status-pending th,.fluro-table-wrapper .fluro-table-scroll tr.process-status-pending th.first,.fluro-table-wrapper .fluro-table-scroll tr.process-status-pending th.last,.fluro-table-wrapper .fluro-table-scroll tr.state-scheduled td,.fluro-table-wrapper .fluro-table-scroll tr.state-scheduled th,.fluro-table-wrapper .fluro-table-scroll tr.state-scheduled th.first,.fluro-table-wrapper .fluro-table-scroll tr.state-scheduled th.last{background:#fff7d3!important;color:#a76631!important}.fluro-table-wrapper .fluro-table-scroll tr.process-status-complete td,.fluro-table-wrapper .fluro-table-scroll tr.process-status-complete th,.fluro-table-wrapper .fluro-table-scroll tr.process-status-complete th.first,.fluro-table-wrapper .fluro-table-scroll tr.process-status-complete th.last{color:#36a93a!important;background:#e7f7e7!important}.fluro-table-wrapper .fluro-table-scroll tr.process-status-failed td,.fluro-table-wrapper .fluro-table-scroll tr.process-status-failed th,.fluro-table-wrapper .fluro-table-scroll tr.process-status-failed th.first,.fluro-table-wrapper .fluro-table-scroll tr.process-status-failed th.last{color:#be264a!important;background:#fbedf0!important}.fluro-table-wrapper .fluro-table-scroll tr.payment-status-pending td,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-pending th,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-pending th.first,.fluro-table-wrapper .fluro-table-scroll tr.payment-status-pending th.last{color:#197f6f;background:rgba(42,212,185,.1)}.fluro-table-wrapper .fluro-table-scroll tr.selected td,.fluro-table-wrapper .fluro-table-scroll tr.selected th,.fluro-table-wrapper .fluro-table-scroll tr.selected th.first,.fluro-table-wrapper .fluro-table-scroll tr.selected th.last{background-color:#f7f6de!important;color:#846b1f;border-color:#f2eac9!important}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.last,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.last{background-color:#f4fafa;color:#055d52}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover .action-buttons{opacity:1}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker{background:rgba(0,0,0,.05)}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker td,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker th{background:0 0!important;color:rgba(0,0,0,.5)!important;text-transform:uppercase;font-size:.8em;font-weight:600;letter-spacing:.03em;padding:4px 7px}.fluro-table-wrapper .fluro-table-scroll thead td,.fluro-table-wrapper .fluro-table-scroll thead th{padding:5px 7px;position:-webkit-sticky;position:sticky;top:0;background:#fff!important;z-index:4;text-align:left;font-size:11px;text-transform:uppercase;letter-spacing:.05em;line-height:20px;white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll thead th{white-space:nowrap;border-left:1px solid rgba(0,0,0,.05)}.fluro-table-wrapper .fluro-table-scroll thead th.first{border-left:none}.fluro-table-wrapper .fluro-table-scroll thead th .options-icon{opacity:0;position:absolute;right:20px;top:50%;transform:translateY(-50%)}.fluro-table-wrapper .fluro-table-scroll thead th:hover .options-icon{opacity:1}.fluro-table-wrapper .fluro-table-scroll thead th.sorting{padding-right:20px}.fluro-table-wrapper .fluro-table-scroll thead th.sortable .sort-icon{position:absolute;right:2px;top:50%;transform:translateY(-50%)}.fluro-table-wrapper .fluro-table-scroll tfoot{position:-webkit-sticky;position:sticky;bottom:0}.fluro-table-wrapper .fluro-table-scroll tfoot,.fluro-table-wrapper .fluro-table-scroll tfoot td,.fluro-table-wrapper .fluro-table-scroll tfoot th{position:-webkit-sticky;position:sticky;bottom:0;background:#fff;z-index:4}.fluro-table-wrapper .fluro-table-scroll tfoot th{white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll th.first{position:-webkit-sticky;position:sticky;left:0;z-index:2}.fluro-table-wrapper .fluro-table-scroll th.last{position:-webkit-sticky;position:sticky;right:0;z-index:2;text-align:right}.fluro-table-wrapper .fluro-table-scroll tfoot th.first,.fluro-table-wrapper .fluro-table-scroll tfoot th.last,.fluro-table-wrapper .fluro-table-scroll thead th.first,.fluro-table-wrapper .fluro-table-scroll thead th.last{z-index:5}.fluro-table-wrapper .footer-stats{padding:5px 10px;font-size:.9em}.fluro-table-wrapper .pagenumber-select{display:inline-block;position:relative}.fluro-table-wrapper .pagenumber-select select{opacity:0;width:100%;height:100%;position:absolute;appearance:none;display:block;left:0;right:0;bottom:0;top:0}.fluro-table-wrapper .flex-center{flex:1;display:flex;text-align:center;justify-content:center;align-items:center}.fluro-table-wrapper td.checkbox-cell,.fluro-table-wrapper th.checkbox-cell{text-align:center;padding-left:5px!important;padding-right:5px!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$q = undefined;
  /* module identifier */
  const __vue_module_identifier__$q = undefined;
  /* functional template */
  const __vue_is_functional_template__$q = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$p = normalizeComponent(
    { render: __vue_render__$q, staticRenderFns: __vue_staticRenderFns__$q },
    __vue_inject_styles__$q,
    __vue_script__$q,
    __vue_scope_id__$q,
    __vue_is_functional_template__$q,
    __vue_module_identifier__$q,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$r = {
  props: {
    'realms': {
      default() {
        return [];
      },

      type: [Array, Object]
    }
  },
  computed: {
    actualRealms() {
      if (!this.realms) {
        return;
      }

      if (lodash.isArray(this.realms)) {
        return this.realms;
      }

      if (lodash.isObject(this.realms)) {
        return [this.realms];
      }

      return [];
    },

    filtered() {
      var filtered = lodash.chain(this.actualRealms).filter(function (realm) {
        if (!realm) {
          return;
        }

        if (realm._discriminatorType) {
          // console.log('REALM', realm.title)
          return;
        }

        return true;
      }).value();

      if (!filtered || !filtered.length) {
        return;
      }

      var coloured = lodash.filter(filtered, function (realm) {
        return !!realm.bgColor;
      });

      if (coloured.length) {
        return coloured;
      } else {
        return filtered.length ? filtered.slice(0, 1) : null;
      }
    } // colouredRealms() {
    //     var coloured = _.filter(this.filtered, 'bgColor');
    //     if(!coloured.length) {
    //         return this.filtered.slice(0,1);
    //     }
    // }


  }
};

/* script */
const __vue_script__$r = script$r;

/* template */
var __vue_render__$r = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"dots"},_vm._l((_vm.filtered),function(realm){return _c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"dot",style:({backgroundColor:realm.bgColor || '#000'}),attrs:{"content":realm.title,"small":""}})}),0)};
var __vue_staticRenderFns__$r = [];

  /* style */
  const __vue_inject_styles__$r = function (inject) {
    if (!inject) return
    inject("data-v-ed5c78b8_0", { source: ".border-top[data-v-ed5c78b8]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-ed5c78b8]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-ed5c78b8]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-ed5c78b8]{border-left:1px solid rgba(0,0,0,.05)}.dots[data-v-ed5c78b8]{display:inline-block;margin-right:5px;vertical-align:middle;white-space:nowrap}.dots .dot[data-v-ed5c78b8]{display:inline-block;border-radius:100%;width:14px;height:14px;margin-left:-7px;border:1px solid #fff;vertical-align:middle}.dots .dot[data-v-ed5c78b8]:first-child{margin-left:0}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$r = "data-v-ed5c78b8";
  /* module identifier */
  const __vue_module_identifier__$r = undefined;
  /* functional template */
  const __vue_is_functional_template__$r = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$q = normalizeComponent(
    { render: __vue_render__$r, staticRenderFns: __vue_staticRenderFns__$r },
    __vue_inject_styles__$r,
    __vue_script__$r,
    __vue_scope_id__$r,
    __vue_is_functional_template__$r,
    __vue_module_identifier__$r,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$s = {
  name: 'fluro-realm-select-item',
  props: {
    'item': {
      type: Object,
      required: true
    },
    'callback': {
      type: Function,
      required: true
    },
    'check': {
      type: Function,
      required: true
    }
  },
  computed: {
    isSelected: {
      get() {
        return this.check(this.item);
      },

      set() {//Nothing
      }

    },

    dot() {
      var self = this;
      return {
        backgroundColor: self.item.bgColor
      };
    }

  }
};

/* script */
const __vue_script__$s = script$s;

/* template */
var __vue_render__$s = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"realm-select-item-outer",class:{'has-children':_vm.item.children && _vm.item.children.length}},[_c('div',{staticClass:"realm-select-item",class:{selected:_vm.isSelected},on:{"click":function($event){return _vm.callback(_vm.item)}}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('span',{staticClass:"dot",style:(_vm.dot)}),_vm._v(" "+_vm._s(_vm.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('div',{staticClass:"type"},[_vm._v(_vm._s(_vm.item.fullDefinition.title != 'Realm' ? _vm.item.fullDefinition.title : ''))]),_vm._v(" "),_c('div',{staticClass:"check-icon"},[(_vm.isSelected)?_c('fluro-icon',{attrs:{"icon":"check"}}):_vm._e()],1)],1)],1),_vm._v(" "),(_vm.item.children && _vm.item.children.length)?_c('div',{staticClass:"children"},[_vm._l((_vm.item.children),function(realm){return [_c('fluro-realm-select-item',{attrs:{"item":realm,"check":_vm.check,"callback":_vm.callback}})]})],2):_vm._e()])};
var __vue_staticRenderFns__$s = [];

  /* style */
  const __vue_inject_styles__$s = function (inject) {
    if (!inject) return
    inject("data-v-bf86136c_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$s = undefined;
  /* module identifier */
  const __vue_module_identifier__$s = undefined;
  /* functional template */
  const __vue_is_functional_template__$s = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$r = normalizeComponent(
    { render: __vue_render__$s, staticRenderFns: __vue_staticRenderFns__$s },
    __vue_inject_styles__$s,
    __vue_script__$s,
    __vue_scope_id__$s,
    __vue_is_functional_template__$s,
    __vue_module_identifier__$s,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$t = {
  props: {
    options: {
      type: Object
    }
  },
  components: {
    FluroRealmSelectItem: __vue_component__$r,
    FluroTabset: __vue_component__$c,
    FluroTab: __vue_component__$b
  },
  mixins: [FluroModalMixin, Layout],

  data() {
    return {
      selector: this.options.selector
    };
  },

  methods: {
    isSelected(item) {
      return this.selector.isSelected(item);
    },

    toggleRealm(item) {
      return this.selector.toggleRealm(item);
    }

  },
  computed: {
    title() {
      var self = this;
      var plural = 'Realms';

      if (self.tree.length == 1) {
        plural = self.tree[0].plural;
      }

      return `Select ${plural}`;
    },

    selection() {
      return this.selector.selection;
    },

    tree() {
      return this.selector.tree;
    },

    loading() {
      return this.selector.loading;
    },

    ids() {
      return this.$fluro.utils.arrayIDs(this.options.items);
    }

  }
};

/* script */
const __vue_script__$t = script$t;

/* template */
var __vue_render__$t = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"realm-select-modal"},[(_vm.loading)?_c('flex-column',[_c('v-container',{staticClass:"text-xs-center"},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)],1):[_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',{attrs:{"py-2":""}},[_c('v-layout',{attrs:{"row":"","align-center":""}},[_c('v-flex',[_c('h3',{staticStyle:{"margin":"0"}},[_vm._v(_vm._s(_vm.title))])]),_vm._v(" "),_c('div',[_c('v-btn',{staticClass:"ma-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                            Done\n                        ")])],1)],1)],1)],1),_vm._v(" "),_c('flex-column',[_c('fluro-tabset',_vm._l((_vm.tree),function(type){return _c('fluro-tab',{key:type.definitionName,attrs:{"heading":type.plural}},[_c('flex-column-body',{staticClass:"realm-select-item-outer",class:{'has-selection':_vm.selection.length}},[_c('div',{staticClass:"children"},[_vm._l((type.realms),function(realm){return [_c('fluro-realm-select-item',{attrs:{"item":realm,"check":_vm.isSelected,"callback":_vm.toggleRealm}})]})],2)])],1)}),1)],1),_vm._v(" "),(_vm.selector.selection.length)?_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"pa-1":""}},[_c('v-btn',{attrs:{"small":"","flat":""},on:{"click":function($event){return _vm.selector.deselectAll()}}},[_vm._v("\n                    Deselect all "+_vm._s(_vm.selector.selection.length)+"\n                ")])],1)],1):_vm._e()]],2)};
var __vue_staticRenderFns__$t = [];

  /* style */
  const __vue_inject_styles__$t = function (inject) {
    if (!inject) return
    inject("data-v-f4447f06_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.realm-select-modal{max-width:500px;max-height:80vh}.realm-select-modal .tabset .tabset-menu{background:#333;color:#fff}.realm-select-modal .tabset .tabset-menu a{border:none!important;padding:20px 15px}.realm-select-modal .tabset .tabset-menu a.active{background:0 0;opacity:1;border:none}.realm-select-modal .flex-tabs{background:#eaedf2}@media (max-width:768px){.realm-select-modal{max-width:none}}.realm-select-modal .realm-select-item-outer{background:#eaedf2;padding:0 5px 0 15px}.realm-select-modal .realm-select-item-outer.has-children+.realm-select-item-outer>.realm-select-item:first-child{border-top:1px solid #cbd2df!important}.realm-select-modal .realm-select-item-outer .realm-select-item{border:1px solid #cbd2df;display:block;padding:10px;color:#888;position:relative;background:#fff;font-weight:400;cursor:pointer}.realm-select-modal .realm-select-item-outer .realm-select-item:hover{background:#fafafa}.realm-select-modal .realm-select-item-outer .realm-select-item .type{font-weight:1!important;font-style:italic!important;font-size:.9em!important;opacity:.5}.realm-select-modal .realm-select-item-outer .realm-select-item .check-icon{width:35px;text-align:right}.realm-select-modal .realm-select-item-outer .realm-select-item:first-child{border-top:none}.realm-select-modal .realm-select-item-outer .realm-select-item:before{content:\"\";border-top:1px solid #cbd2df;position:absolute;left:-16px;top:19px;width:15px;height:2px;display:block}.realm-select-modal .realm-select-item-outer .realm-select-item .v-list__tile__action{opacity:0}.realm-select-modal .realm-select-item-outer .realm-select-item .dot{border-radius:100%;display:inline-block;width:10px;height:10px;margin-right:10px;background-color:rgba(68,68,68,.3)}.realm-select-modal .realm-select-item-outer .children{padding:0 0 15px;margin-left:21px;border-left:1px solid #cbd2df;position:relative}@media (max-width:768px){.realm-select-modal .realm-select-item-outer .children{margin-left:5px}}.realm-select-modal .realm-select-item-outer .children:before{content:\"\";position:absolute;width:1px;height:20px;display:block;left:-1px;border-left:1px solid #cbd2df;top:0}.realm-select-modal .realm-select-item-outer .children:after{content:\"\";position:absolute;width:1px;height:36px;display:block;left:-1px;border-left:1px solid #eaedf2;bottom:0}.realm-select-modal .has-selection .realm-select-item{background:#edf0f4}.realm-select-modal .has-selection .realm-select-item.selected{background:#fff;border-color:#cbd2df;color:#333;font-weight:600;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$t = undefined;
  /* module identifier */
  const __vue_module_identifier__$t = undefined;
  /* functional template */
  const __vue_is_functional_template__$t = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$s = normalizeComponent(
    { render: __vue_render__$t, staticRenderFns: __vue_staticRenderFns__$t },
    __vue_inject_styles__$t,
    __vue_script__$t,
    __vue_scope_id__$t,
    __vue_is_functional_template__$t,
    __vue_module_identifier__$t,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$u = {
  computed: {
    singleOption: {
      get() {
        return this.singleOptionAvailable;
      },

      set(payload) {
        this.singleOptionAvailable = payload;
        this.$emit('single', payload);
      }

    },

    mainType() {
      var tree = this.tree;

      if (tree.length == 1) {
        //(Campuses)
        return tree[0].definition || tree[0]._type;
      } else {
        return 'realm';
      }
    },

    title() {
      return this.$fluro.types.readable(this.mainType, false, 'realm');
    },

    plural() {
      return this.$fluro.types.readable(this.mainType, true, 'realm');
    },

    selectionSummary() {
      var self = this;

      if (!self.selection.length) {
        return `Select ${self.plural}`;
      }

      if (self.selection.length > 3) {
        return `${self.selection.length} ${self.plural} selected`;
      }

      return lodash.map(self.selection, 'title').join(', ');
    }

  },
  components: {
    FluroRealmSelectItem: __vue_component__$r,
    FluroRealmDots: __vue_component__$q
  },
  mixins: [Layout, FluroSelectionMixin],
  props: {
    small: {
      type: Boolean
    },
    block: {
      type: Boolean
    },
    'action': {
      type: String,
      default: 'create'
    },
    'expanded': {
      type: Boolean
    },
    'value': {
      type: Array,
      default: function () {
        return [];
      }
    },
    'type': {
      //The type of thing we are selecting realms for
      type: String
    },
    'definition': {
      //The definition of the thing we are selecting realms for
      type: String
    },
    'filterDiscriminator': {
      type: String
    }
  },

  data() {
    return {
      singleOptionAvailable: true,
      loading: true
    };
  },

  asyncComputed: {
    tree: {
      default: [],

      get() {
        var self = this;
        self.loading = true; //////////////////////////////////////

        function mapFlat(realm, memo) {
          memo[realm._id] = realm;

          if (realm.children && realm.children.length) {
            lodash.each(realm.children, function (realm) {
              mapFlat(realm, memo);
            });
          }
        } //////////////////////////////////////


        return new Promise(function (resolve, reject) {
          self.$fluro.access.retrieveSelectableRealms(self.action, self.definition, self.type).then(function (allRealms) {
            var filtered = lodash.filter(allRealms, function (realmType) {
              if (!self.filterDiscriminator || !self.filterDiscriminator.length) {
                return true;
              }

              return realmType.definition == self.filterDiscriminator;
            }); // console.log('ALL REALMS', allRealms, self.filterDiscriminator, filtered, self.definition, self.type)
            //////////////////////////////////////


            var flattenedLookup = lodash.reduce(allRealms, function (set, realmType) {
              lodash.each(realmType.realms, function (realm) {
                mapFlat(realm, set);
              });

              return set;
            }, {});

            var flattenedIDs = lodash.map(flattenedLookup, function (realm) {
              return realm;
            }); // console.log('FLATTENED', flattened)
            //////////////////////////////////////


            var initialIDs = lodash.chain(self.$fluro.utils.arrayIDs(self.value)).map(function (id) {
              return flattenedLookup[id];
            }).compact().value(); //////////////////////////////////////


            resolve(filtered); //////////////////////////////////////

            var singleOption = false;

            if (initialIDs && initialIDs.length) {
              // console.log('Convert', self.value, res);
              // console.log('SET INITIAL', initialIDs, self)
              self.setSelection(initialIDs);
            } else {
              if (flattenedIDs.length == 1) {
                // console.log('SET FLATTENED', flattenedIDs);
                self.setSelection(flattenedIDs);
              }
            }

            if (flattenedIDs.length == 1) {
              singleOption = true;
            }

            self.singleOption = singleOption;
            self.loading = false;
          }, function (err) {
            reject(err);
            self.loading = false;
          });
        });
      }

    }
  },
  watch: {
    'value': function () {
      //Set the value so update the selection
      this.setSelection(this.value);
    },
    'selection': function () {
      // console.log('SELECTION')
      var self = this; //Emit the change

      this.$emit('input', self.selection);
    }
  },
  methods: {
    showModal() {
      // console.log('SHOW MODAL', this.$fluro.modal)
      var self = this; //////////////////////////////////////

      var promise = self.$fluro.modal({
        component: __vue_component__$s,
        options: {
          selector: self,
          fixed: true
        }
      }); //////////////////////////////////////
      // promise.then(function(res) {}, function(err) {})
    },

    toggleRealm(realm) {
      this.toggle(realm);
    }

  }
};

/* script */
const __vue_script__$u = script$u;

/* template */
var __vue_render__$u = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.singleOptionAvailable),expression:"!singleOptionAvailable"}],staticClass:"realm-select"},[_c('v-btn',{staticClass:"pill mx-0",attrs:{"small":_vm.small,"block":_vm.block},nativeOn:{"click":function($event){return _vm.showModal($event)}}},[_c('fluro-realm-dots',{attrs:{"realms":_vm.selection}}),_vm._v(" "),_c('span',{staticClass:"label"},[_vm._v(_vm._s(_vm.selectionSummary))])],1)],1)};
var __vue_staticRenderFns__$u = [];

  /* style */
  const __vue_inject_styles__$u = function (inject) {
    if (!inject) return
    inject("data-v-49f8c3ac_0", { source: ".border-top[data-v-49f8c3ac]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-49f8c3ac]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-49f8c3ac]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-49f8c3ac]{border-left:1px solid rgba(0,0,0,.05)}.label[data-v-49f8c3ac]{max-width:150px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$u = "data-v-49f8c3ac";
  /* module identifier */
  const __vue_module_identifier__$u = undefined;
  /* functional template */
  const __vue_is_functional_template__$u = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$t = normalizeComponent(
    { render: __vue_render__$u, staticRenderFns: __vue_staticRenderFns__$u },
    __vue_inject_styles__$u,
    __vue_script__$u,
    __vue_scope_id__$u,
    __vue_is_functional_template__$u,
    __vue_module_identifier__$u,
    false,
    createInjector,
    undefined,
    undefined
  );

//
// import FilterConditionRow from 'src/components/form/filters/FilterConditionRow.vue';
// import FilterConditionGroup from 'src/components/form/filters/FilterConditionGroup.vue';

var script$v = {
  name: 'filter-condition-row',
  components: {
    FluroRealmSelect: __vue_component__$t // FluroContentSelectButton,
    // FilterConditionRow,
    // FilterConditionGroup,

  },
  props: {
    type: {
      type: String
    },
    useSample: {
      type: Boolean
    },
    loadingKeys: {
      type: Boolean
    },
    'value': {
      type: Object,
      required: true // default () {
      // return {}
      // },

    },
    fields: {
      type: Array,

      default() {
        return [];
      }

    },
    definition: {
      type: Object,

      default() {
        return {};
      }

    },
    rows: {
      type: Array
    },
    // columns: {
    //     type: Array,
    // },
    mini: {
      type: Boolean
    }
  },

  beforeCreate() {
    var self = this;
    Promise.all([service.load('src/components/form/filters/FilterConditionGroup.vue', function () {
      return Promise.resolve().then(function () { return FilterConditionGroup; });
    }), service.load('src/components/form/filters/FilterConditionRow.vue', function () {
      return Promise.resolve().then(function () { return FilterConditionRow; });
    }), service.load('src/components/form/contentselect/FluroContentSelectButton.vue', function () {
      return Promise.resolve().then(function () { return FluroContentSelectButton; });
    })]).then(function (results) {
      self.$options.components.FilterConditionGroup = results[0];
      self.$options.components.FilterConditionRow = results[1];
      self.$options.components.FluroContentSelectButton = results[2];
      self.ready = true;
    });
  },

  // beforeCreate: function() {
  //     this.$options.components.FilterConditionRow = require('src/components/form/filters/FilterConditionRow.vue').default;
  //     this.$options.components.FilterConditionGroup = require('src/components/form/filters/FilterConditionGroup.vue').default;
  // },
  created() {
    var self = this; // if(!self.model.values) {
    //     self.model.values = [];
    // }

    self.debounced = lodash.debounce(function () {
      // self.model = self.words;
      // console.log('FILTER ROW CHANGED', self.model)
      self.$emit('input', self.model);
    }, self.debounce);
    this.retrieveValues();
  },

  data() {
    var datePeriodOptions = [];
    var week = 1000 * 60 * 60 * 24 * 7;
    var now = new Date();
    datePeriodOptions.push({
      title: 'Next 6 Weeks',
      date1: now,
      date2: new Date(new Date().setTime(new Date().getTime() + week * 6))
    });
    datePeriodOptions.push({
      title: 'Next 2 Weeks',
      date1: now,
      date2: new Date(new Date().setTime(new Date().getTime() + week * 2))
    });
    datePeriodOptions.push({
      title: 'Last 2 Weeks',
      date1: new Date(new Date().setTime(new Date().getTime() - week * 2)),
      date2: now
    });
    datePeriodOptions.push({
      title: 'Last 6 Weeks',
      date1: new Date(new Date().setTime(new Date().getTime() - week * 4)),
      date2: now
    }); // var parsedModel = this.value;

    var parsedModel = JSON.parse(JSON.stringify(this.value)); // console.log('MODEL START IS', parsedModel)

    return {
      ready: false,
      sampleRefreshKey: this.$fluro.utils.guid(),
      //Date Select Stuff
      datePeriodOptions,
      // datePeriod: datePeriodOptions[1],
      debounced: null,
      debounce: 0,
      //500,
      possibleValues: [],
      date1: false,
      date2: false,
      loadingValues: false,
      selectedKey: parsedModel.key || '',
      model: parsedModel,
      referenceIDModel: parsedModel.value,
      realmValues: []
    };
  },

  computed: {
    dateMeasures() {
      return [{
        title: 'Hours',
        value: 'hour'
      }, {
        title: 'Days',
        value: 'day'
      }, {
        title: 'Weeks',
        value: 'week'
      }, {
        title: 'Months',
        value: 'month'
      }, {
        title: 'Years',
        value: 'year'
      }];
    },

    referenceID: {
      get() {
        return this.referenceIDModel;
      },

      set(reference) {
        this.model.value = this.$fluro.utils.getStringID(reference);
        this.referenceIDModel = reference;
      }

    },

    referenceSelectField() {
      return this.dataType == 'reference' && !this.requiresManualInput;
    },

    useBasicReferenceSelect() {
      var self = this;

      if (!self.referenceSelectField) {
        return;
      }

      if (!self.selector) {
        return;
      }

      return self.selector.typeSelect || false;
    },

    keyCaption() {
      if (this.model.title) {
        return this.model.title;
      }

      if (this.selectedKey) {
        return this.selectedKey.title || this.selectedKey;
      }

      return 'Select a field';
    },

    // realmValues:{
    //     get() {
    //         return this.model.values;
    //     },
    //     set(payload) {
    //         this.model.values = payload;
    //         // = _.map(payload, function(realm) {
    //         //     return {
    //         //         _id:realm._id,
    //         //         title:realm.title,
    //         //         color:realm.color,
    //         //         bgColor:realm.bgColor,
    //         //     }
    //         // });//= _.map(payload, '_id');
    //     },
    // },
    cleanedValueSelection() {
      return lodash.map(this.possibleValues, function (option) {
        if (lodash.isString(option)) {
          return {
            text: option,
            value: option
          };
        }

        if (option.title) {
          option.text = option.title = option.title;
        }

        if (option.name) {
          option.text = option.title = option.name;
        }

        return option;
      });
    },

    hasSubFields() {
      return this.selector && this.selector.subfields && this.selector.subfields.length;
    },

    groupedFields() {
      return lodash.chain(this.fields).orderBy('title') // .reduce(function(set, field) {
      //     var subfieldLevels = field.title.split('>').slice(0, -1);
      //     var groupingKey = subfieldLevels.join(' > ');
      //     var existing = set[groupingKey];
      //     if(!existing) {
      //         existing = set[groupingKey] = {
      //             title:groupingKey,
      //             fields:[],
      //         };
      //     }
      //     existing.fields.push(field);
      //     return set;
      // }, {})
      // .reduce(function(set, group) {
      //     // console.log('GROUP', group)
      //     if(group.fields.length > 1) {
      //         //Add the grouping title
      //         set.push({divider:true});
      //         set.push({header:group.title, dark:true});
      //     }
      //     _.each(group.fields,function(field) {
      //         field.group = group.title;
      //         set.push(field);
      //     })
      //     return set;
      // },[])
      .value();
    },

    simpleKey() {
      return String(this.model.key).split('|')[0];
    },

    simpleKeyIsRealms() {
      return lodash.endsWith(this.simpleKey, 'realms');
    },

    // discriminator() {
    //     var discriminator = String(this.model.key).split('|')[1];
    //     console.log('DISCRIMINATOR', discriminator)
    //     return discriminator;
    // },
    weeks() {
      var array = [];

      lodash.times(52, function (i) {
        array.push({
          title: 'Week ' + i,
          value: i
        });
      });

      return array;
    },

    months() {
      var currentYear = new Date().getFullYear();
      return [{
        title: 'January',
        value: new Date(currentYear, 1, 1)
      }, {
        title: 'February',
        value: new Date(currentYear, 2, 1)
      }, {
        title: 'March',
        value: new Date(currentYear, 3, 1)
      }, {
        title: 'April',
        value: new Date(currentYear, 4, 1)
      }, {
        title: 'May',
        value: new Date(currentYear, 5, 1)
      }, {
        title: 'June',
        value: new Date(currentYear, 6, 1)
      }, {
        title: 'July',
        value: new Date(currentYear, 7, 1)
      }, {
        title: 'August',
        value: new Date(currentYear, 8, 1)
      }, {
        title: 'September',
        value: new Date(currentYear, 9, 1)
      }, {
        title: 'October',
        value: new Date(currentYear, 0, 1)
      }, {
        title: 'November',
        value: new Date(currentYear, 1, 11)
      }, {
        title: 'December',
        value: new Date(currentYear, 1, 12)
      }];
    },

    weekdays() {
      return [{
        title: 'Sunday',
        value: 0
      }, {
        title: 'Monday',
        value: 1
      }, {
        title: 'Tuesday',
        value: 2
      }, {
        title: 'Wednesday',
        value: 3
      }, {
        title: 'Thursday',
        value: 4
      }, {
        title: 'Friday',
        value: 5
      }, {
        title: 'Saturday',
        value: 6
      }];
    },

    readableStartDate() {
      var self = this;
      return self.$fluro.date.formatDate(self.model.value, 'D MMM YYYY');
    },

    readableEndDate() {
      var self = this;
      return self.$fluro.date.formatDate(self.model.value2, 'D MMM YYYY');
    },

    startDateString: {
      get() {
        if (!this.model.value) {
          return '';
        }

        return new Date(this.model.value).toISOString().substr(0, 10);
      },

      set(value) {
        console.log('Set the value');
        this.$set(this.model, 'value', new Date(value));
      }

    },
    endDateString: {
      get() {
        if (!this.model.value2) {
          return '';
        }

        return new Date(this.model.value2).toISOString().substr(0, 10);
      },

      set(value) {
        this.$set(this.model, 'value2', new Date(value));
      }

    },

    requiresManualInput() {
      switch (this.model.comparator) {
        case 'startswith':
        case 'endswith':
        case 'doesnotstartwith':
        case 'doesnotendwith':
        case 'like':
        case 'contains':
        case 'excludes':
          return true;
      }
    },

    rowChangeString() {
      var self = this;

      if (self.useSample) {
        return `${self.sampleRefreshKey}-${self.type}-${self.model.key}`;
      } else {
        var rowIDs = lodash.orderBy(this.$fluro.utils.arrayIDs(this.rows), function (r) {
          return r;
        }).join(' ');

        return `${this.discriminatorDefinition}-${this.discriminatorType}${this.discriminator}-${this.model.key}-${rowIDs}`;
      }
    },

    selector() {
      var key = this.model.key;

      if (!this.fields) {
        return;
      }

      var match = lodash.find(this.fields, {
        key
      }); // console.log('MATCHING SELECTOR', match)


      return match;
    },

    valid() {
      return FilterService.isValidFilter(this.model);
    },

    comparator() {
      return FilterService.comparatorLookup[this.model.comparator];
    },

    inputType() {
      return this.comparator ? this.comparator.inputType : null;
    },

    dataType() {
      if (this.selector) {
        return this.selector.type || 'string';
      } else {
        return 'string';
      }
    },

    discriminatorType() {
      if (this.selector) {
        return this.selector._discriminatorType;
      } else {
        return;
      }
    },

    discriminatorDefinition() {
      if (this.selector) {
        return this.selector._discriminatorDefinition;
      } else {
        return;
      }
    },

    discriminator() {
      if (this.selector) {
        return this.selector._discriminator;
      } else {
        return;
      }
    },

    comparators() {
      var type = 'string';

      if (this.selector) {
        type = this.selector.type || 'string';
      }

      return FilterService.getComparatorsForType(type);
    }

  },
  watch: {
    dataType(val) {
      if (val) {
        this.$set(this.model, 'dataType', val);
      } else {
        this.$set(this.model, 'dataType', null);
      } ///////////////////////////////////////////
      //Reset the values and the selector


      this.$set(this.model, 'comparator', null);
      this.$set(this.model, 'value', null);
      this.$set(this.model, 'value2', null);
      this.$set(this.model, 'values', []); ///////////////////////////////////////////
    },

    selectedKey(val) {

      if (val) {
        this.$set(this.model, 'title', val.title);
        this.model.key = val.key;
      } else {
        this.$set(this.model, 'title', null);
        this.$set(this.model, 'dataType', null);
        this.model.key = null;
      } ///////////////////////////////////////////
      //Reset the values and the selector


      this.$set(this.model, 'value', null);
      this.$set(this.model, 'value2', null);
      this.$set(this.model, 'values', []);
    },

    selector() {
      if (this.selector) {
        this.model.key = this.selector.key;
      } else {
        this.model.key = '';
      }
    },

    'model': {
      handler: function () {
        this.debounced();
      },
      deep: true
    },

    rowChangeString(d) {
      // //console.log('Got the row!');
      // this.possibleValues = [];
      this.retrieveValues();
    }

  },
  methods: {
    addCriteriaRow() {
      var self = this;
      var newRow = {
        key: null,
        value: null,
        value2: null,
        values: []
      };

      if (self.model.criteria) {
        self.model.criteria.push(newRow);
      } else {
        self.$set(self.model, 'criteria', [newRow]);
      }
    },

    removeCriteria(index) {
      this.model.criteria.splice(index, 1);
    },

    selectDatePeriod(option) {
      this.model.value = option.date1;
      this.model.value2 = option.date2;
    },

    retrieveValues() {
      var self = this;
      var key = self.model.key; // console.log('RETRIEVE VALUES', key);
      ////////////////////////////////////

      if (self.useBasicReferenceSelect) {
        //Just show a normal reference selector
        self.possibleValues = [];
        self.loadingValues = false; // console.log('CADE > Use basic reference select')

        return;
      } ////////////////////////////////////
      //If we have no key then there are no possible values


      if (!key || !key.length) {
        // console.log('Values > No key so clear values');
        self.possibleValues = [];
        self.loadingValues = false; // console.log('CADE > No key so no values', self.model)

        return;
      } ////////////////////////////////////
      //If we are searching in a sub field
      //eg. family._children[].age
      // if (_.includes(key, '[]')) {
      //     var splitPieces = key.split('[]');
      //     var splitKey = splitPieces.shift();
      //     var splitParameters = splitPieces.join('');
      //     key = splitParameters;
      // }
      ////////////////////////////////////


      if (self.selector && self.selector.options && self.selector.options.length) {
        self.possibleValues = self.selector.options;
        self.loadingValues = false; // console.log('SELECTOR POSSIBLE VALUES', key, self.possibleValues)
        // console.log('CADE > has options from selector')

        return;
      }

      console.log('No values known yet'); ////////////////////////////////

      var dataType = self.dataType; ////////////////////////////////
      //For certain data types we already know
      //the options available

      switch (dataType) {
        case 'date':
        case 'number':
        case 'float':
        case 'integer':
        case 'decimal':
          //console.log('Values > No values, numeric input')
          return self.possibleValues = [];

        case 'boolean':
          //console.log('Values > Boolean Default')
          return self.possibleValues = [true, false];

        default:
          switch (key) {
            case 'definition':
              if (self.definition && self.definition.definitions) {
                return self.possibleValues = lodash.map(self.definition.definitions, function (def) {
                  return {
                    text: def.title,
                    value: def.definitionName
                  };
                });
              }

              break;

            case 'status':
              switch (lodash.get(self, 'definition.type.definitionName')) {
                case 'contact':
                  return self.possibleValues = ['active', 'draft', 'archived', 'deceased'];

                case 'purchase':
                  return self.possibleValues = ['active', 'cancelled', 'expired', 'failed', 'archived'];

                default:
                  return self.possibleValues = ['active', 'draft', 'archived', 'template'];
              }

            case 'gender':
              return self.possibleValues = ['male', 'female', 'unknown'];
          }

          break;
      } ////////////////////////////////////


      if (!self.useSample) {
        //There are no rows
        if (!self.rows || !self.rows.length) {
          //console.log('Values > No rows')
          self.possibleValues = [];
          self.loadingValues = false;
          console.log('No sample and no rows');
          return;
        }
      } ////////////////////////////////////
      //Show feedback to the user that we are loading
      //the values for them


      self.loadingValues = true; ////////////////////////////////////
      //Get the storage cache

      var valueStorageCache = this.$fluro.cache.get('filter-distinct-values'); ////////////////////////////////////
      //Check to see if there is already a cached set of values
      //for this query

      var valueCache = valueStorageCache[self.rowChangeString]; ////////////////////////////////////
      //If we haven't already got the values for this request

      if (!valueCache) {
        console.log('No value cache! Load it now'); //Check to see if the rows we know about already have the data
        //we are wanting to search on, because if so we can just use those
        //values instead of having to request from the server
        //

        var rawRowsAlreadyHaveKey = lodash.some(self.rows, function (row) {
          return row.hasOwnProperty(key);
        }); // console.log('ROWS HAVE THE KEY?', rawRowsAlreadyHaveKey);
        ////////////////////////////////////
        //We need to do this so we actually load the definitions from the server not rely
        //on the content in the list
        // if(self.discriminatorDefinition || self.discriminatorType  || self.discriminator) {
        //     rawRowsAlreadyHaveKey = false;
        // }
        ////////////////////////////////////
        ////////////////////////////////////
        //If we already know the options then send them back and resolve


        if (rawRowsAlreadyHaveKey) {
          //At this point we have a list of the nodes they are allowed to view
          self.possibleValues = lodash.chain(self.rows).map(key).flatten().compact().uniqBy(function (val) {
            return val.title || val.name || String(val);
          }).orderBy(function (val) {
            return val.title || val.name || String(val);
          }).value(); ///////////////////////////
          //Save and cache the values

          valueCache = valueStorageCache[self.rowChangeString] = Promise.resolve(self.possibleValues);
          console.log('We Already have the key of', key);
        } else {
          // console.log('No rows have the key', key, self.rows);
          //Get all the ids
          var subSetIDs = self.$fluro.utils.arrayIDs(self.rows); //We need to make an asynchronous request to the server
          //to find out what values we can filter by

          var options = {}; ///////////////////////////////////////////////////////
          //If it's a reference type, tell Fluro to populate it
          //so we can display a human readable title for them

          if (self.dataType == 'reference') {
            if (!options.params) {
              options.params = {};
            }

            options.params.populate = true;
          } ///////////////////////////////////////////////////////
          //Check if there are any discriminators that have been specified


          var discriminatorDefinition = self.discriminatorDefinition; //_.get(self, 'selector._discriminatorDefinition');

          if (discriminatorDefinition && discriminatorDefinition.length) {
            if (!options.params) {
              options.params = {};
            }

            options.params.definition = discriminatorDefinition;
          } ///////////////////////////////////////////////////////
          //Check if there are any discriminators that have been specified


          var discriminatorType = self.discriminatorType; //_.get(self, 'selector._discriminatorType');

          if (discriminatorType && discriminatorType.length) {
            if (!options.params) {
              options.params = {};
            }

            options.params.discriminatorType = discriminatorType;
          } ///////////////////////////////////////////////////////
          //Check if there are any discriminators that have been specified


          var discriminator = self.discriminator; //_.get(self, 'selector._discriminator');

          if (discriminator && discriminator.length) {
            if (!options.params) {
              options.params = {};
            }

            options.params.discriminator = discriminator;
          } ///////////////////////////////////////////////////////


          if (self.definition && self.definition.type) {
            options.type = self.definition.type.definitionName;
          } ///////////////////////////////////////////////////////
          // console.log('Go get the values')
          //Make the request and cache it


          valueCache = valueStorageCache[self.rowChangeString] = self.$fluro.content.values(subSetIDs, key, options);
        }
      } else {
        console.log('Values Cache exists', valueCache);
      }

      console.log('Load from server'); /////////////////////////////////////////////////////////////////
      //When the request is complete

      valueCache.then(function (res) {
        // console.log('GOT THE VALUES', res);
        self.possibleValues = res && res.length ? res : self.possibleValues || [];
        self.loadingValues = false;
      }, function (err) {
        self.possibleValues = [];
        self.loadingValues = false;
        valueStorageCache[self.rowChangeString] = null;
      });
    }

  }
  /**
  asyncComputed: {
  	values: {
  		default: [],
  		get() {
  				var self = this;
  			var key = this.model.key;
  				if (!key || !key.length) {
  				return Promise.resolve([]);
  			}
  				////console.log('Lets go get options for', key);
  					var dataType = self.dataType;
  			switch (dataType) {
  				case 'number':
  				case 'float':
  				case 'integer':
  				case 'decimal':
  					return Promise.resolve([]);
  					break;
  				case 'boolean':
  					return Promise.resolve([true, false]);
  					break;
  			}
  						this.loadingValues = true;
  			////////////////////////////////////
  				return new Promise(function(resolve, reject) {
  							if (self.rows && self.rows.length) {
  						//Check to see if the rows we know about already have the data
  					//we are wanting to search on, because if so we can just use that
  					// var rawRowsAlreadyHaveKey = _.every(self.rows, function(row) {
  					//     return row.hasOwnProperty(key);
  					// })
  						// //If we already know the options then send them back and resolve
  					// if (rawRowsAlreadyHaveKey) {
  					//     var allOptions = _.chain(self.rows)
  					//         .map(key)
  					//         .uniq()
  					//         .value();
  						//     return resolve(allOptions)
  					// }
  						//Get all the ids
  					var subSetIDs = _.map(self.rows, '_id');
  						//We need to make an asynchronous request to the server
  					//to find out what values we can filter by
  					// ////console.log('DATA TYPE', self.dataType)
  					var options = {
  						}
  						if (self.dataType == 'reference') {
  						options.params = {
  							populate: true
  						};
  					}
  						return self.$fluro.content.values(subSetIDs, key, options).then(function(res) {
  						resolve(res);
  						self.loadingValues = false;
  					}, function(err) {
  						reject(err);
  						self.loadingValues = false;
  					});
  				}
  					// return resolve([]);
  					});
  		},
  	}
  }
  	/**/

};

/* script */
const __vue_script__$v = script$v;

/* template */
var __vue_render__$v = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('v-container',{staticClass:"filter-condition-row grid-list-sm",class:{mini:_vm.mini},attrs:{"pa-0":""}},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('v-flex',{attrs:{"xs12":"","sm4":""}},[(_vm.fields.length)?[(_vm.$vuetify.breakpoint.xsOnly)?[_c('v-select',{attrs:{"single-line":"","dense":"","loading":_vm.loadingKeys,"return-object":true,"item-text":"title","item-value":"key","items":_vm.fields},model:{value:(_vm.selectedKey),callback:function ($$v) {_vm.selectedKey=$$v;},expression:"selectedKey"}})]:[_c('div',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":_vm.keyCaption}},[_c('v-autocomplete',{ref:"inputKey",attrs:{"single-line":"","dense":"","loading":_vm.loadingKeys,"return-object":true,"item-text":"title","item-value":"key","items":_vm.groupedFields},scopedSlots:_vm._u([{key:"item",fn:function(data){return [(typeof data.item !== 'object')?void 0:[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(data.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]]}}],null,false,749760244),model:{value:(_vm.selectedKey),callback:function ($$v) {_vm.selectedKey=$$v;},expression:"selectedKey"}})],1)]]:[_c('v-text-field',{attrs:{"single-line":"","label":""},model:{value:(_vm.model.key),callback:function ($$v) {_vm.$set(_vm.model, "key", $$v);},expression:"model.key"}})]],2),_vm._v(" "),_c('v-flex',{attrs:{"xs12":"","sm3":""}},[_c('v-select',{ref:"inputComparator",attrs:{"single-line":"","dense":"","item-text":"title","item-value":"operator","items":_vm.comparators},model:{value:(_vm.model.comparator),callback:function ($$v) {_vm.$set(_vm.model, "comparator", $$v);},expression:"model.comparator"}})],1),_vm._v(" "),(_vm.comparator && _vm.inputType != 'none')?[(_vm.inputType == 'daterange')?_c('v-flex',{attrs:{"xs12":"","sm5":""}},[_c('v-menu',{ref:"dateSelection",attrs:{"fixed":true,"right":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0",attrs:{"small":"","flat":"","block":""}},on),[_c('fluro-icon',{attrs:{"library":"far","icon":"calendar","left":""}}),_vm._v(" "+_vm._s(_vm.readableStartDate)+" - "+_vm._s(_vm.readableEndDate)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")],1)]}}],null,false,1074232223)},[_vm._v(" "),_c('v-card',[_c('v-layout',[_c('v-flex',[_c('v-card-text',[_c('label',[_vm._v(" ")]),_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.datePeriodOptions),function(option){return _c('v-list-tile',{key:option.value,on:{"click":function($event){return _vm.selectDatePeriod(option)}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(option.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])}),1)],1)],1),_vm._v(" "),_c('v-flex',[_c('v-card-text',{staticClass:"text-sm-center"},[_c('label',[_vm._v("From Date")])]),_vm._v(" "),_c('v-date-picker',{attrs:{"no-title":"","scrollable":""},model:{value:(_vm.startDateString),callback:function ($$v) {_vm.startDateString=$$v;},expression:"startDateString"}})],1),_vm._v(" "),_c('v-flex',[_c('v-card-text',{staticClass:"text-sm-center"},[_c('label',[_vm._v("To Date")])]),_vm._v(" "),_c('v-date-picker',{attrs:{"no-title":"","scrollable":""},model:{value:(_vm.endDateString),callback:function ($$v) {_vm.endDateString=$$v;},expression:"endDateString"}})],1)],1)],1)],1)],1):(_vm.inputType == 'datemeasure')?_c('v-flex',{attrs:{"xs12":"","sm5":""}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","label":"Total"},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('v-autocomplete',{staticClass:"small-input",attrs:{"dense":"","label":"Period","item-text":"title","item-value":"value","items":_vm.dateMeasures},model:{value:(_vm.model.value2),callback:function ($$v) {_vm.$set(_vm.model, "value2", $$v);},expression:"model.value2"}})],1)],1)],1):(_vm.inputType == 'range')?_c('v-flex',{attrs:{"xs12":"","sm5":""}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","label":"from"},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","label":"to"},model:{value:(_vm.model.value2),callback:function ($$v) {_vm.$set(_vm.model, "value2", $$v);},expression:"model.value2"}})],1)],1)],1):(_vm.inputType == 'array' && _vm.dataType != 'date')?_c('v-flex',{attrs:{"xs12":"","sm5":""}},[(_vm.simpleKeyIsRealms)?[_c('fluro-realm-select',{attrs:{"action":"view any","filterDiscriminator":_vm.discriminator,"block":"","small":""},model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]:(_vm.useBasicReferenceSelect)?[_c('fluro-content-select-button',{attrs:{"small":"","block":"","allDefinitions":true,"type":_vm.useBasicReferenceSelect},model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]:[(_vm.referenceSelectField)?[(_vm.$vuetify.breakpoint.xsOnly)?[_c('v-select',{staticClass:"small-input",attrs:{"multiple":"","dense":"","item-text":"title","item-value":"_id","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},scopedSlots:_vm._u([{key:"item",fn:function(data){return [(data.item._type == 'event')?[_c('v-list-tile-content',{staticClass:"border-bottom",staticStyle:{"height":"50px"}},[_c('strong',[_vm._v(_vm._s(data.item.title))]),_vm._v(" "),_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("readableEventDate")(data.item)))])])]:[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(data.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]]}}],null,false,3007000198),model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]:[_c('v-autocomplete',{staticClass:"small-input",attrs:{"multiple":"","dense":"","item-text":"title","item-value":"_id","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},scopedSlots:_vm._u([{key:"item",fn:function(data){return [(data.item._type == 'event')?[_c('v-list-tile-content',{staticClass:"border-bottom",staticStyle:{"height":"50px"}},[_c('strong',[_vm._v(_vm._s(data.item.title))]),_vm._v(" "),_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("readableEventDate")(data.item)))])])]:[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(data.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]]}}],null,false,3007000198),model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]]:[(_vm.$vuetify.breakpoint.xsOnly)?[_c('v-select',{staticClass:"small-input",attrs:{"multiple":"","dense":"","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]:[_c('v-autocomplete',{staticClass:"small-input",attrs:{"multiple":"","dense":"","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})]]]],2):_c('v-flex',{attrs:{"xs12":"","sm5":""}},[(_vm.dataType == 'date')?[(_vm.model.comparator == 'datesameweekday')?[_c('div',[_c('v-select',{attrs:{"single-line":"","multiple":"","dense":"","item-text":"title","item-value":"value","items":_vm.weekdays},model:{value:(_vm.model.values),callback:function ($$v) {_vm.$set(_vm.model, "values", $$v);},expression:"model.values"}})],1)]:[_c('div',[_c('v-menu',{ref:"date1",attrs:{"close-on-content-click":false,"nudge-right":40,"lazy":"","transition":"scale-transition","offset-y":"","full-width":"","min-width":"290px"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [(_vm.model.computedValue && _vm.model.computedValue.length)?[_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","label":"Relative Date"},model:{value:(_vm.model.computedValue),callback:function ($$v) {_vm.$set(_vm.model, "computedValue", $$v);},expression:"model.computedValue"}})]:[_c('v-text-field',_vm._g({staticClass:"small-input",attrs:{"single-line":"","label":"Date","placeholder":_vm.model.computedValue},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}},on))]]}}],null,false,183020790),model:{value:(_vm.date1),callback:function ($$v) {_vm.date1=$$v;},expression:"date1"}},[_vm._v(" "),_c('v-date-picker',{attrs:{"no-title":"","scrollable":""},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}},[_c('v-spacer'),_vm._v(" "),_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","label":"Relative Date"},model:{value:(_vm.model.computedValue),callback:function ($$v) {_vm.$set(_vm.model, "computedValue", $$v);},expression:"model.computedValue"}}),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){_vm.date1 = false;}}},[_vm._v("Cancel")]),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){return _vm.$refs.date1.save(_vm.model.value)}}},[_vm._v("OK")])],1)],1)],1)]]:(_vm.dataType == 'number' || _vm.dataType == 'float' || _vm.dataType == 'decimal')?_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":""},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}}):(_vm.dataType == 'integer')?_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":"","mask":"############"},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}}):(_vm.useBasicReferenceSelect)?[_c('fluro-content-select-button',{attrs:{"small":"","block":"","allDefinitions":true,"maximum":1,"single-value":true,"type":_vm.useBasicReferenceSelect},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]:(_vm.referenceSelectField)?[(_vm.$vuetify.breakpoint.xsOnly)?[_c('v-select',{staticClass:"small-input",attrs:{"dense":"","item-text":"title","item-value":"_id","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},scopedSlots:_vm._u([{key:"item",fn:function(data){return [(data.item._type == 'event')?[_c('v-list-tile-content',{staticClass:"border-bottom",staticStyle:{"height":"50px"}},[_c('strong',[_vm._v(_vm._s(data.item.title))]),_vm._v(" "),_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("readableEventDate")(data.item)))])])]:[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(data.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]]}}],null,false,2508131974),model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]:[_c('v-autocomplete',{staticClass:"small-input",attrs:{"dense":"","item-text":"title","item-value":"_id","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},scopedSlots:_vm._u([{key:"item",fn:function(data){return [(data.item._type == 'event')?[_c('v-list-tile-content',{staticClass:"border-bottom",staticStyle:{"height":"50px"}},[_c('strong',[_vm._v(_vm._s(data.item.title))]),_vm._v(" "),_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("readableEventDate")(data.item)))])])]:[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(data.item.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]]}}],null,false,2508131974),model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]]:[(_vm.requiresManualInput)?[_c('v-text-field',{staticClass:"small-input",attrs:{"single-line":""},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]:[(_vm.$vuetify.breakpoint.xsOnly)?[_c('v-select',{staticClass:"small-input",attrs:{"dense":"","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]:[_c('v-autocomplete',{staticClass:"small-input",attrs:{"dense":"","loading":_vm.loadingValues,"items":_vm.cleanedValueSelection},model:{value:(_vm.model.value),callback:function ($$v) {_vm.$set(_vm.model, "value", $$v);},expression:"model.value"}})]]]],2)]:_vm._e()],2),_vm._v(" "),(_vm.hasSubFields)?[(_vm.model.criteria && _vm.model.criteria.length)?_c('div',{staticClass:"subfields"},[_c('v-input',{staticClass:"no-flex"},[_c('v-label',[_vm._v(_vm._s(_vm.selector.subfieldTitle))]),_vm._v(" "),_vm._l((_vm.model.criteria),function(criteriaRow,index){return _c('v-layout',[_c('v-flex',[_c('filter-condition-row',{attrs:{"type":_vm.type,"definition":_vm.definition,"fields":_vm.selector.subfields,"mini":_vm.mini},model:{value:(_vm.model.criteria[index]),callback:function ($$v) {_vm.$set(_vm.model.criteria, index, $$v);},expression:"model.criteria[index]"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","flat":"","color":"error","icon":""},on:{"click":function($event){return _vm.removeCriteria(index)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)],1)],1)})],2)],1):_vm._e(),_vm._v(" "),_c('v-btn',{staticClass:"ml-0",attrs:{"small":""},on:{"click":function($event){return _vm.addCriteriaRow()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\tAdd criteria\n\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1)]:_vm._e()],2):_vm._e()};
var __vue_staticRenderFns__$v = [];

  /* style */
  const __vue_inject_styles__$v = function (inject) {
    if (!inject) return
    inject("data-v-4a554aaa_0", { source: ".border-top[data-v-4a554aaa]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-4a554aaa]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-4a554aaa]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-4a554aaa]{border-left:1px solid rgba(0,0,0,.05)}.subfields[data-v-4a554aaa]{border-radius:5px;background:#eee;padding:5px}.filter-condition-row.mini[data-v-4a554aaa] .v-messages{display:none!important}.filter-condition-row.mini[data-v-4a554aaa] .v-select__slot{overflow:hidden}.filter-condition-row.mini[data-v-4a554aaa] .v-select,.filter-condition-row.mini[data-v-4a554aaa] .v-text-field{margin:0;padding:0}.filter-condition-row.mini[data-v-4a554aaa] .v-select .v-label,.filter-condition-row.mini[data-v-4a554aaa] .v-text-field .v-label{font-size:13px}.filter-condition-row.mini[data-v-4a554aaa] .v-select .v-select__slot,.filter-condition-row.mini[data-v-4a554aaa] .v-select .v-text-field__slot,.filter-condition-row.mini[data-v-4a554aaa] .v-text-field .v-select__slot,.filter-condition-row.mini[data-v-4a554aaa] .v-text-field .v-text-field__slot{white-space:nowrap;font-size:13px;padding:0}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$v = "data-v-4a554aaa";
  /* module identifier */
  const __vue_module_identifier__$v = undefined;
  /* functional template */
  const __vue_is_functional_template__$v = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$u = normalizeComponent(
    { render: __vue_render__$v, staticRenderFns: __vue_staticRenderFns__$v },
    __vue_inject_styles__$v,
    __vue_script__$v,
    __vue_scope_id__$v,
    __vue_is_functional_template__$v,
    __vue_module_identifier__$v,
    false,
    createInjector,
    undefined,
    undefined
  );

var FilterConditionRow = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$u
});

//
var DEFAULT_COMPARATOR = 'in'; //'in'; //'=='

function getFlattenedFields(array, trail, titles) {
  return lodash.chain(array).map(function (field, key) {
    var returnValue = []; // console.log('FIELD WOOT', field);
    /////////////////////////////////////////
    //If there are sub fields

    if (field.fields && field.fields.length) {
      if (field.asObject || field.directive == 'embedded') {
        //Push the field itself
        trail.push(field.key);
        titles.push(field.title);
        field.trail = trail.slice();
        field.titles = titles.slice();
        trail.pop();
        titles.pop();
        returnValue.push(field); ///////////////////////////////
        //Prepend the key to all lowed fields

        if (field.maximum != 1) {
          // trail.push(field.key + '[' + indexIterator + ']');
          trail.push(field.key + '[]');
          titles.push(field.title);
        } else {
          trail.push(field.key);
          titles.push(field.title);
        }
      } // console.log('Go down', field.key);


      var fields = getFlattenedFields(field.fields, trail, titles);

      if (field.asObject || field.directive == 'embedded') {
        trail.pop();
        titles.pop();
      } //console.log('Go back up')


      returnValue.push(fields);
    } else {
      /////////////////////////////////////////
      //Push the field key
      trail.push(field.key);
      titles.push(field.title);
      field.trail = trail.slice();
      field.titles = titles.slice();
      trail.pop();
      titles.pop();
      returnValue.push(field);
    } /////////////////////////////////////////


    return returnValue;
  }).flattenDeep().value();
}

var script$w = {
  props: {
    filterFields: {
      type: Array,

      default() {
        return [];
      }

    },
    useSample: {
      type: Boolean
    },
    type: {
      type: String
    },
    fields: {
      type: Array,

      default() {
        return [];
      }

    },
    mini: {
      type: Boolean
    },
    rows: {
      type: Array
    },
    // columns: {
    //     type: Array,
    // },
    'value': {
      type: Object,
      required: true,

      default() {
        return {
          guid: this.$fluro.utils.guid(),
          operator: 'and',
          filters: []
        };
      }

    },
    'debounce': {
      type: Number,
      default: 500
    },
    limit: {
      type: Boolean
    }
  },

  data() {
    var self = this; // var clone = this.value; 

    var clone = JSON.parse(JSON.stringify(this.value));

    if (!clone.filters) {
      clone.filters = [];
    }

    lodash.each(clone.filters, function (filter) {
      filter.guid = self.$fluro.utils.guid();
    });

    return {
      model: clone,
      debounced: null,
      operatorOptions: [{
        text: 'All',
        value: 'and'
      }, {
        text: 'Any',
        value: 'or'
      }, {
        text: 'All',
        value: 'and'
      }],
      asyncKeys: [],
      loadingKeys: false
    };
  },

  // beforeCreate: function() {
  //     this.$options.components.FilterConditionRow = require('src/components/form/filters/FilterConditionRow.vue').default;
  //     this.$options.components.FilterConditionGroup = require('src/components/form/filters/FilterConditionGroup.vue').default;
  // },
  created() {
    var self = this; //Get the filters as an array
    // self.$set(self.model, 'filters', self.model.filters.slice())
    ////////////////////////////////////////////////

    self.debounced = lodash.debounce(function () {
      // self.model = self.words;
      // console.log('FILTER GROUP CHANGED')
      self.$emit('input', self.model);
    }, self.debounce); // this.retrieveKeys();
  },

  components: {
    FilterConditionRow: __vue_component__$u // FilterConditionGroup,

  },
  methods: {
    operatingWord(group, i) {
      if (i) {
        return group.operator;
      } else {
        switch (group.operator) {
          case 'nor':
            return 'Not';

          default:
            return 'Where';
        }
      }
    },

    addRule(group) {
      group.filters.push({
        operator: 'and',
        guid: this.$fluro.utils.guid(),
        filters: [{
          comparator: DEFAULT_COMPARATOR
        }]
      });
    },

    addCondition(group) {
      group.filters.push({
        guid: this.$fluro.utils.guid(),
        comparator: DEFAULT_COMPARATOR
      });
    },

    duplicateEntry(group, i) {
      var newEntry = JSON.parse(JSON.stringify(group.filters[i]));
      newEntry.guid = this.$fluro.utils.guid();
      group.filters.splice(i, 0, newEntry);
    },

    removeEntry(group, i) {
      this.$delete(group.filters, i);
      var length = group.filters.length;

      if (length < 2) {
        // console.log('Set to AND')
        this.$set(group, 'operator', 'and');
      } // group.filters.splice(i, 1)
      // Vue.set(group, 'filters', group.filters);
      // this.model.filters.splice(index, 1);
      // this.$set(this.model.filters, index, null);//this.model.filters);
      // this.$delete(this.model.filters, index)
      // this.$set(this.model, 'filters', this.model.filters.slice())
      // var index = this.model.filters.indexOf(filter);
      // this.model.filters.splice(index, 1);

    },

    retrieveKeys() {
      var self = this; ////////////////////////////////////
      //There are no rows

      if (!self.rows || !self.rows.length) {
        //console.log('Values > No rows')
        self.asyncKeys = [];
        this.loadingKeys = false;
        return;
      } ////////////////////////////////////
      //Show feedback to the user that we are loading
      //the values for them


      this.loadingKeys = true; //This is the key for our cached request

      var cacheKey = self.rowChangeString; ////////////////////////////////////
      //Get the storage cache

      var valueStorageCache = this.$fluro.cache.get('filter-distinct-keys'); ////////////////////////////////////
      //Check to see if there is already a cached set of values
      //for this query

      var valueCache = valueStorageCache[cacheKey]; ////////////////////////////////////
      //If we haven't already got the values for this request

      if (!valueCache) {
        //Get all the ids
        var subSetIDs = self.$fluro.utils.arrayIDs(self.rows); //We need to make an asynchronous request to the server
        //to find out what values we can filter by

        var options = {}; ///////////////////////////////////////////////////////

        if (self.definition && self.definition.type) {
          options.type = self.definition.type.definitionName;
        } ///////////////////////////////////////////////////////
        //Make the request and cache it


        valueCache = valueStorageCache[cacheKey] = self.$fluro.content.keys(subSetIDs, options);
      } /////////////////////////////////////////////////////////////////
      //When the request is complete


      valueCache.then(function (res) {
        // console.log('Keys!!', res);
        self.asyncKeys = res;
        self.loadingKeys = false;
      }, function (err) {
        // console.log('Error', err);
        self.asyncKeys = [];
        self.loadingKeys = false; //Clear the cache request for next time

        valueStorageCache[cacheKey] = null;
      });
    }

  },
  asyncComputed: {
    eventRealms: {
      default: [],

      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        }

        return new Promise(function (resolve, reject) {
          return self.$fluro.access.retrieveSelectableRealms('view', 'event', 'event', {
            flat: true
          }).then(function (realmTypes) {
            var flattened = lodash.reduce(realmTypes, function (set, realmType) {
              set = set.concat(realmType.realms);
              return set;
            }, []); // console.log('FLATTENED', flattened)


            resolve(flattened);
          }).catch(reject);
        });
      }

    },
    eventTracks: {
      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        } ////////////////////////////////////////////////////////


        return new Promise(function (resolve, reject) {
          self.$fluro.api.get('/content/eventtrack', {
            params: {
              fields: ['title', 'definition', 'status'],
              allDefinitions: true
            }
          }).then(function (res) {
            var tracks = lodash.chain(res.data).map(function (track) {
              if (track.status != 'active') {
                return;
              }

              track.definitionTitle = self.$fluro.types.readable(track.definition);
              return track;
            }).compact().value();

            resolve(tracks);
          }).catch(reject);
        });
      }

    },
    groupNames: {
      get() {
        return Promise.resolve([]); // if (!self.isContactType) {
        //     return Promise.resolve([]);
        // }
        // // return new Promise(function(resolve, reject) {
        // return self.$fluro.types.subTypes('interaction')
        // // .then(resolve)
        // // .catch(reject);
        // // })
      }

    },
    interactionTypes: {
      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        } // return new Promise(function(resolve, reject) {


        return self.$fluro.types.subTypes('interaction'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    rosterTypes: {
      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        } // return new Promise(function(resolve, reject) {


        return self.$fluro.types.subTypes('roster'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    eventTypes: {
      get() {
        var self = this;

        if (!self.isContactType) {
          // console.log('Not a contact type')
          return Promise.resolve([]);
        } // return new Promise(function(resolve, reject) {


        return self.$fluro.types.subTypes('event'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    contactTypes: {
      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        } // return new Promise(function(resolve, reject) {


        return self.$fluro.types.subTypes('contact'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    teamTypes: {
      get() {
        var self = this;

        if (!self.isContactType) {
          return Promise.resolve([]);
        } // return new Promise(function(resolve, reject) {


        return self.$fluro.types.subTypes('team'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    processTypes: {
      get() {
        var self = this; // return new Promise(function(resolve, reject) {

        return self.$fluro.types.subTypes('process'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    postTypes: {
      get() {
        var self = this; // return new Promise(function(resolve, reject) {

        return self.$fluro.types.subTypes('post'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    tagTypes: {
      get() {
        var self = this; // return new Promise(function(resolve, reject) {

        return self.$fluro.types.subTypes('tag'); // .then(resolve)
        // .catch(reject);
        // })
      }

    },
    definition: {
      get() {
        var self = this;

        if (!self.type || !self.type.length) {
          return Promise.resolve(null);
        }

        return new Promise(function (resolve, reject) {
          return self.$fluro.types.get(self.type).then(function (definition) {
            return resolve(definition);
          }).catch(reject);
        });
      }

    }
  },
  computed: {
    // rowChangeString() {
    //     return `${this.type}-${_.orderBy(this.$fluro.utils.arrayIDs(this.rows), function(r) {
    //         return r;
    //     }).toString()}`;
    // },
    // 

    /**/
    definitionFields() {
      var self = this;
      return lodash.chain(self.definition).get('definition.fields').map(function (field) {
        return Object.assign({}, field, {
          key: 'data.' + field.key
        });
      }).value();
    },

    typeFields() {
      var self = this;
      return lodash.get(self, 'definition.type.fields') || [];
    },

    detailSheetFields() {
      var self = this;

      if (!self.definition || !self.definition.details || !self.definition.details.length) {
        return [];
      }

      return lodash.reduce(self.definition.details, function (set, detailSheet) {
        // //Get all the flattened fields
        var flattened = getFlattenedFields(detailSheet.fields, [], []); //////////////////////////////////

        var mapped = lodash.chain(flattened).map(function (field) {
          if (field.type == 'group') {
            return;
          }

          return {
            title: detailSheet.title + ' - ' + field.titles.join(' > '),
            // key: `details.${detailSheet.definitionName}.items[0].data.${field.trail.join('.')}`,
            key: `details.${detailSheet.definitionName}.items[].data.${field.trail.join('.')}`,
            minimum: field.minimum,
            maximum: field.maximum,
            detail: detailSheet.definitionName,
            type: field.type
          };
        }).compact().value(); //////////////////////////////////


        return set.concat(mapped);
      }, []);
    },

    isContactType() {
      var self = this;

      if (self.type == 'contact') {
        return true;
      }

      if (self.definition && self.definition.parentType == 'contact') {
        return true;
      }
    },

    availableKeys() {
      var self = this;
      var injectFields = self.filterFields.slice(); /////////////////////////////////////////////

      var postDefinitionOptions = [];
      postDefinitionOptions = postDefinitionOptions.concat(lodash.map(self.postTypes, function (definition) {
        return {
          text: definition.title,
          value: definition.definitionName
        };
      }));
      injectFields.push({
        title: 'Posts and Notes > Total linked posts',
        key: '_posts.all.length',
        maximum: 1,
        minimum: 0,
        type: 'integer',
        subfieldTitle: 'Where post matches...',
        subfields: [{
          title: 'Created Date',
          key: 'created',
          maximum: 1,
          minimum: 0,
          type: 'date'
        }, // {
        //     title: 'Updated Date',
        //     key: 'updated',
        //     maximum: 1,
        //     minimum: 0,
        //     type: 'date',
        // },
        {
          title: 'Realms',
          key: 'realms',
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select',
          _discriminatorDefinition: 'realm'
        }, {
          title: 'Post Type',
          key: 'definition',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: postDefinitionOptions
        }]
      }); /////////////////////////////////////////////

      if (self.isContactType) {
        var eventDefinitionOptions = [];
        var eventTrackOptions = [];
        var rosterDefinitionOptions = [];
        var interactionDefinitionOptions = [];
        var teamDefinitionOptions = [];
        var contactDefinitionOptions = [];
        var groupNameOptions = [];
        groupNameOptions = groupNameOptions.concat(lodash.map(self.groupNames, function (group) {
          return {
            text: group.title,
            value: group.title
          };
        }));
        interactionDefinitionOptions = interactionDefinitionOptions.concat(lodash.map(self.interactionTypes, function (definition) {
          return {
            text: definition.title,
            value: definition.definitionName
          };
        }));
        rosterDefinitionOptions = rosterDefinitionOptions.concat(lodash.map(self.rosterTypes, function (definition) {
          return {
            text: definition.title,
            value: definition.definitionName
          };
        }));
        eventTrackOptions = eventTrackOptions.concat(lodash.map(self.eventTracks, function (track) {
          return {
            text: track.title,
            value: track._id
          };
        }));
        eventDefinitionOptions = eventDefinitionOptions.concat(lodash.map(self.eventTypes, function (definition) {
          return {
            name: definition.title,
            title: definition.title,
            text: definition.title,
            value: definition.definitionName
          };
        }));
        contactDefinitionOptions = contactDefinitionOptions.concat(lodash.map(self.contactTypes, function (definition) {
          return {
            title: definition.title,
            text: definition.title,
            value: definition.definitionName
          };
        }));
        teamDefinitionOptions = teamDefinitionOptions.concat(lodash.map(self.teamTypes, function (definition) {
          return {
            title: definition.title,
            text: definition.title,
            value: definition.definitionName
          };
        })); ////////////////////////////////////////////////////////

        injectFields.push({
          title: 'Email Address (Primary)',
          key: 'emails[0]',
          maximum: 1,
          minimum: 0,
          type: 'email'
        });
        injectFields.push({
          title: 'Phone Number (Primary)',
          key: 'phoneNumbers[0]',
          maximum: 1,
          minimum: 0,
          type: 'string'
        });
        injectFields.push({
          title: 'Total number of groups',
          key: '_teams.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where group matches...',
          subfields: [{
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, {
            title: 'Tags',
            key: 'tags',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: 'tag' // directive: 'content-select-button',
            // directive: 'select',
            // directive: 'select',
            //_discriminatorDefinition: 'tag',

          }, {
            title: 'Definition',
            key: 'definition',
            maximum: 0,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: teamDefinitionOptions
          }]
        });
        injectFields.push({
          title: 'Total number of tickets',
          key: '_tickets.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where...',
          subfields: [{
            title: 'Event',
            key: 'event',
            maximum: 1,
            minimum: 0,
            type: 'reference',
            typeSelect: 'event'
          }, {
            title: 'Event Date',
            key: 'eventDate',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'Event Type (Definition)',
            key: 'eventDefinition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: eventDefinitionOptions
          }, {
            title: 'Event Track',
            key: 'eventTrack',
            maximum: 1,
            minimum: 0,
            type: 'reference',
            // directive:'select',
            typeSelect: 'eventtrack'
          }, {
            title: 'Ticket Title / Type',
            key: 'title',
            maximum: 1,
            minimum: 0,
            type: 'string'
          }, {
            title: 'Collected',
            key: 'collected',
            maximum: 1,
            minimum: 0,
            type: 'boolean'
          }, {
            title: 'Collected By',
            key: 'collectedBy',
            maximum: 1,
            minimum: 0,
            type: 'string'
          }, {
            title: 'Collection Date',
            key: 'collectionDate',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, {
            title: 'Tags',
            key: 'tags',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: 'tag'
          }, {
            title: 'Definition',
            key: 'definition',
            maximum: 0,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: teamDefinitionOptions
          }]
        });
        injectFields.push({
          title: 'Attendance > Total times checked in',
          // key: '_checkins[]',
          key: '_checkins.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where event matches...',
          subfields: [{
            title: 'Date',
            key: 'startDate',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, // {
          // 				title: 'Event Track',
          // 				key: 'track',
          // 				maximum: 0,
          // 				minimum: 0,
          // 				type: 'reference',
          // 				directive: 'select',
          // 				options: eventTrackOptions,
          // },
          {
            title: 'Event Track',
            key: 'track',
            maximum: 1,
            minimum: 0,
            type: 'reference',
            // directive:'select',
            typeSelect: 'eventtrack'
          }, {
            title: 'Event Type (Definition)',
            key: 'definition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            // options:[{
            // 	name:'Hello',
            // 	value:'there',
            // }],
            options: eventDefinitionOptions
          } // {
          //     title: 'Group / Room name',
          //     key: 'groupNames',
          //     maximum: 0,
          //     minimum: 0,
          //     type: 'string',
          //     directive: 'select',
          //     options: groupNameOptions,
          // },
          ]
        });
        injectFields.push({
          title: 'Rostered Assignments > Total times rostered',
          // key: '_checkins[]',
          key: '_assignments.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where assignment matches...',
          subfields: [{
            title: 'Position',
            key: 'title',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select'
          }, {
            title: 'Confirmation Status',
            key: 'confirmationStatus',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: [{
              value: '',
              name: 'None'
            }, {
              value: 'confirmed',
              name: 'Confirmed'
            }, {
              value: 'denied',
              name: 'Declined'
            }, {
              value: 'unknown',
              name: 'Unknown'
            }]
          }, {
            title: 'Roster Type',
            key: 'rosterDefinition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: rosterDefinitionOptions
          }, {
            title: 'Event Type',
            key: 'eventDefinition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: eventDefinitionOptions
          }, {
            title: 'Date',
            key: 'startDate',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, {
            title: 'Event Track',
            key: 'track',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            options: eventTrackOptions
          }]
        });
        injectFields.push({
          title: 'Forms > Total submissions',
          key: '_interactions.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where submission matches...',
          subfields: [{
            title: 'Submission Date',
            key: 'created',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, {
            title: 'Form',
            key: 'definition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: interactionDefinitionOptions
          }]
        });
        injectFields.push({
          title: 'Mailouts > Total Emails',
          key: '_mailouts.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'That matches criteria...',
          subfields: [{
            title: 'Send Date',
            key: 'date',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, {
            title: 'State',
            key: 'state',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: [{
              text: 'Unopened',
              value: 'sent'
            }, {
              text: 'Opened',
              value: 'open'
            }, {
              text: 'Clicked',
              value: 'click'
            }, {
              text: 'Unsubscribed',
              value: 'unsubscribe'
            }, {
              text: 'Bounced / Failed',
              value: 'error'
            }]
          }, {
            title: 'Mailout Type',
            key: 'mailoutType',
            maximum: 0,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: [{
              text: 'Promotional',
              value: 'promotional'
            }, {
              text: 'Transactional',
              value: 'transactional'
            }]
          }, {
            title: 'Mailout',
            key: '_id',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: 'mailout'
          }]
        });
        injectFields.push({
          title: 'Fluro Login > Access Passes',
          key: '_persona.policies',
          maximum: 1,
          minimum: 0,
          type: 'reference',
          typeSelect: 'policy'
        });
        injectFields.push({
          title: 'Fluro Login > Status',
          key: '_persona.state',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: [{
            text: 'None / No Access',
            value: 'none'
          }, {
            text: 'Awaiting Collection',
            value: 'waiting'
          }, {
            text: 'Connected',
            value: 'connected'
          }]
        }); /////////////////////////////////////////////////////

        injectFields.push({
          title: 'Posts and Notes > Total linked posts to family members',
          key: '_familyPosts.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where post matches...',
          subfields: [{
            title: 'Created Date',
            key: 'created',
            maximum: 1,
            minimum: 0,
            type: 'date'
          }, // {
          //     title: 'Updated Date',
          //     key: 'updated',
          //     maximum: 1,
          //     minimum: 0,
          //     type: 'date',
          // },
          {
            title: 'Realms',
            key: 'realms',
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminatorDefinition: 'realm'
          }, {
            title: 'Post Type',
            key: 'definition',
            maximum: 1,
            minimum: 0,
            type: 'string',
            directive: 'select',
            options: postDefinitionOptions
          }]
        }); /////////////////////////////////////////////////////

        var familyMemberFilters = [{
          title: 'Household Role',
          key: 'householdRole',
          maximum: 1,
          minimum: 0,
          type: 'string'
        }, {
          title: 'Age',
          key: 'age',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        }, {
          title: 'Gender',
          key: 'gender',
          maximum: 1,
          minimum: 0,
          type: 'string'
        }, {
          title: 'Realms',
          key: 'realms',
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select',
          _discriminatorDefinition: 'realm'
        }, // {
        // 				title: 'Tags',
        // 				key: 'tags',
        // 				maximum: 0,
        // 				minimum: 0,
        // 				type: 'reference',
        // 				directive: 'select',
        // 				_discriminatorDefinition: 'tag',
        // },
        {
          title: 'Academic Calendar',
          key: 'academicCalendar',
          maximum: 1,
          minimum: 0,
          type: 'reference',
          typeSelect: 'academic'
        }, {
          title: 'Academic Grade',
          key: 'academicGrade',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select' // typeSelect: 'academicCalendar',

        }, {
          title: 'Status',
          key: 'status',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: [{
            name: 'active',
            value: 'active'
          }, {
            name: 'archived',
            value: 'archived'
          }, {
            name: 'draft',
            value: 'draft'
          }]
        }, {
          title: 'Definition',
          key: 'definition',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: contactDefinitionOptions
        }]; ////////////////////////////////////////////////////////

        lodash.each(self.tagTypes, function (tagType) {
          familyMemberFilters.push({
            title: `${tagType.plural} (Tag)`,
            key: `tags|${tagType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: tagType.definitionName
          });
        });

        injectFields.push({
          title: 'Family Household > Total Number of Family Members',
          key: '_familyMembers.all.length',
          maximum: 1,
          minimum: 0,
          type: 'integer',
          subfieldTitle: 'Where family member matches...',
          subfields: familyMemberFilters
        }); // injectFields.push({
        // 				title: 'Family Members > Number of Family Members',
        // 				key: 'family.items.length',
        // 				maximum: 1,
        // 				minimum: 0,
        // 				type: 'integer',
        // });

        injectFields.push({
          title: 'Family Parents > Number of Parents',
          key: 'family._parents.length',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        });
        injectFields.push({
          title: 'Family Children > Number of Children',
          key: 'family._children.length',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        });
        injectFields.push({
          title: 'Family Parents > Definition',
          key: 'family._parents[]definition',
          maximum: 1,
          minimum: 0,
          type: 'string'
        });
        injectFields.push({
          title: 'Family Children > Definition',
          key: 'family._children[]definition',
          maximum: 1,
          minimum: 0,
          type: 'string'
        });
        injectFields.push({
          title: 'Family Members > Definition',
          key: 'family.items[]definition',
          maximum: 1,
          minimum: 0,
          type: 'string'
        });
        injectFields.push({
          title: 'Family Parents > Of Gender',
          key: 'family._parents[]gender',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: [{
            name: 'Male',
            value: 'male'
          }, {
            name: 'Female',
            value: 'female'
          }, {
            name: 'Unknown',
            value: 'unknown'
          }]
        });
        injectFields.push({
          title: 'Family Members > Of Gender',
          key: 'family.items[]gender',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: [{
            name: 'Male',
            value: 'male'
          }, {
            name: 'Female',
            value: 'female'
          }, {
            name: 'Unknown',
            value: 'unknown'
          }]
        });
        injectFields.push({
          title: 'Family Members > Of Household Role',
          key: 'family.items[]householdRole',
          maximum: 1,
          minimum: 0,
          type: 'string' // directive: 'select',
          // options: [{
          //         name: 'Male',
          //         value: 'male',
          //     },
          //     {
          //         name: 'Female',
          //         value: 'female',
          //     },
          //     {
          //         name: 'Unknown',
          //         value: 'unknown',
          //     },
          // ]

        });
        injectFields.push({
          title: 'Family Children > Of Gender',
          key: 'family._children[]gender',
          maximum: 1,
          minimum: 0,
          type: 'string',
          directive: 'select',
          options: [{
            name: 'Male',
            value: 'male'
          }, {
            name: 'Female',
            value: 'female'
          }, {
            name: 'Unknown',
            value: 'unknown'
          }]
        });
        injectFields.push({
          title: 'Family Children > Of Age',
          key: 'family._children[]age',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        });
        injectFields.push({
          title: 'Family Parents > Of Age',
          key: 'family._parents[]age',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        });
        injectFields.push({
          title: 'Family Members > Of Age',
          key: 'family.items[]age',
          maximum: 1,
          minimum: 0,
          type: 'integer'
        });
        injectFields.push({
          title: `Family Children > Realms`,
          key: `family._children[]realms`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select',
          _discriminatorDefinition: 'realm'
        });
        injectFields.push({
          title: `Family Members > Realms`,
          key: `family.items[]realms`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select',
          _discriminatorDefinition: 'realm'
        });
        injectFields.push({
          title: `Family Parents > Realms`,
          key: `family._parents[]realms`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select',
          _discriminatorDefinition: 'realm'
        }); //////////////////////////////////////////////////////////////

        injectFields.push({
          title: `Assigned position in any active Group/Team`,
          key: '_positions.active',
          maximum: 0,
          minimum: 0,
          type: 'string',
          directive: 'select'
        }); ///////////////////////////////////////////////

        lodash.each(self.teamTypes, function (teamType) {
          injectFields.push({
            title: `Family Members > ${teamType.plural}`,
            key: `family.items[]realms|${teamType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminator: teamType.definitionName,
            _discriminatorType: 'team'
          });
          injectFields.push({
            title: `Family Children > ${teamType.plural}`,
            key: `family._children[]realms|${teamType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminator: teamType.definitionName,
            _discriminatorType: 'team'
          });
          injectFields.push({
            title: `Family Parents > ${teamType.plural}`,
            key: `family._parents[]realms|${teamType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            directive: 'select',
            _discriminator: teamType.definitionName,
            _discriminatorType: 'team'
          });
          injectFields.push({
            title: `Assigned position in ${teamType.plural}`,
            key: `_positions.${teamType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'string',
            directive: 'select'
          });
        }); ///////////////////////////////////////////////


        injectFields.push({
          title: `Family Children > Tags`,
          key: `family._children[]tags`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          typeSelect: 'tag' // directive: 'content-select-button',
          //_discriminatorDefinition: 'tag',

        });
        injectFields.push({
          title: `Family Members > Tags`,
          key: `family.items[]tags`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          typeSelect: 'tag' // directive: 'content-select-button',
          // directive: 'select',
          //_discriminatorDefinition: 'tag',

        });
        injectFields.push({
          title: `Family Parents > Tags`,
          key: `family._parents[]tags`,
          maximum: 0,
          minimum: 0,
          type: 'reference',
          typeSelect: 'tag' // directive: 'select',
          // directive: 'content-select-button',
          //_discriminatorDefinition: 'tag',

        });

        lodash.each(self.tagTypes, function (tagType) {
          injectFields.push({
            title: `Family Children > ${tagType.plural} (Tag)`,
            key: `family._children[]tags|${tagType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: tagType.definitionName // directive: 'select',
            // directive: 'content-select-button',
            // _discriminatorDefinition: tagType.definitionName,

          });
          injectFields.push({
            title: `Family Members > ${tagType.plural} (Tag)`,
            key: `family.items[]tags|${tagType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: tagType.definitionName // directive: 'content-select-button',
            // directive: 'select',
            // _discriminatorDefinition: tagType.definitionName,

          });
          injectFields.push({
            title: `Family Parents > ${tagType.plural} (Tag)`,
            key: `family._parents[]tags|${tagType.definitionName}`,
            maximum: 0,
            minimum: 0,
            type: 'reference',
            typeSelect: tagType.definitionName // directive: 'content-select-button',
            // directive: 'select',
            // _discriminatorDefinition: tagType.definitionName,

          });
        });

        injectFields.push({
          title: 'Family Children > Academic Calendar',
          key: 'family._children[]academicCalendar',
          maximum: 0,
          minimum: 0,
          type: 'reference',
          directive: 'select'
        });
        injectFields.push({
          title: 'Family Children > Academic Grade',
          key: 'family._children[]academicGrade',
          maximum: 0,
          minimum: 0,
          type: 'string',
          directive: 'select'
        }); //////////////////////////////////////////////////////////////

        lodash.each(self.processTypes, function (type) {
          injectFields.push({
            title: `Process > ${type.plural} > In Process`,
            key: `_processes.${type.definitionName}.in`,
            maximum: 0,
            minimum: 0,
            type: 'boolean'
          });
          injectFields.push({
            title: `Process > ${type.plural} > Due Date`,
            key: `_processes.${type.definitionName}.dueDate`,
            maximum: 0,
            minimum: 0,
            type: 'date'
          });
          injectFields.push({
            title: `Process > ${type.plural} > Entered Process`,
            key: `_processes.${type.definitionName}.created`,
            maximum: 0,
            minimum: 0,
            type: 'date'
          });
          injectFields.push({
            title: `Process > ${type.plural} > Last Update`,
            key: `_processes.${type.definitionName}.updated`,
            maximum: 0,
            minimum: 0,
            type: 'date'
          });
          injectFields.push({
            title: `Process > ${type.plural} > Current State`,
            key: `_processes.${type.definitionName}.state`,
            maximum: 0,
            minimum: 0,
            type: 'string'
          });
          injectFields.push({
            title: `Process > ${type.plural} > Status`,
            key: `_processes.${type.definitionName}.processStatus`,
            maximum: 0,
            minimum: 0,
            type: 'string'
          });
        }); //Add the ability to simply check if a definition has values

      } else {
        // var definitionName = _.get(self.definition, 'definitionName');
        switch (self.type) {
          case 'family':
            injectFields.push({
              title: 'Total Number of Family Members',
              key: 'memberCount.total',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Parents / Guardians',
              key: 'memberCount.parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Children',
              key: 'memberCount.child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Active Parents / Guardians',
              key: 'memberCount.active_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Active Children',
              key: 'memberCount.active_child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Archived Parents / Guardians',
              key: 'memberCount.archived_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Total Number of Archived Children',
              key: 'memberCount.archived_child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Active Family Members',
              key: 'memberCount.active',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Archived Family Members',
              key: 'memberCount.archived',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Male Family Members',
              key: 'memberCount.gender_male',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Female Family Members',
              key: 'memberCount.gender_female',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Unknown Gender Family Members',
              key: 'memberCount.gender_unknown',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Female Parents / Guardians',
              key: 'memberCount.gender_female_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Male Parents / Guardians',
              key: 'memberCount.gender_male_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Unknown Gender Parents / Guardians',
              key: 'memberCount.gender_unknown_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Active Female Parents / Guardians',
              key: 'memberCount.gender_female_active_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Active Male Parents / Guardians',
              key: 'memberCount.gender_male_active_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Active Unknown Gender Parents / Guardians',
              key: 'memberCount.gender_unknown_active_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Archived Female Parents / Guardians',
              key: 'memberCount.gender_female_archived_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Archived Male Parents / Guardians',
              key: 'memberCount.gender_male_archived_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Archived Unknown Parents / Guardians',
              key: 'memberCount.gender_unknown_archived_parental',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Female Children',
              key: 'memberCount.gender_female_child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Male Children',
              key: 'memberCount.gender_male_child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            injectFields.push({
              title: 'Number of Unknown Gender Children',
              key: 'memberCount.gender_unknown_child',
              maximum: 1,
              minimum: 0,
              type: 'integer'
            });
            break;

          case 'photo':
            injectFields.push({
              title: `EXIF > Copyright`,
              key: `data.exif.tags.Copyright`,
              maximum: 0,
              minimum: 0,
              type: 'string'
            });
            injectFields.push({
              title: `EXIF > Camera Make`,
              key: `data.exif.tags.Make`,
              maximum: 0,
              minimum: 0,
              type: 'string'
            });
            injectFields.push({
              title: `EXIF > Camera Model`,
              key: `data.exif.tags.Model`,
              maximum: 0,
              minimum: 0,
              type: 'string'
            });
            break;
        }
      } //////////////////////////////////////////////////////////////


      injectFields = injectFields.concat(self.asyncKeys); // console.log('ALL INJECTED', injectFields);

      var fields = FilterService.allKeys(injectFields, self.definition); // console.log('ALL KEY FIELDS', fields);

      return lodash.orderBy(fields, 'title');
    }

  },
  watch: {
    // rowChangeString() {
    //     this.retrieveKeys();
    // },
    value(v) {
      this.model = JSON.parse(JSON.stringify(v));
    },

    'model': {
      handler: function () {
        this.debounced();
      },
      deep: true
    }
  }
};

/* script */
const __vue_script__$w = script$w;

/* template */
var __vue_render__$w = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"filter-group-outer",class:{mini:_vm.mini, large:!_vm.mini}},[_c('v-container',{ref:"element",class:[{'pa-2': _vm.mini}, _vm.model.operator]},[(_vm.model.filters.length > 1)?_c('v-layout',{attrs:{"row":""}},[_c('v-flex',{attrs:{"d-flex":"","align-center":""}},[(_vm.mini)?[_c('div',{staticClass:"description"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMatch\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.operator),expression:"model.operator"}],staticClass:"select-operator",on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.model, "operator", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},[_c('option',{attrs:{"value":"and"}},[_vm._v("all")]),_vm._v(" "),_c('option',{attrs:{"value":"or"}},[_vm._v("any")]),_vm._v(" "),_c('option',{attrs:{"value":"nor"}},[_vm._v("none")])]),_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof these rules\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:[_c('div',{staticClass:"description"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShow items that match\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.operator),expression:"model.operator"}],staticClass:"select-operator",on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.model, "operator", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},[_c('option',{attrs:{"value":"and"}},[_vm._v("all")]),_vm._v(" "),_c('option',{attrs:{"value":"or"}},[_vm._v("any")]),_vm._v(" "),_c('option',{attrs:{"value":"nor"}},[_vm._v("none")])]),_vm._v(" of these conditions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]],2)],1):_vm._e(),_vm._v(" "),_vm._l((_vm.model.filters),function(group,g){return _c('v-layout',{key:group.guid,attrs:{"row":""}},[(_vm.model.filters.length > 1)?_c('div',{staticClass:"operator-column offset ",class:_vm.model.operator,attrs:{"d-flex":"","align-center":""}},[_c('span',{staticClass:"operator",class:[{additional:g}, _vm.model.operator]},[_vm._v(_vm._s(_vm.operatingWord(_vm.model, g)))])]):_vm._e(),_vm._v(" "),_c('v-flex',{staticStyle:{"overflow":"hidden"}},[_c('v-container',{staticClass:"additional filter-group",class:[{'pa-2': _vm.mini}, {'py-2 px-0':!_vm.mini}, group.operator]},[(group.filters)?[_c('v-layout',{attrs:{"row":""}},[_c('v-flex',{attrs:{"d-flex":"","align-center":""}},[(_vm.mini)?[_c('div',{staticClass:"description"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMatches\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('select',{directives:[{name:"model",rawName:"v-model",value:(group.operator),expression:"group.operator"}],staticClass:"select-operator",on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(group, "operator", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},[_c('option',{attrs:{"value":"and"}},[_vm._v("all")]),_vm._v(" "),_c('option',{attrs:{"value":"or"}},[_vm._v("any")]),_vm._v(" "),_c('option',{attrs:{"value":"nor"}},[_vm._v("none")])]),_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof these conditions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:[_c('div',[_c('h4',[_vm._v("Rule "+_vm._s(g+1))]),_vm._v(" "),(group.filters.length > 1)?_c('div',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tShow items that match\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('select',{directives:[{name:"model",rawName:"v-model",value:(group.operator),expression:"group.operator"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(group, "operator", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},[_c('option',{attrs:{"value":"and"}},[_vm._v("All")]),_vm._v(" "),_c('option',{attrs:{"value":"or"}},[_vm._v("Any")]),_vm._v(" "),_c('option',{attrs:{"value":"nor"}},[_vm._v("None")])]),_vm._v(" of these conditions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()])]],2),_vm._v(" "),_c('v-spacer'),_vm._v(" "),(_vm.mini)?[_c('div',{staticClass:"hover",staticStyle:{"white-space":"nowrap"}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","flat":"","icon":"","content":"Duplicate rule","color":"grey"},on:{"click":function($event){return _vm.duplicateEntry(_vm.model, g)}}},[_c('fluro-icon',{attrs:{"icon":"copy"}})],1),_vm._v(" "),_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","flat":"","icon":"","content":"Remove rule","color":"red"},on:{"click":function($event){return _vm.removeEntry(_vm.model, g)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)],1)]:[_c('div',{staticClass:"hover"},[_c('v-btn',{attrs:{"small":"","color":"grey","outline":""},on:{"click":function($event){return _vm.duplicateEntry(_vm.model, g)}}},[_c('span',{staticClass:"btn-label"},[_vm._v("Duplicate")]),_vm._v(" "),_c('fluro-icon',{attrs:{"right":"","icon":"copy"}})],1),_vm._v(" "),_c('v-btn',{attrs:{"small":"","color":"red","outline":""},on:{"click":function($event){return _vm.removeEntry(_vm.model, g)}}},[_c('span',{staticClass:"btn-label"},[_vm._v("Remove")]),_vm._v(" "),_c('fluro-icon',{attrs:{"right":"","icon":"trash-alt"}})],1)],1)]],2),_vm._v(" "),_vm._l((group.filters),function(filter,index){return _c('div',{key:filter.guid},[_c('v-layout',[(group.filters.length > 1)?_c('div',{staticClass:"operator-column",class:[group.operator],attrs:{"d-flex":"","align-center":""}},[_c('span',{staticClass:"operator",class:[{additional:index}, group.operator]},[_vm._v(_vm._s(_vm.operatingWord(group, index)))])]):_vm._e(),_vm._v(" "),_c('v-flex',{staticStyle:{"overflow":"hidden"}},[(_vm.availableKeys.length)?[_c('filter-condition-row',{attrs:{"type":_vm.type,"useSample":_vm.useSample,"rows":_vm.rows,"loadingKeys":_vm.loadingKeys,"definition":_vm.definition,"fields":_vm.availableKeys,"mini":_vm.mini},model:{value:(group.filters[index]),callback:function ($$v) {_vm.$set(group.filters, index, $$v);},expression:"group.filters[index]"}})]:_vm._e()],2),_vm._v(" "),(group.filters.length > 1)?_c('div',[(_vm.mini)?[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","flat":"","color":"error","icon":""},on:{"click":function($event){return _vm.removeEntry(group, index)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)]:[_c('v-btn',{attrs:{"icon":"","small":"","flat":"","color":"error"},on:{"click":function($event){return _vm.removeEntry(group, index)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)]],2):_vm._e()],1)],1)})]:_vm._e(),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",attrs:{"small":""},on:{"click":function($event){return _vm.addCondition(group)}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd Condition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1)],2)],1)],1)}),_vm._v(" "),(!_vm.limit)?_c('v-btn',{staticClass:"mx-0",attrs:{"color":"white"},on:{"click":function($event){return _vm.addRule(_vm.model)}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd "+_vm._s(_vm.model.filters.length ? 'Another' : '')+" Rule\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1):_vm._e()],2)],1)};
var __vue_staticRenderFns__$w = [];

  /* style */
  const __vue_inject_styles__$w = function (inject) {
    if (!inject) return
    inject("data-v-2b4ad37a_0", { source: ".border-top[data-v-2b4ad37a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2b4ad37a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2b4ad37a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2b4ad37a]{border-left:1px solid rgba(0,0,0,.05)}.filter-group-outer .description[data-v-2b4ad37a]{font-size:13px;padding:10px 0}.filter-group-outer .select-operator[data-v-2b4ad37a]{font-size:13px;border:1px solid transparent;background:0 0;text-align:center;appearance:none;display:inline-block}.filter-group-outer .select-operator[data-v-2b4ad37a]:hover{border:1px solid rgba(0,0,0,.1);background:#fff}.filter-group-outer.mini .operator[data-v-2b4ad37a]{font-weight:700;overflow:hidden;text-align:center;text-transform:uppercase;font-size:10px;padding:0 3px;position:absolute;left:50%;transform:translateX(-50%);line-height:20px;height:20px;color:transparent;border:1px solid #fff;background:#4cc650;border-radius:10px;opacity:0}.filter-group-outer.mini .operator.additional[data-v-2b4ad37a]{opacity:1;color:#fff}.filter-group-outer.mini .operator.nor[data-v-2b4ad37a]{background:#333}.filter-group-outer.mini .operator.or[data-v-2b4ad37a]{background:#f0974e}.filter-group-outer.mini .operator-column[data-v-2b4ad37a]{flex:none!important;padding-top:8px;margin-right:8px;width:25px;position:relative}.filter-group-outer.mini .operator-column[data-v-2b4ad37a]:before{content:\"\";border-left:2px solid rgba(0,0,0,.1);display:block;position:absolute;right:50%;height:100%;top:0;bottom:0}.filter-group-outer.mini .operator-column.and[data-v-2b4ad37a]:before{border-left-color:#4cc650}.filter-group-outer.mini .operator-column.nor[data-v-2b4ad37a]:before{border-left-color:#333}.filter-group-outer.mini .operator-column.or[data-v-2b4ad37a]:before{border-left-color:#f0974e}.filter-group-outer.mini .filter-group[data-v-2b4ad37a]{overflow:hidden}.filter-group-outer.mini .filter-group.additional[data-v-2b4ad37a]{border:1px solid #ccc;box-shadow:0 2px 2px rgba(0,0,0,.1);border-radius:5px;background:#fff;margin-bottom:15px}@media (min-width:769px){.filter-group-outer.mini .filter-group .hover[data-v-2b4ad37a]{opacity:0}}.filter-group-outer.mini .filter-group:hover .hover[data-v-2b4ad37a]{opacity:1}.filter-group-outer.large .operator[data-v-2b4ad37a]{font-weight:600;letter-spacing:.05em;text-transform:uppercase;font-size:12px;padding:0 10px;position:absolute;right:30px;line-height:32px;color:transparent}.filter-group-outer.large .operator.additional[data-v-2b4ad37a]{background:#4cc650;color:#fff;border-radius:5px 0 0 5px}.filter-group-outer.large .operator.additional[data-v-2b4ad37a]:after{content:\"\";display:block;border:16px solid transparent;border-left-color:#4cc650;position:absolute;width:32px;height:32px;top:0;right:-32px}.filter-group-outer.large .operator.additional.nor[data-v-2b4ad37a]{background:#333}.filter-group-outer.large .operator.additional.nor[data-v-2b4ad37a]:after{border-left-color:#333}.filter-group-outer.large .operator.additional.or[data-v-2b4ad37a]{background:#f0974e}.filter-group-outer.large .operator.additional.or[data-v-2b4ad37a]:after{border-left-color:#f0974e}.filter-group-outer.large .operator[data-v-2b4ad37a]:before{content:\"\";display:block;background:#4cc650;position:absolute;right:-30px;top:50%;margin-top:-6px;width:12px;height:12px;border-radius:100%;border:1px solid #fff}.filter-group-outer.large .operator.nor[data-v-2b4ad37a]:before{background:#333}.filter-group-outer.large .operator.or[data-v-2b4ad37a]:before{background:#f0974e}.filter-group-outer.large .operator-column[data-v-2b4ad37a]{flex:none!important;padding-top:20px;width:90px;margin-right:25px;position:relative}.filter-group-outer.large .operator-column[data-v-2b4ad37a]:before{content:\"\";border-left:2px solid rgba(0,0,0,.1);display:block;position:absolute;right:5px;height:100%;top:0;bottom:0}.filter-group-outer.large .operator-column.and[data-v-2b4ad37a]:before{border-left-color:#4cc650}.filter-group-outer.large .operator-column.nor[data-v-2b4ad37a]:before{border-left-color:#333}.filter-group-outer.large .operator-column.or[data-v-2b4ad37a]:before{border-left-color:#f0974e}.filter-group-outer.large .filter-group.additional[data-v-2b4ad37a]{border-top:1px solid rgba(0,0,0,.1);padding-top:15px;margin-top:15px}.filter-group-outer.large .filter-group .hover[data-v-2b4ad37a]{opacity:0}.filter-group-outer.large .filter-group:hover .hover[data-v-2b4ad37a]{opacity:1}.filter-group-outer .v-btn.ghost[data-v-2b4ad37a]{border:1px dashed rgba(0,0,0,.5)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$w = "data-v-2b4ad37a";
  /* module identifier */
  const __vue_module_identifier__$w = undefined;
  /* functional template */
  const __vue_is_functional_template__$w = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$v = normalizeComponent(
    { render: __vue_render__$w, staticRenderFns: __vue_staticRenderFns__$w },
    __vue_inject_styles__$w,
    __vue_script__$w,
    __vue_scope_id__$w,
    __vue_is_functional_template__$w,
    __vue_module_identifier__$w,
    false,
    createInjector,
    undefined,
    undefined
  );

var FilterConditionGroup = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$v
});

//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$x = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    },
    'status': {
      type: Boolean,

      default() {
        return false;
      }

    }
  },
  computed: {
    firstLine() {
      var self = this;
      var row = this.row;

      if (row.deployment) {
        return row.deployment;
      }

      if (row.event) {
        if (row.event.startDate) {
          return `${self.$fluro.date.formatDate(row.event.startDate, 'ddd D MMM YYYY - h:mma')} - ${row.event.title}`;
        }

        if (row.event.title) {
          return `${row.event.title}`;
        }
      }

      if (row.firstLine) {
        return row.firstLine;
      }

      if (row.subject) {
        return row.subject;
      }

      if (row.description) {
        return row.description;
      }
    }

  }
};

/* script */
const __vue_script__$x = script$x;

/* template */
var __vue_render__$x = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"title-cell"},[_c('div',{staticClass:"grow"},[_c('strong',[_vm._v(_vm._s(_vm.row.title))]),_vm._v(" "),(_vm.firstLine)?_c('div',{staticClass:"summary"},[_vm._v(_vm._s(_vm.firstLine))]):_vm._e()]),_vm._v(" "),(_vm.status)?_c('div',{staticClass:"shrink"},[(_vm.row.status && _vm.row.status != 'active')?_c('fluro-status-label',{attrs:{"value":_vm.row.status}}):_vm._e()],1):_vm._e()])};
var __vue_staticRenderFns__$x = [];

  /* style */
  const __vue_inject_styles__$x = function (inject) {
    if (!inject) return
    inject("data-v-261aa751_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.title-cell{display:flex;align-items:center}.title-cell .grow{flex:1}.title-cell .status-label{flex:none}.title-cell .summary{font-size:.9em;opacity:.5;max-width:500px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$x = undefined;
  /* module identifier */
  const __vue_module_identifier__$x = undefined;
  /* functional template */
  const __vue_is_functional_template__$x = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$w = normalizeComponent(
    { render: __vue_render__$x, staticRenderFns: __vue_staticRenderFns__$x },
    __vue_inject_styles__$x,
    __vue_script__$x,
    __vue_scope_id__$x,
    __vue_is_functional_template__$x,
    __vue_module_identifier__$x,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
var script$y = {
  props: {
    'context': {
      type: String
    },
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$y = script$y;

/* template */
var __vue_render__$y = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.context == 'print')?_c('div',[_vm._v("\n        "+_vm._s(_vm.data)+"\n    ")]):_c('div',[_c('fluro-status-label',{attrs:{"value":_vm.data}})],1)])};
var __vue_staticRenderFns__$y = [];

  /* style */
  const __vue_inject_styles__$y = undefined;
  /* scoped */
  const __vue_scope_id__$y = undefined;
  /* module identifier */
  const __vue_module_identifier__$y = undefined;
  /* functional template */
  const __vue_is_functional_template__$y = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$x = normalizeComponent(
    { render: __vue_render__$y, staticRenderFns: __vue_staticRenderFns__$y },
    __vue_inject_styles__$y,
    __vue_script__$y,
    __vue_scope_id__$y,
    __vue_is_functional_template__$y,
    __vue_module_identifier__$y,
    false,
    undefined,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$z = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  methods: {
    edit() {
      var self = this;
      self.$fluro.types.terms().then(function (glossary) {
        var match = glossary[self.row.definition];

        if (match) {
          self.$fluro.global.edit(match, true);
        }
      });
    }

  },
  computed: {
    canEdit() {
      return this.$fluro.access.can('edit', 'definition');
    },

    readable() {
      var value = this.data || this.row.definition || this.row._type;
      return this.$fluro.types.readable(value);
    }

  }
};

/* script */
const __vue_script__$z = script$z;

/* template */
var __vue_render__$z = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.canEdit)?_c('span',{staticClass:"clickable",on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.edit()}}},[_vm._v(_vm._s(_vm.readable))]):_c('span',[_vm._v(_vm._s(_vm.readable))])])};
var __vue_staticRenderFns__$z = [];

  /* style */
  const __vue_inject_styles__$z = function (inject) {
    if (!inject) return
    inject("data-v-04553a88_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.clickable{cursor:pointer}.clickable:hover{opacity:.8}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$z = undefined;
  /* module identifier */
  const __vue_module_identifier__$z = undefined;
  /* functional template */
  const __vue_is_functional_template__$z = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$y = normalizeComponent(
    { render: __vue_render__$z, staticRenderFns: __vue_staticRenderFns__$z },
    __vue_inject_styles__$z,
    __vue_script__$z,
    __vue_scope_id__$z,
    __vue_is_functional_template__$z,
    __vue_module_identifier__$z,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
var script$A = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    url() {
      return this.row._type == 'video' ? this.$fluro.asset.posterUrl(this.id, 50) : this.$fluro.asset.imageUrl(this.id, 50);
    },

    id() {
      return this.$fluro.utils.getStringID(this.data);
    }

  }
};

/* script */
const __vue_script__$A = script$A;

/* template */
var __vue_render__$A = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + _vm.url + ")")})})};
var __vue_staticRenderFns__$A = [];

  /* style */
  const __vue_inject_styles__$A = undefined;
  /* scoped */
  const __vue_scope_id__$A = undefined;
  /* module identifier */
  const __vue_module_identifier__$A = undefined;
  /* functional template */
  const __vue_is_functional_template__$A = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$z = normalizeComponent(
    { render: __vue_render__$A, staticRenderFns: __vue_staticRenderFns__$A },
    __vue_inject_styles__$A,
    __vue_script__$A,
    __vue_scope_id__$A,
    __vue_is_functional_template__$A,
    __vue_module_identifier__$A,
    false,
    undefined,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$B = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$B = script$B;

/* template */
var __vue_render__$B = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"image-cell"},[(_vm.row._type == 'image')?[_c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.imageUrl(_vm.row._id, 50)) + ")")})})]:(_vm.row._type == 'event')?[_c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.coverUrl(_vm.row._id, "event", {w:50})) + ")")})})]:(_vm.row._type == 'contact')?[_c('fluro-avatar',{attrs:{"md":"","id":_vm.row._id,"type":_vm.row._type}})]:[_c('div',{staticClass:"icon-avatar"},[_c('fluro-icon',{attrs:{"type":_vm.row._type}})],1)]],2)};
var __vue_staticRenderFns__$B = [];

  /* style */
  const __vue_inject_styles__$B = function (inject) {
    if (!inject) return
    inject("data-v-70bd18c1_0", { source: ".border-top[data-v-70bd18c1]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-70bd18c1]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-70bd18c1]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-70bd18c1]{border-left:1px solid rgba(0,0,0,.05)}.image-cell[data-v-70bd18c1]{text-align:center;width:50px;margin:auto}.image-cell .icon-avatar[data-v-70bd18c1]{width:30px;height:30px;background:rgba(0,0,0,.05);text-align:center;line-height:30px;display:inline-block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$B = "data-v-70bd18c1";
  /* module identifier */
  const __vue_module_identifier__$B = undefined;
  /* functional template */
  const __vue_is_functional_template__$B = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$A = normalizeComponent(
    { render: __vue_render__$B, staticRenderFns: __vue_staticRenderFns__$B },
    __vue_inject_styles__$B,
    __vue_script__$B,
    __vue_scope_id__$B,
    __vue_is_functional_template__$B,
    __vue_module_identifier__$B,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
var script$C = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    readableEventDate() {
      return this.$fluro.date.readableEventDate(this.row);
    }

  }
};

/* script */
const __vue_script__$C = script$C;

/* template */
var __vue_render__$C = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('strong',[_vm._v(_vm._s(_vm.row.title))]),_c('br'),_vm._v(" "),_c('em',{staticClass:"text-muted small"},[_vm._v(_vm._s(_vm.readableEventDate))]),_vm._v(" "),(_vm.row.firstLine)?_c('div',[_c('em',{staticClass:"text-muted small"},[_vm._v(_vm._s(_vm._f("limit")(_vm.row.firstLine,100)))])]):_vm._e(),_vm._v(" "),(_vm.row.rooms && _vm.row.rooms.length)?_c('div',{staticClass:"text-muted small"},[_c('strong',[_vm._v("Rooms:")]),_vm._v(" "),_c('em',[_vm._v(_vm._s(_vm._f("comma")(_vm.row.rooms,'title')))])]):_vm._e()])};
var __vue_staticRenderFns__$C = [];

  /* style */
  const __vue_inject_styles__$C = function (inject) {
    if (!inject) return
    inject("data-v-4ea732f0_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$C = undefined;
  /* module identifier */
  const __vue_module_identifier__$C = undefined;
  /* functional template */
  const __vue_is_functional_template__$C = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$B = normalizeComponent(
    { render: __vue_render__$C, staticRenderFns: __vue_staticRenderFns__$C },
    __vue_inject_styles__$C,
    __vue_script__$C,
    __vue_scope_id__$C,
    __vue_is_functional_template__$C,
    __vue_module_identifier__$C,
    false,
    createInjector,
    undefined,
    undefined
  );

//
/////////////////////////////////////////

var script$D = {
  created() {
    console.log('MODAL THIS', this);
  },

  props: {
    options: {
      type: Object
    }
  },
  components: {
    FilterConditionGroup: __vue_component__$v,
    FluroTabset: __vue_component__$c,
    FluroTab: __vue_component__$b,
    FluroDynamicTable: __vue_component__$p,
    RealmDotCell: __vue_component__$m,
    DateCell: __vue_component__$l,
    TitleCell: __vue_component__$w,
    StatusCell: __vue_component__$x,
    DefinitionCell: __vue_component__$y,
    ThumbnailCell: __vue_component__$z,
    TypeImageCell: __vue_component__$A,
    EventTitleCell: __vue_component__$B
  },
  mixins: [FluroModalMixin, Layout],

  data() {
    var statuses = ['active', 'draft'];
    var basicType = this.$fluro.types.parentType(this.options.type) || this.options.type;

    switch (basicType) {
      case 'plan':
        statuses.push('template');
        break;
    } // console.log('PLAN STATUSES', basicType, statuses)


    var initialFilter = this.options.filter || {
      operator: 'and',
      filters: [{
        operator: 'and',
        filters: [{
          key: 'status',
          comparator: 'in',
          values: statuses
        }]
      }]
    }; /////////////////////////////////////////////
    // console.log('INITIAL FILTER', this.options.filter, initialFilter);

    var defaultFilter = JSON.parse(JSON.stringify(initialFilter)); ///////////////////////////////////////

    return {
      sorted: [],
      rows: [],
      search: '',
      searchFocussed: false,
      showFilters: false,
      filterConfig: defaultFilter,
      selector: this.options.selector
    };
  },

  methods: {
    rowClicked(item) {
      this.selectionManager.toggle(item);
    },

    isSelected(item) {
      return this.selectionManager.isSelected(item);
    },

    //I dont think this is ever used. should probably get rid of it
    toggleRealm(item) {
      return this.selectionManager.toggleRealm(item);
    },

    resetFilter() {
      this.filterConfig = {};
    },

    filteredChanged(rows) {
      this.sorted = rows;
    },

    rowsChanged(rows) {
      this.rows = rows;
    },

    pageChanged(pageNumber) {
      this.$router.push({
        query: Object.assign({}, this.$route.query, {
          page: pageNumber
        })
      });
    },

    sortChanged(sortingDetails) {
      this.$router.replace({
        query: Object.assign({}, this.$route.query, sortingDetails)
      });
    }

  },
  computed: {
    retrieveAllDefinitions() {
      return this.options.allDefinitions || this.selector.allDefinitions;
    },

    // filterConfig() {
    //     var basicFilterConfig = this.filterConfig;
    //     var lockedFilter = this.options.lockFilter;
    //     if (lockedFilter) {
    //         return {
    //             operator: 'and',
    //             filters: [basicFilterConfig, lockedFilter],
    //         }
    //     }
    //     return basicFilterConfig;
    // },
    selectionManager() {
      return this.selector;
    },

    filterChangeString() {
      return FilterService.getFilterChangeString(this.filterConfig);
    },

    filterDebounce() {
      if (this.$vuetify.breakpoint.smAndDown) {
        return 1500;
      } else {
        return 700;
      }
    },

    modalTitle() {
      // console.log('SELECTION MANAGER', this.selectionManager)
      var count = this.selectionManager.selection.length;

      if (!count) {
        return this.options.title ? this.options.title : this.selector.maximum == 1 ? `Select ${this.title}` : `Select ${this.plural}`;
      }

      if (count == 1) {
        return `1 ${this.title} selected`;
      }

      return `${count} ${this.plural} selected`;
    },

    type() {
      return this.options.type || 'node';
    },

    parentType() {
      var parentType = this.$fluro.types.parentType(this.type);
      return parentType;
    },

    title() {
      return this.$fluro.types.readable(this.type, false);
    },

    plural() {
      return this.$fluro.types.readable(this.type, true);
    },

    selection() {
      return this.selectionManager.selection;
    },

    tree() {
      return this.selectionManager.tree;
    },

    loading() {
      return this.selectionManager.loading;
    },

    ids() {
      return this.$fluro.utils.arrayIDs(this.options.items);
    },

    columns() {
      var array = [{
        title: '',
        shrink: true,
        align: "center",
        key: 'realms',
        renderer: __vue_component__$m
      }];

      switch (this.parentType) {
        case 'node':
          array = array.concat([{
            title: '',
            key: '_id',
            renderer: __vue_component__$A,
            shrink: true
          }, {
            title: 'Title',
            key: 'title',
            renderer: __vue_component__$w
          }]);
          break;

        case 'image':
          array = array.concat([{
            title: 'Thumbnail',
            key: '_id',
            renderer: __vue_component__$z
          }, {
            title: 'Title',
            key: 'title',
            renderer: __vue_component__$w
          }, {
            title: 'Width',
            key: 'width',
            sortType: 'number'
          }, {
            title: 'Height',
            key: 'height',
            sortType: 'number'
          }]);
          break;

        case 'event':
          array = array.concat([{
            title: '',
            key: '_id',
            renderer: __vue_component__$A,
            shrink: true
          }, {
            title: 'Title',
            key: 'title',
            renderer: __vue_component__$B,
            additionalFields: ['startDate', 'endDate', 'firstLine']
          }]);
          break;

        default:
          array = array.concat([{
            title: 'Title',
            key: 'title',
            renderer: __vue_component__$w
          }]);
          break;
      }

      array = array.concat([{
        title: 'Definition',
        key: 'definition',
        shrink: true,
        renderer: __vue_component__$y
      }, {
        title: 'Status',
        key: 'status',
        shrink: true,
        renderer: __vue_component__$x
      }, {
        type: 'date',
        title: 'Updated',
        shrink: true,
        key: 'updated',
        renderer: __vue_component__$l,
        sortType: 'date'
      }, {
        type: 'date',
        title: 'Created',
        shrink: true,
        key: 'created',
        renderer: __vue_component__$l,
        sortType: 'date'
      }]);
      return array;
    }

  },
  watch: {
    type() {
      this.filterConfig = JSON.parse(JSON.stringify(defaultFilters));
      this.$router.replace({
        query: Object.assign({}, this.$route.query, {
          filter: JSON.stringify(this.filterConfig)
        })
      });
    },

    filterChangeString() {
      this.$router.replace({
        query: Object.assign({}, this.$route.query, {
          filter: JSON.stringify(this.filterConfig)
        })
      });
    }

  }
};

/* script */
const __vue_script__$D = script$D;

/* template */
var __vue_render__$D = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"content-select-modal"},[(_vm.loading)?_c('flex-column',[_c('v-container',{staticClass:"text-xs-center",attrs:{"fluid":""}},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)],1):[_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',{attrs:{"fluid":"","pa-2":""}},[_c('v-layout',{attrs:{"row":"","align-center":""}},[(_vm.$vuetify.breakpoint.smAndUp)?[_c('v-flex',{attrs:{"shrink":""}},[_c('h5',[_c('fluro-icon',{attrs:{"left":"","type":_vm.type}}),_vm._v(" "+_vm._s(_vm.modalTitle))],1)]),_vm._v(" "),_c('v-spacer')]:_vm._e(),_vm._v(" "),_c('v-flex',[(!_vm.showFilters)?[_c('div',{staticClass:"search",class:{active:_vm.searchFocussed || _vm.search.length}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.search),expression:"search"}],attrs:{"autofocus":_vm.$vuetify.breakpoint.smAndUp,"placeholder":"Search by keyword"},domProps:{"value":(_vm.search)},on:{"focus":function($event){_vm.searchFocussed = true;},"blur":function($event){_vm.searchFocussed = false;},"input":function($event){if($event.target.composing){ return; }_vm.search=$event.target.value;}}}),_vm._v(" "),_c('div',{staticClass:"search-icon",on:{"click":function($event){_vm.search = '';}}},[(_vm.search.length)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"search"}})],1)])]:_vm._e()],2),_vm._v(" "),_c('v-spacer'),_vm._v(" "),(_vm.$vuetify.breakpoint.smAndUp)?_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"my-0",attrs:{"icon":"","small":""},on:{"click":function($event){_vm.showFilters = !_vm.showFilters;}}},[_c('fluro-icon',{attrs:{"icon":"filter"}})],1)],1):_vm._e(),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"my-0 mr-0",attrs:{"color":"primary","small":""},on:{"click":function($event){return _vm.close(_vm.selector.selection)}}},[_vm._v("\n                            Done\n                        ")])],1)],2)],1)],1),_vm._v(" "),_c('flex-column',[_c('v-layout',{attrs:{"fill-height":""}},[_c('flex-column',{staticStyle:{"min-height":"50vh"}},[_c('fluro-dynamic-table',{attrs:{"queryString":false,"enable-actions":false,"allDefinitions":_vm.retrieveAllDefinitions,"searchInheritable":_vm.options.searchInheritable,"filter-config":_vm.filterConfig,"lock-filter":_vm.options.lockFilter,"selection-controller":_vm.selector,"clicked":_vm.rowClicked,"search":_vm.search,"data-type":_vm.type,"columns":_vm.columns},on:{"raw":_vm.rowsChanged,"filtered":_vm.filteredChanged,"page":_vm.pageChanged,"sort":_vm.sortChanged}})],1),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showFilters),expression:"showFilters"}],staticClass:"filter-sidebar scroll-y"},[_c('div',[_c('v-container',{attrs:{"pa-2":""}},[_c('div',{staticClass:"search",class:{active:_vm.searchFocussed || _vm.search.length}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.search),expression:"search"}],attrs:{"placeholder":"Keyword search"},domProps:{"value":(_vm.search)},on:{"focus":function($event){_vm.searchFocussed = true;},"blur":function($event){_vm.searchFocussed = false;},"input":function($event){if($event.target.composing){ return; }_vm.search=$event.target.value;}}}),_vm._v(" "),_c('div',{staticClass:"search-icon",on:{"click":function($event){_vm.search = '';}}},[(_vm.search.length)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"search"}})],1)])]),_vm._v(" "),_c('filter-condition-group',{attrs:{"rows":_vm.rows,"mini":true,"type":_vm.type,"debounce":_vm.filterDebounce},model:{value:(_vm.filterConfig),callback:function ($$v) {_vm.filterConfig=$$v;},expression:"filterConfig"}})],1)])],1)],1)]],2)};
var __vue_staticRenderFns__$D = [];

  /* style */
  const __vue_inject_styles__$D = function (inject) {
    if (!inject) return
    inject("data-v-e4657a80_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.content-select-modal{width:80vw;min-width:300px;max-width:1200px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$D = undefined;
  /* module identifier */
  const __vue_module_identifier__$D = undefined;
  /* functional template */
  const __vue_is_functional_template__$D = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$C = normalizeComponent(
    { render: __vue_render__$D, staticRenderFns: __vue_staticRenderFns__$D },
    __vue_inject_styles__$D,
    __vue_script__$D,
    __vue_scope_id__$D,
    __vue_is_functional_template__$D,
    __vue_module_identifier__$D,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$E = {
  components: {
    draggable,
    FluroContentSelectModal: __vue_component__$C
  },
  mixins: [FluroSelectionMixin],
  props: {
    'template': {
      type: Object
    },
    'success': {
      type: Boolean
    },
    'required': {
      type: Boolean
    },
    'errorMessages': {
      type: Array
    },
    'label': {
      type: String
    },
    'hint': {
      default: '',
      type: String
    },
    'placeholder': {
      type: String
    },
    'value': {
      type: [Array, Object],
      default: function () {
        return [];
      }
    },
    'type': {
      type: String
    },
    'types': {
      type: Array
    },
    'minimum': {
      type: Number,
      default: 0
    },
    'maximum': {
      type: Number,
      default: 0
    },
    'outline': {
      type: Boolean
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    },
    'searchInheritable': {
      type: Boolean,
      default: true
    },
    'allDefinitions': {
      type: Boolean,
      default: true
    },
    'lockFilter': {
      type: Object
    }
  },

  created() {
    this.setInitialValue(this.value);
  },

  // <v-input class="no-flex" :success="success" :label="label" :required="required" :error-messages="errorMessages" :hint="field.description">
  computed: {
    readableSingle() {
      return this.$fluro.types.readable(this.type);
    },

    readablePlural() {
      return this.$fluro.types.readable(this.type, true);
    },

    canCreate() {
      var self = this;
      var type = self.type;

      if (!type) {
        return;
      }

      switch (type) {
        case 'node':
          break;

        default:
          return this.$fluro.access.can('create', type, self.$fluro.types.parentType(type));
      }
    },

    textPlaceholder() {
      var restrictType = this.type ? this.$fluro.types.readable(this.type, true) : 'items';
      return this.placeholder || `Search for ${restrictType}`; //Search for ${this.label || 'items'}`;
    },

    showOutline() {
      return this.outline || this.options.outline;
    },

    limited() {
      return this.model.slice(0, this.listLimit);
    },

    model: {
      get() {
        return this.selection;
      },

      set(array) {
        this.selection = array;
      }

    },

    multiple() {
      return this.maximum != 1;
    },

    total() {
      // if(this.multiple) {
      return this.model.length; // } else {
      // return this.model ? 1 : 0;
      // }
    },

    canAddValue() {
      if (this.maximum) {
        return this.total < this.maximum;
      }

      return true;
    },

    dragOptions() {
      return {
        animation: 200,
        group: "description",
        disabled: false,
        ghostClass: "ghost"
      };
    },

    search: {
      get() {
        return this.terms;
      },

      set: lodash.debounce(function (newValue) {
        this.terms = newValue;
      }, 500)
    }
  },
  methods: {
    editInPlaceEnabled(item) {
      return this.$fluro.access.canEditItem(item) && this.$fluro.global.edit;
    },

    editInPlace(item) {
      var self = this;

      if (self.$fluro.global.edit) {
        self.$fluro.global.edit(item, true).then(function (res) {
          //Update the item with what we know about it now
          lodash.assign(item, res);

          console.log('Updated!', item);
        });
      }
    },

    setInitialValue(initialValue) {
      // var initialValue = this.selection; // || [];
      this.selectionMinimum = this.minimum;
      this.selectionMaximum = this.maximum; // console.log('SET INITIAL VALUE', initialValue, initialValue.length);
      // return
      ////////////////////////
      // if(this.selection == initialValue) {
      //     console.log('No change necessary')
      //     return;
      // }
      // if(this.multiple) {

      if (initialValue) {
        if (lodash.isArray(initialValue) && initialValue.length) {
          //this.selection = initialValue;//.slice();
          this.setSelection(initialValue);
        } else {
          if (initialValue._id || initialValue.length) {
            // console.log('CHECKINT WHAT IS IT', typeof initialValue)
            this.setSelection([initialValue]); //this.selection = [initialValue];
          }
        }
      }
    },

    create() {
      // console.log('SHOW MODAL', this.$fluro.modal)
      var self = this; //////////////////////////////////////

      self.$fluro.global.create(self.type, {
        disableCacheClearOnSave: true,
        template: JSON.parse(JSON.stringify(self.template || {}))
      }, true).then(function (res) {
        self.select(res);
      });
    },

    showModal() {
      var self = this; //////////////////////////////////////

      var promise = self.$fluro.modal({
        component: __vue_component__$C,
        options: {
          selector: self,
          type: self.type,
          minimum: self.minimum,
          maximum: self.maximum,
          allDefinitions: self.allDefinitions,
          searchInheritable: self.searchInheritable,
          lockFilter: self.lockFilter
        }
      }); //////////////////////////////////////
      // promise.then(function(res) {}, function(err) {})
    },

    closeModal() {
      this.dialog = false;
    },

    selected() {
      var self = this; //////////////////////////////////////////

      var newEntries = self.candidates; //If we haven't hit the maximum yet

      if (self.canAddValue) {
        if (self.maximum) {
          var numOpenSlots = self.maximum - self.total;
          newEntries = newEntries.slice(0, numOpenSlots);
        }

        if (newEntries.length) {
          lodash.each(newEntries, function (item) {
            self.select(item);
          });
        }
      } //////////////////////////////////////////
      //Reset the search and clear the candidates


      self.terms = '';
      self.candidates = []; //////////////////////////////////////////
    },

    getActions(item) {
      var self = this;
      var actions = [];
      actions.push({
        title: 'Deselect',
        click: function () {
          return self.deselect(item);
        }
      });
      return actions;
    }

  },
  watch: {
    value(v) {
      var self = this; // console.log('Value changed', v);

      self.setInitialValue(v);
    },

    'terms': function (searchTerms) {
      var self = this;
      self.results = [];

      if (searchTerms && searchTerms.length) {
        self.loading = true;
        var params = {
          allDefinitions: true
        };

        if (self.type) {
          params.types = self.type;
        } // console.log('OPTIONS', this);


        self.$fluro.content.search(searchTerms, params).then(function (results) {
          self.results = results; //_.map(results, 'title');

          self.loading = false;
        }).catch(function (err) {
          self.loading = false;
          self.results = [];
        });
      }
    },
    'model': function () {
      var self = this;

      if (!this.multiple) {
        this.$emit('input', lodash.first(self.model)); //[self.key])
      } else {
        this.$emit('input', self.model);
      }
    },

    minimum(min) {
      console.log('CHANGESSS', min);
      var self = this;
      self.selectionMinimum = min;
    },

    maximum(max) {
      console.log('CHANGESSS', max);
      var self = this;
      self.selectionMaximum = max;
    }

  },

  data() {
    return {
      listLimit: 50,
      actionIndexes: {},
      // selection: [],
      candidates: [],
      results: [],
      terms: '',
      loading: false,
      dialog: false,
      // model: this.value,
      drag: false
    };
  }

};

/* script */
const __vue_script__$E = script$E;

/* template */
var __vue_render__$E = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-content-select",class:{outlined:_vm.showOutline}},[(_vm.model.length)?[(_vm.model.length <= _vm.listLimit)?_c('div',{staticClass:"fluro-content-list"},[_c('list-group',[_c('draggable',_vm._b({on:{"start":function($event){_vm.drag=true;},"end":function($event){_vm.drag=false;}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}},'draggable',_vm.dragOptions,false),_vm._l((_vm.model),function(item,index){return _c('list-group-item',{attrs:{"item":item},on:{"click":function($event){return _vm.$fluro.global.view(item, true)}},scopedSlots:_vm._u([{key:"right",fn:function(){return [_c('v-menu',{attrs:{"left":true,"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0",attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},on),[(_vm.actionIndexes[index])?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]}}],null,true),model:{value:(_vm.actionIndexes[index]),callback:function ($$v) {_vm.$set(_vm.actionIndexes, index, $$v);},expression:"actionIndexes[index]"}},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[(_vm.editInPlaceEnabled(item))?_c('v-list-tile',{on:{"click":function($event){return _vm.editInPlace(item)}}},[_c('v-list-tile-content',[_vm._v("Edit")])],1):_vm._e(),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){return _vm.deselect(item)}}},[_c('v-list-tile-content',[_vm._v("Deselect")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){return _vm.$actions.open([item])}}},[_c('v-list-tile-content',[_vm._v("More Actions")])],1)],1)],1)]},proxy:true}],null,true)})}),1)],1)],1):_c('div',{staticClass:"fluro-content-list"},[_c('list-group',_vm._l((_vm.limited),function(item,index){return _c('list-group-item',{attrs:{"item":item},scopedSlots:_vm._u([{key:"right",fn:function(){return [_c('v-menu',{attrs:{"left":true,"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0",attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},on),[(_vm.actionIndexes[index])?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]}}],null,true),model:{value:(_vm.actionIndexes[index]),callback:function ($$v) {_vm.$set(_vm.actionIndexes, index, $$v);},expression:"actionIndexes[index]"}},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$actions.open([item])}}},[_c('v-list-tile-content',[_vm._v("Actions")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.deselect(item)}}},[_c('v-list-tile-content',[_vm._v("Deselect")])],1)],1)],1)]},proxy:true}],null,true)})}),1)],1)]:_vm._e(),_vm._v(" "),(_vm.canAddValue)?_c('div',{staticClass:"content-select-search-bar"},[_c('div',{staticClass:"content-select-search"},[_c('v-autocomplete',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.hint,"hide-selected":true,"append-icon":"","persistent-hint":true,"placeholder":_vm.textPlaceholder,"return-object":true,"item-text":"title","multiple":true,"loading":_vm.loading,"items":_vm.results,"search-input":_vm.search,"flat":"","hide-no-data":""},on:{"focus":function($event){return _vm.$emit('focus')},"blur":function($event){return _vm.$emit('blur')},"change":function($event){return _vm.selected()},"update:searchInput":function($event){_vm.search=$event;},"update:search-input":function($event){_vm.search=$event;}},scopedSlots:_vm._u([{key:"item",fn:function(ref){
var item = ref.item;
return [_c('v-list-tile-avatar',{staticClass:"text-sm-center"},[(item._type == 'persona')?[_c('fluro-avatar',{attrs:{"id":item._id,"type":"persona"}})]:(item._type == 'contact')?[_c('fluro-avatar',{attrs:{"id":item._id,"type":"contact"}})]:(item._type == 'image')?[_c('fluro-image',{attrs:{"item":item,"spinner":true,"width":40,"height":40}})]:[_c('fluro-icon',{attrs:{"type":item._type}})]],2),_vm._v(" "),_c('v-list-tile-content',[(item._type == 'event')?[_c('v-list-tile-title',{domProps:{"textContent":_vm._s(item.title)}}),_vm._v(" "),_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("readableEventDate")(item)))])]:[_c('v-list-tile-title',{domProps:{"textContent":_vm._s(item.title)}})]],2)]}}],null,false,1067703648),model:{value:(_vm.candidates),callback:function ($$v) {_vm.candidates=$$v;},expression:"candidates"}})],1),_vm._v(" "),_c('div',{staticClass:"content-select-search-buttons"},[(_vm.canCreate)?_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0 mr-1",attrs:{"small":"","content":("Create new " + _vm.readableSingle),"color":"primary","icon":""},on:{"click":function($event){return _vm.create()}}},[_c('fluro-icon',{attrs:{"icon":"plus"}})],1):_vm._e(),_vm._v(" "),_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","content":("Browse for " + _vm.readablePlural),"icon":""},on:{"click":_vm.showModal}},[_c('fluro-icon',{attrs:{"icon":"search"}})],1)],1)]):_vm._e()],2)};
var __vue_staticRenderFns__$E = [];

  /* style */
  const __vue_inject_styles__$E = function (inject) {
    if (!inject) return
    inject("data-v-584448c4_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-content-list{margin-bottom:5px}.fluro-content-select>>>.v-select__selections{padding-top:0!important}.fluro-content-select>>>.v-input__slot{min-height:48px!important}.fluro-content-select>>>.v-input__append-inner,.fluro-content-select>>>.v-input__prepend-inner{margin-top:11px!important}.fluro-content-select>>>.v-text-field--box .v-input__slot{background:rgba(0,0,0,.03)}.fluro-content-select .content-select-search-bar{position:relative}.fluro-content-select .content-select-search-bar .content-select-search-buttons{position:absolute;right:5px;top:10px;display:flex;align-items:center}.fluro-content-select.outlined>>>.v-input__slot{height:60px}.fluro-content-select.outlined>>>.v-input__prepend-inner{margin-top:16px!important}.fluro-content-select.outlined .content-select-search-bar .content-select-search-buttons{top:6px}.fluro-content-select .fluro-content-select-dialog{overflow:hidden;display:flex;flex-direction:column}.fluro-content-select .ghost{opacity:.5}.fluro-content-select .buttons{display:flex;justify-content:center;align-items:center}.fluro-content-select .flip-list-move{transition:transform .5s}.fluro-content-select .no-move{transition:transform 0s}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$E = undefined;
  /* module identifier */
  const __vue_module_identifier__$E = undefined;
  /* functional template */
  const __vue_is_functional_template__$E = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$D = normalizeComponent(
    { render: __vue_render__$E, staticRenderFns: __vue_staticRenderFns__$E },
    __vue_inject_styles__$E,
    __vue_script__$E,
    __vue_scope_id__$E,
    __vue_is_functional_template__$E,
    __vue_module_identifier__$E,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$F = {
  props: {
    'minimum': {
      type: Number,
      default: 0
    },
    'maximum': {
      type: Number,
      default: 0
    },
    'allDefinitions': {
      type: Boolean
    },
    'value': {
      type: Array,
      default: function () {
        return [];
      }
    }
  },

  data() {
    return {
      selectionMinimum: this.minimum,
      selectionMaximum: this.maximum
    };
  },

  created() {
    this.setSelection(this.value);
  },

  mixins: [FluroSelectionMixin],
  watch: {
    minimum(v) {
      this.selectionMinimum = Math.max(parseInt(v), 0);
    },

    maximum(v) {
      var self = this;
      self.selectionMaximum = Math.max(parseInt(v), 0);

      if (self.selectionMaximum) {
        if (self.value.length > self.selectionMaximum) {
          var cropped = self.value.slice(0, self.selectionMaximum);
          self.setSelection(cropped); // console.log('Crop array', cropped)
        }
      }
    },

    'value': function (v) {
      // console.log('SET SELECTION', v);
      //Set the value so update the selection
      this.setSelection(v);
    },
    'selection': function (s) {

      this.$emit('input', s);
    }
  }
};

/* script */
const __vue_script__$F = script$F;

/* template */

  /* style */
  const __vue_inject_styles__$F = undefined;
  /* scoped */
  const __vue_scope_id__$F = undefined;
  /* module identifier */
  const __vue_module_identifier__$F = undefined;
  /* functional template */
  const __vue_is_functional_template__$F = undefined;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$E = normalizeComponent(
    {},
    __vue_inject_styles__$F,
    __vue_script__$F,
    __vue_scope_id__$F,
    __vue_is_functional_template__$F,
    __vue_module_identifier__$F,
    false,
    undefined,
    undefined,
    undefined
  );

//
///////////////////////////////////////////////

var script$G = {
  props: {
    label: {
      type: String
    },
    filter: {
      type: Object,

      default() {
        return {
          operator: 'and',
          filters: [{
            operator: 'and',
            filters: [{
              key: 'status',
              comparator: 'in',
              values: ['active', 'draft']
            }]
          }]
        };
      }

    },
    small: {
      type: Boolean
    },
    block: {
      type: Boolean
    },
    large: {
      type: Boolean
    },
    color: {
      type: String
    },
    searchInheritable: {
      type: Boolean,
      default: true
    },
    allDefinitions: {
      type: Boolean
    },
    singleValue: {
      type: Boolean
    },
    'type': {
      //The type of thing we are selecting realms for
      type: String,

      default() {
        return 'node';
      }

    },
    'minimum': {
      type: Number,
      default: 0
    },
    'maximum': {
      type: Number,
      default: 0
    },
    'value': {// type: [Array, Object],
    }
  },
  computed: {
    selection() {
      return this.selector ? this.selector.selection : [];
    },

    title() {
      return this.$fluro.types.readable(this.type, false);
    },

    plural() {
      return this.$fluro.types.readable(this.type, true);
    },

    selectionSummary() {
      var self = this; ///////////////////////////////////////

      var matchingSelection = lodash.filter(self.selection, function (entry) {
        if (!entry) {
          return;
        }

        if (!self.type || self.type == 'node') {
          return true;
        }

        return entry.definition ? entry.definition == self.type : entry._type == self.type;
      }); ///////////////////////////////////////
      ///////////////////////////////////////


      if (!matchingSelection.length) {
        if (self.label && self.label.length) {
          return self.label;
        } else {
          return self.small ? `Select ${self.plural}` : `Click to select ${self.plural}`;
        }
      } ///////////////////////////////////////


      if (matchingSelection.length > 3) {
        return `${matchingSelection.length} ${self.plural} selected`;
      } ///////////////////////////////////////


      return lodash.map(matchingSelection, 'title').join(', ');
    }

  },

  created() {
    var self = this;
    var SelectionManager = Vue.extend(__vue_component__$E);
    var defaultValue = self.singleValue ? [self.value] : self.value;
    self.selector = new SelectionManager({
      propsData: {
        minimum: self.minimum,
        maximum: self.maximum,
        allDefinitions: self.allDefinitions,
        searchInheritable: self.searchInheritable,
        value: defaultValue
      }
    }); // self.selector.$fluro = self.$fluro;
  },

  data() {
    return {
      selector: null
    };
  },

  watch: {
    minimum(v) {
      this.selector.minimum = v;
    },

    maximum(v) {
      this.selector.maximum = v;
    },

    value(v) {
      //Set the value so update the selection
      this.selector.value = this.singleValue ? [v] : v;
    },

    selection(model) {
      if (this.singleValue) {
        model = lodash.first(model);
      } // console.log('EMIT CHANGE', this.singleValue || 'multiple', model);


      this.$emit('input', model);
    }

  },
  methods: {
    showModal() {
      var self = this; //////////////////////////////////////

      var promise = self.$fluro.modal({
        component: __vue_component__$C,
        options: {
          selector: self.selector,
          type: self.type,
          allDefinitions: self.allDefinitions,
          searchInheritable: self.searchInheritable,
          filter: self.filter
        }
      }); //////////////////////////////////////
    }

  }
};

/* script */
const __vue_script__$G = script$G;

/* template */
var __vue_render__$F = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"content-select-button"},[_c('v-btn',{staticClass:"pill mx-0",attrs:{"small":_vm.small,"large":_vm.large,"color":_vm.color,"block":_vm.block},nativeOn:{"click":function($event){return _vm.showModal($event)}}},[_c('span',[_vm._v(_vm._s(_vm.selectionSummary))])])],1)};
var __vue_staticRenderFns__$F = [];

  /* style */
  const __vue_inject_styles__$G = function (inject) {
    if (!inject) return
    inject("data-v-d08ef0ba_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$G = undefined;
  /* module identifier */
  const __vue_module_identifier__$G = undefined;
  /* functional template */
  const __vue_is_functional_template__$G = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$F = normalizeComponent(
    { render: __vue_render__$F, staticRenderFns: __vue_staticRenderFns__$F },
    __vue_inject_styles__$G,
    __vue_script__$G,
    __vue_scope_id__$G,
    __vue_is_functional_template__$G,
    __vue_module_identifier__$G,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroContentSelectButton = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$F
});

//
const {
  required: required$1,
  minLength: minLength$1,
  maxLength: maxLength$1,
  email: email$1,
  url: url$1
} = validators$1;


var script$H = {
  name: 'fluro-content-form-field',
  components: {
    'color-picker': Chrome,
    draggable,
    // FluroContentForm,
    // FluroContentFormField,
    FluroCompileHtml: __vue_component__$8,
    FluroCurrencyInput: __vue_component__$9,
    // FluroEditor,
    // FluroCodeEditor,
    FluroSignatureField: __vue_component__$a,
    FluroDateTimePicker: __vue_component__$d,
    FluroContentSelect: __vue_component__$D,
    FluroContentSelectButton: __vue_component__$F,
    FluroRealmSelect: __vue_component__$t
  },

  data() {
    return {
      ready: false,
      hasInitialValue: false,
      asyncOptionsLoading: false,
      drag: false,
      test: null,
      modal: false,
      model: this.value,
      // this.value, // this.value, // Vue.observable(this.value), //JSON.parse(JSON.stringify(this.value)),
      // model: this.value,
      proposedValue: null,
      pseudoModel: null,
      color: null,
      //Async searching
      keywords: '',
      results: [],
      loading: false,
      //File Uploads
      files: [],
      cancelTokens: [],
      bytesLoaded: 0,
      bytesTotal: 0,
      uploadState: 'ready'
    };
  },

  watch: {
    'keywords': lodash.debounce(function () {
      var self = this;
      var field = this.field;
      var keywords = self.keywords; //No keywords or we already know

      if (!keywords || !keywords.length) {
        return; // && this.querySelections(val)
      } ////////////////////////////////////////////////////


      if (field.allowedReferences && field.allowedReferences.length) {
        return;
      } ////////////////////////////////////////////////////
      // var search = self.photographerSearch;


      self.loading = true; ////////console.log('Searching', keywords);

      var options = {
        limit: 5,
        select: 'title'
      }; //////////////////////////////

      var restrictToType = lodash.get(field, 'params.restrictType');

      if (restrictToType && restrictToType.length) {
        options.types = [restrictToType];
      } //////////////////////////////
      // self.$fluro.api.get(`/content/contact/search/${search}`, {


      self.$fluro.content.search(keywords, options).then(function (results) {
        self.results = results; //_.map(results, 'title');

        self.loading = false;
      }); // .catch(function(err) {
      //     self.photographers = [];
      //     self.photographerSearching = false;
      //     // self.photographerSearch = '';
      // })
    }, 500),

    expressionDefaultValue(v) {
      //If there is a default value expression
      if (!this.expressions || !this.expressions.defaultValue) {
        return;
      } // //console.log('Set from default expression', this.$v.model.$dirty, this.hasInitialValue, this.field.title, v);
      //If the user has entered data into here
      //Don't make any change


      if (this.$v.model.$dirty || this.hasInitialValue) {
        //console.log(this.field.title, 'is dirty', this.$v.model.$dirty, this.hasInitialValue)
        return;
      }

      v = this.cleanInput(v);
      this.$set(this.model, this.field.key, v); // this.model[this.field.key] = v;

      this.$emit('input', this.model); // this.fieldModel = v;
    },

    expressionValue(v) {
      if (this.expressions && this.expressions.value) {
        v = this.cleanInput(v); // this.fieldModel = v;
        // this.model[this.field.key] = v;

        this.$set(this.model, this.field.key, v);
        this.$emit('input', this.model); // //console.log('Expression Updated value', v)
      } // //Update this field to reconnect with the new model
      // this.model[this.key] = v[this.key];

    },

    value(val) {
      if (this.model != val) {
        // val = this.fixCorruptedData(val);
        // //console.log('SET VALUE OF THING', val);
        //Set the new model
        this.model = val; // this.model = Object.assign({}, val);
        //Clean up any bad input

        this.model[this.field.key] = this.fixCorruptedData(this.model[this.field.key]); //Set the defaults

        this.createDefaults(); // this.$set(this, 'model', val);
        //And reset
        // //console.log('RESET INSIDE VALUE()', this.model != val, this.model, val)

        this.reset();
        this.checkInitialValue();
      }
    } // 'isNew':'checkNew',


  },
  computed: {
    placeholder() {
      var placeholder = this.field.placeholder;

      if (placeholder == undefined || placeholder == null || placeholder == '') {
        return;
      }

      return String(placeholder);
    },

    autoformat() {
      return this.params.autoformat != false;
    },

    isContext() {
      return this.contextField == this.field;
    },

    isNew() {
      return this.field.isNew;
    },

    shouldAutofocus() {
      return this.autofocus || this.params.autofocus;
    },

    customComponent() {
      return this.field.customComponent;
    },

    mobile() {
      return this.$vuetify.breakpoint.xsOnly;
    },

    dynamicDateHint() {
      var self = this;

      if (!self.fieldModel) {
        return;
      }

      if (self.fieldModel == 'DATE_NOW') {
        return 'The date will be stored at the time of action.';
      }

      return `Date will be set to ${self.$fluro.date.formatDate(self.fieldModel, 'dddd D MMM YYYY')}`;
    },

    currentDateOrToday() {
      function isDate(s) {
        if (isNaN(s) && !isNaN(Date.parse(s))) {
          return true;
        } else {
          return false;
        }
      } ////////////////////////////////


      if (isDate(this.fieldModel)) {
        return new Date(this.fieldModel);
      } else {
        return new Date();
      }
    },

    params() {
      return this.field.params || {};
    },

    persistentDescription() {
      var self = this;

      if (self.params.persistentDescription) {
        return true;
      } // switch(this.params) {
      // }

    },

    formModel() {
      return this.parent || this.model;
    },

    minValue() {
      return lodash.get(this, 'field.params.minValue');
    },

    maxValue() {
      return lodash.get(this, 'field.params.maxValue');
    },

    minDate() {
      return lodash.get(this, 'field.params.minDate');
    },

    maxDate() {
      return lodash.get(this, 'field.params.maxDate');
    },

    dateFormat() {
      return 'D MMM YYYY';
    },

    dateHint() {

      if (this.fieldModel) {
        switch (this.field.key) {
          case 'dob':
          case '_dob':
            var years = this.$fluro.date.moment().diff(this.fieldModel, 'years'); // parseInt(self.$fluro.date.moment().format('YYYY')) - parseInt(self.$fluro.date.moment(this.fieldModel).format('YYYY'))

            if (this.model.dobVerified) {
              return `${years} Years old`;
            } else {
              return `${years} Years old`;
            }
        }
      }

      return this.dateFormat;
    },

    dateStringModel: {
      get() {
        if (!this.fieldModel) {
          return null;
        }

        return this.$fluro.date.formatDate(this.fieldModel, 'YYYY-MM-DD');
      },

      set(dateString) {
        if (!dateString) {
          this.fieldModel = null;
          return;
        }

        this.fieldModel = new Date(dateString); //console.log('SET', dateString, this.fieldModel)
        // new Date(dateString);
      }

    },

    formattedDate() {
      var self = this;

      if (self.fieldModel === undefined || self.fieldModel === null || self.fieldModel === '') {
        return;
      }

      return self.fieldModel ? self.$fluro.date.moment(self.fieldModel).format(self.dateFormat) : '';
    },

    // formattedDate() {
    //     return this.$fluro.date.formatDate(this.fieldModel, 'dddd D MMM YYYY');
    // },
    asyncOptionsURL() {
      var self = this;

      switch (self.directive) {
        case 'countryselect':
        case 'countrycodeselect':
          return '/system/countries';
      }
    },

    dragOptions() {
      return {
        animation: 200,
        group: "description",
        disabled: false,
        ghostClass: "ghost"
      };
    },

    params() {
      return this.field.params || {};
    },

    showOutline() {
      return this.outline || this.params.outline || this.options.outline;
    },

    searchInheritable() {
      if (this.field.params && this.field.params.searchInheritable) {
        return this.field.params.searchInheritable;
      }
    },

    allDefinitions() {
      if (this.field.params && this.field.params.allDefinitions) {
        return this.field.params.allDefinitions;
      }
    },

    referenceFilter() {
      if (this.field.params && this.field.params.referenceFilter) {
        return this.field.params.referenceFilter;
      }
    },

    restrictType() {
      if (this.field.params && this.field.params.restrictType) {
        return this.field.params.restrictType;
      }
    },

    fileHint() {
      switch (this.uploadState) {
        case 'uploading':
          return `Uploading...`;

        default:
          return this.field.description;
      }
    },

    success() {
      //If we are wanting to validate success (Change to green)
      if (this.options.validateSuccess) {
        return this.$v.$dirty && !this.$v.$invalid;
      }
    },

    editorOptions() {
      var editorOptions = this.options.editor || this.params.editor || {};

      if (this.params.tokens && this.params.tokens.length) {
        editorOptions.tokens = this.params.tokens;
      }

      return editorOptions;
    },

    multiEditorOptions() {
      return Object.assign({}, this.options.editor, {
        label: ''
      });
    },

    savedTerms() {
      return lodash.get(this.field, 'params.storeCopy');
    },

    syntax() {
      //Code entries
      return lodash.get(this.field, 'params.syntax');
    },

    multiLabel() {
      if (this.multipleInput) {
        if (!this.total) {
          return `Add ${this.title}`;
        } else {
          return `Add another ${this.title}`;
        }
      }

      return this.label;
    },

    displayLabel() {
      if (this.overrideLabel && this.overrideLabel.length) {
        return this.overrideLabel;
      }

      if (!this.showLabel) {
        return;
      }

      var title = this.title || '';

      if (title.length) {
        if (this.required) {
          return `${title} *`;
        } else {
          return title;
        }
      }
    },

    hint() {
      if (this.maximum == 1) {
        return this.field.description;
      }

      if (this.minimum) {
        if (this.total < this.minimum) {
          return `Type and press enter (${this.total} of ${this.minimum} required)`;
        }
      }

      if (this.maximum) {
        return `Type and press enter (Max ${this.maximum})`;
      }

      return `Type and press enter`;
    },

    customContext() {
      var self = this;
      return JSON.parse(JSON.stringify({
        field: self.field,
        model: self.fieldModel,
        data: self.model
      }));
    },

    customTemplate() {
      return this.field.template;
    },

    searchResults() {
      if (this.allowedReferences && this.allowedReferences.length) {
        return this.allowedReferences;
      }

      if (this.allowedValues && this.allowedValues.length) {
        return this.allowedValues;
      }

      return this.results;
    },

    canAddFile() {
      if (this.canAddValue) {
        return true;
      }

      if (this.maximum == 1) {
        if (!this.files || !this.files.length) {
          return true;
        }
      }
    },

    canAddValue() {
      //There is no maximum
      if (this.maximum == 0) {
        return true;
      } //We are under the maximum


      if (this.total < this.maximum) {
        // ////////console.log(this.title, 'is under',this.total, this.maximum)
        return true;
      }

      return false;
    },

    canRemoveValue() {
      if (this.total > this.minimum) {
        return true;
      }
    },

    allowedValues() {
      return this.field.allowedValues;
    },

    allowedReferences() {
      return this.field.allowedReferences;
    },

    defaultValues() {
      if (this.disableDefaults) {
        return [];
      }

      return lodash.compact(this.field.type == 'reference' ? this.defaultReferences : this.field.defaultValues);
    },

    defaultReferences() {
      if (this.disableDefaults) {
        return [];
      }

      return lodash.compact(this.field.defaultReferences);
    },

    attributes() {
      return this.field.attributes;
    },

    sameLine() {
      return this.field.sameLine;
    },

    fieldClass() {
      var classes = []; //Add the renderer class

      classes.push(`fluro-content-form-field-${this.renderer}`);

      if (this.isContext) {
        classes.push('is-context');
      } ////////////////////////////////////////////////


      switch (this.renderer) {
        case 'group':
        case 'embedded':
          if (this.asObject || this.renderer == 'embedded') {
            if (this.multipleInput) {
              classes.push(`multiple-input`);
              classes.push(`multiple-input-values-${this.fieldModel.length}`);
            }
          }

          break;
      } ////////////////////////////////////////////////


      classes.push(this.className); ////////////////////////////////////////////////

      return classes.join(' ');
    },

    groupClass() {
      if (this.type == 'group' || this.type == 'embedded') {
        return `${this.className}`;
      }
    },

    colorModel: {
      get() {
        if (!this.color) {
          this.color = {};
        }

        this.color.hex8 = this.fieldModel ? this.fieldModel : null;
        return this.color;
      },

      set(object) {
        this.color = object;
        this.fieldModel = object ? object.hex8 : '';
      }

    },
    fieldModel: {
      get() {
        var self = this;

        if (self.field.type == 'void') {
          //console.log('Void get nothing')
          return false;
        }

        if (!self.field.key || !self.field.key.length) {
          // //console.log('Field not ready yet')
          return;
        } //Get the value for this field


        var value = self.model[self.field.key];
        return self.cleanOutput(value);
      },

      set(value) {
        var self = this;

        if (self.field.type == 'void') {
          // //console.log('Void set nothing')
          self.$emit('input', self.model);
          return;
        } //Clean the input


        value = self.cleanInput(value); //////////////////////////////////
        //If there is a change

        if (self.model[self.field.key] != value) {
          self.$set(self.model, self.field.key, value); // console.log('Set a new value on the field model', self.fieldModel, value, self.model[self.field.key])

          self.$emit('input', self.model); //self.$forceUpdate();
        } //  else {
        // 				//console.log('Value is already same thing!')
        // 				self.$emit('input', self.model);
        // }
        //////////////////////////////////


        return; //////////////////////////////////
        // //////////////////////////////////
        // // self.model[self.field.key] = value;
        // self.$set(self.model, self.field.key, value);
        // //console.log('VALUE TEST CHANGED', self.field.key, self.fieldModel == value, self.model[self.field.key] == value, self.fieldModel)
        // self.valueChange();
      }

    },

    addLabel() {
      if (this.total) {
        return `Add another ${this.title}`;
      } else {
        return `Add ${this.title}`;
      }
    },

    className() {
      String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
      };

      return (this.field.className || '').replaceAll('col-xs-', 'xs').replaceAll('col-sm-', 'sm').replaceAll('col-md-', 'md').replaceAll('col-lg-', 'lg').replaceAll('col-xl-', 'xl');
    },

    key() {
      return this.field.key;
    },

    asObject() {
      return this.field.asObject;
    },

    fields() {
      return this.field.fields;
    },

    officeUseOnly() {
      return lodash.get(this.field, 'params.disableWebform');
    },

    type() {
      return this.field.type;
    },

    expressions() {
      return this.field.expressions;
    },

    errorTitle() {
      return this.field.title;
    },

    title(force) {
      //Check if 
      if (this.options.labels && this.options.labels.hasOwnProperty(this.key)) {
        return this.options.labels[this.key];
      }

      return this.field.title;
    },

    multipleInput() {
      switch (this.renderer) {
        case 'group':
        case 'embedded':
          //If we are an embedded we are multiple if minimum OR maximum is not 1
          if (this.minimum === 0) {
            return true;
          }

          break;
      } //////////////////////////////


      return this.maximum !== 1; // return this.maximum === 0 || this.maximum > 1;
    },

    countryCodeOptions() {
      var options = lodash.chain(this.asyncOptions).map(function (country) {
        return {
          title: `${country.name} - ${country.alpha2} (${country.countryCallingCodes.join(', ')})`,
          value: country.alpha2
        };
      }).orderBy(function (entry) {
        return entry.title;
      }).value();

      options.unshift({
        title: `United Kingdom - GB (+44)`,
        value: 'GB'
      });
      options.unshift({
        title: `United States - USA (+1)`,
        value: 'US'
      });
      options.unshift({
        title: `Australia - AU (+61)`,
        value: 'AU'
      });
      return options;
    },

    countryOptions() {
      return lodash.map(this.asyncOptions, function (country) {
        return {
          title: country.name,
          value: country.name
        };
      });
    },

    timezoneOptions() {
      var self = this;

      var timezones = lodash.map(self.$fluro.date.timezones(), function (title) {
        return {
          title,
          value: title
        };
      });

      timezones.unshift({
        title: 'None / Default',
        value: null
      });
      return timezones;
    },

    selectOptions() {
      var self = this; ////////////////////////////////////////

      if (!self.field) {
        return [];
      } ////////////////////////////////////////


      if (self.field.options && self.field.options.length) {
        return lodash.map(self.field.options, function (option) {
          option.title = option.title ? option.title : option.name;
          return option;
        });
      } else {
        if (self.allowedValues && self.allowedValues.length) {
          return lodash.chain(self.allowedValues).compact().map(function (option) {
            return {
              name: option,
              value: option,
              title: option
            };
          }).value();
        }
      } ////////////////////////////////////////


      if (self.allowedReferences) {
        return self.allowedReferences;
      } ////////////////////////////////////////


      if (self.asyncOptions && self.asyncOptions.length) {
        return self.asyncOptions;
      } ////////////////////////////////////////


      return [];
    },

    minimum() {
      return Math.max(parseInt(this.field.minimum), 0);
    },

    maximum() {
      return parseInt(this.field.maximum);
    },

    total() {
      if (this.multipleInput && this.fieldModel) {
        var total = lodash.get(this.fieldModel, 'length'); // ////////console.log('COUNT>', this.title, total);


        return total;
      }
    },

    askCount() {
      return Math.max(this.minimum, this.field.askCount);
    },

    errorMessages() {
      // //console.log('Compile errors', this.title, this.$v.model.$dirty);
      var self = this;
      const errors = []; // return ['Errors on purpose'];

      if (self.type == 'void') {
        return errors;
      }

      if (self.type == 'group' && !self.asObject) {
        return errors;
      }

      if (!self.isVisible) {
        // //console.log('No errors', this.field.title);
        return errors;
      } // return ['Errors on purpose'];
      //Hasn't been touched yet


      if (!this.$v.model.$dirty) {
        // //console.log('Not dirty', this.title)
        return errors;
      }

      if (!this.$v.uploading) {
        if (self.uploadState == 'uploading') {
          errors.push('Waiting for files to upload');
          return errors;
        }
      } ////////////////////////////////////////////
      //If the value requires a certain amount of answers


      if (!this.$v.model.validateInput) {
        if (this.proposedValue) {
          lodash.each(checkValidInput(self, this.proposedValue), function (err) {
            errors.push(err);
          });
        } //Include any errors for invalid or bad input


        lodash.each(checkValidInput(this, self.fieldModel), function (err) {
          errors.push(err);
        }); ///////////////////////////////////////////


        var valueType = 'answer';

        if (self.directive == 'upload') {
          valueType = 'file';
        } ///////////////////////////////////////////
        //If we require a set amount of answers


        if (this.minimum == this.maximum) {
          //If there is a minimum
          if (this.minimum) {
            //If it's one
            if (this.minimum == 1) {
              errors.push('This field is required');
            } else {
              //If its more than 1
              errors.push(`Please provide ${this.minimum} ${valueType}s`);
            }
          }
        } else {
          //We require one ${valueType}
          if (this.maximum == 1) {
            errors.push('This field is required');
          } else {
            var isArray = Array.isArray(this.model[this.key]);

            if (!isArray) {
              errors.push(`Requires at least ${this.minimum} ${valueType}s`);
            } //Get how many ${valueType}s were provided


            var numberOfAnswersProvided = (this.model[this.key] || '').length; //If not enough to meet the minimum were provided

            if (numberOfAnswersProvided < this.minimum) {
              //If the minimum required is 1
              if (this.minimum == 1) {
                errors.push(`Requires at least 1 ${valueType}`);
              } else {
                //Provide at least X ${valueType}s
                //
                //console.log('ANSWERS IS', numberOfAnswersProvided, this.minimum, this.maximum)
                errors.push(`Please provide at least ${this.minimum} ${valueType}s`);
              }
            } //If we are over the maximum


            if (this.maximum && numberOfAnswersProvided > this.maximum) {
              errors.push(`Maximum ${this.maximum} ${valueType}s`);
            }
          }
        }
      } ///////////////////////////////////////////
      //If there is a custom error message


      if (this.field.errorMessage && this.field.errorMessage.length) {
        if (errors.length) {
          return [this.field.errorMessage];
        }
      } ///////////////////////////////////////////


      return errors;
    },

    prefix() {
      return this.field.prefix;
    },

    suffix() {
      return this.field.suffix;
    },

    directive() {
      switch (this.field.directive) {
        default:
          return this.field.directive;
      }
    },

    renderer() {
      var self = this; //Get the widget defined on the data object

      var dataType = self.type;
      var directive = self.directive; // console.log(this.field.title, directive);
      /////////////////////////////////

      if (self.dynamic) {
        if (dataType == 'date') {
          return 'dynamicdate';
        }
      } /////////////////////////////////


      if (self.context == 'admin') {
        // If we are in the admin panel
        //And we are a reference field
        if (dataType == 'reference') {
          switch (directive) {
            case 'content-select-button':
              return directive;

            case 'select':
              if (self.asyncOptionsURL || self.allowedReferences && self.allowedReferences.length) {
                return 'select';
              } else {
                return 'content-select';
              }

            default:
              return 'content-select';
          }
        }
      } /////////////////////////////////
      /////////////////////////////////
      /////////////////////////////////


      switch (directive) {
        case 'app-menu-select':
        case 'app-page-select':
        case 'app-theme-select':
        case 'app-block-select':
        case 'app-font-select':
        case 'app-size-select':
        case 'app-style-select':
          break;

        case 'value':
          directive = 'value';
          break;

        case 'color':
          directive = 'color';
          break;

        case 'currency':
          directive = 'currency';
          break;

        case 'realm-select':
        case 'realmselect':
          directive = 'realmselect';
          break;

        case 'content-select-button':
          directive = 'content-select-button';
          break;

        case 'dob-select':
        case 'date-select':
        case 'datepicker':
          directive = 'datepicker';
          break;

        case 'time-select':
        case 'timepicker':
          directive = 'timepicker';
          break;

        case 'datetime-select':
        case 'datetimepicker':
          directive = 'datetimepicker';
          break;

        case 'timezone-select':
          directive = 'timezoneselect';
          break;

        case 'country-codeselect':
          directive = 'countrycodeselect';
          break;

        case 'country-select':
          directive = 'countryselect';
          break;

        case 'textarea':
        case 'wysiwyg':
        case 'select':
        case 'embedded':
          break;

        case 'upload':
          switch (self.context) {
            case 'admin':
              directive = 'content-select';
              break;
          }

          break;

        case 'button-select':
        case 'order-select':
          directive = 'select';
          break;

        default:
          switch (dataType) {
            case 'date':
              directive = 'datepicker';
              break;

            case 'group':
              directive = 'group';
              break;

            case 'boolean':
              directive = 'checkbox';
              break;

            case 'number':
            case 'integer':
            case 'decimal':
              directive = 'number';
              break;

            case 'reference':
              directive = 'content-select';
              break;
          }

          break;
      } ////////////////////////////////


      if (!directive) {
        directive = 'input';
      } ////////////////////////////////
      //Return the basic data type by default


      return directive;
    }

  },
  methods: {
    // fieldManualUpdate(data) {
    // 				// //console.log('FIELD UPDATED', this.field.title, data);
    // 				this.$emit('input', this.model);
    // },
    createDefaults() {
      var self = this; ///////////////////////////////////////////////

      var value = self.model[self.field.key]; // //console.log('Create defaults for', self.field.title, value);

      var hasExistingValue = value !== undefined && value !== null && value !== ''; //We already have a value

      if (hasExistingValue) {
        // //console.log(self.field.title, 'ALREADY HAS A VALUE', value)
        return;
      } ///////////////////////////////////////////////


      var multipleInput = self.multipleInput;
      var singleInput = !multipleInput; ////////////////////////////////////////////
      //If we are a group then the fixCorruptedData function
      //will already have created our defaults

      if (self.type == 'group') {
        return;
      } ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      //There are no defaults set for this field


      if (!self.defaultValues || !self.defaultValues.length) {
        // //console.log('NO DEFAULT VALUES FOR', self.field.title)
        return;
      } ////////////////////////////////////////////
      // //console.log('Update defaults', self.field.title, self.defaultValues);
      ////////////////////////////////////////////


      if (singleInput) {
        //Get the first default value
        var defaultValue = lodash.first(self.defaultValues);

        if (defaultValue) {
          //Set our field model default value
          // //console.log('GET DEFAULT VALUE', self.field.key, defaultValue);
          self.$set(self.model, self.field.key, self.cleanInput(defaultValue));
        }
      } else {
        //Add all our default values
        self.$set(self.model, self.field.key, lodash.map(defaultValues, self.cleanInput));
      }
    },

    cleanOutput(value) {
      var self = this; /////////////////////////////////////
      //If there are transform expressions

      if (self.expressions && self.expressions.transform && typeof self.expressions.transform.get == 'function') {
        var transformed = self.expressions.transform.get(value);
        value = transformed;
      } /////////////////////////////////////


      if (self.dynamic && self.renderer == 'dynamicdate') {
        if (value == 'DATE_NOW') {
          return value;
        }

        if (!value) {
          return;
        }

        return new Date(value).toISOString();
      } //////////////////////////////////
      //If we have started with a negative number
      //don't transform until we have the actual number


      if (String(value) == '-') {
        switch (self.field.type) {
          case 'number':
          case 'decimal':
          case 'float':
          case 'integer':
            return value;
        }
      } /////////////////////////////////////


      switch (self.field.type) {
        case 'date':
          if (value) {
            if (String(value).toLowerCase() == 'now') {
              return new Date().toISOString();
            } else {
              return new Date(value);
            }
          }

          break;

        case 'integer':
          if (value != undefined && value != null) {
            if (String(value).length) {
              value = parseInt(value);
            } else {
              value = null;
            }
          }

          break;

        case 'number':
          if (value != undefined && value != null && !isNaN(value)) {
            var changeValue;

            if (String(value).length) {
              changeValue = Number(value); //parseInt(parseFloat(value).toFixed(2)) / 100;
            } else {
              changeValue = null;
            } //If we have to transform the data


            if (parseFloat(value) != parseFloat(changeValue)) {
              value = changeValue;
            }
          }

          break;

        case 'float':
        case 'decimal':
          if (value != undefined && value != null) {
            if (String(value).length) {
              value = Number(value); //parseInt(parseFloat(value).toFixed(2)) / 100;
            } else {
              value = null;
            }
          }

          break;

        case 'boolean':
          if (self.field.inverse) {
            value = !!!value;
          }

          if (!value) {
            value = false;
          }

          break;
      } /////////////////////////////////////
      // //console.log('CLEANED OUTPUT', self.field.title, value)


      return value;
    },

    cleanInput(value) {
      var self = this; //////////////////////////////////

      if (self.expressions && self.expressions.transform) {
        if (typeof self.expressions.transform.set == 'function') {
          var transformed = self.expressions.transform.set(value);
          value = transformed;
        }
      } //////////////////////////////////


      if (self.dynamic && self.renderer == 'dynamicdate') {
        if (value == 'DATE_NOW') {
          return value;
        }

        if (!value) {
          return;
        }

        return new Date(value).toISOString();
      } //////////////////////////////////
      //If we have started with a negative number
      //don't transform until we have the actual number


      if (String(value) == '-') {
        switch (self.field.type) {
          case 'number':
          case 'decimal':
          case 'float':
          case 'integer':
            return value;
        }
      } //////////////////////////////////


      switch (self.field.type) {
        case 'date':
          if (value) {
            if (String(value).toLowerCase() == 'now') {
              value = new Date();
            } else {
              value = new Date(value); //.toISOString();
            }
          }

          break;

        case 'integer':
          if (value != undefined && value != null) {
            if (String(value).length) {
              value = parseInt(value);
            } else {
              value = null;
            }
          }

          break;

        case 'number':
          if (value != undefined && value != null && !isNaN(value)) {
            var changeValue;

            if (String(value).length) {
              changeValue = Number(value); //parseInt(parseFloat(value).toFixed(2)) / 100;
            } else {
              changeValue = null;
            } //If we have to transform the data


            if (parseFloat(value) != parseFloat(changeValue)) {
              value = changeValue;
            }
          }

          break;

        case 'float':
        case 'decimal':
          if (value != undefined && value != null) {
            if (String(value).length) {
              value = Number(value); //parseInt(parseFloat(value).toFixed(2)) / 100;
            } else {
              value = null;
            }
          }

          break;

        case 'boolean':
          if (self.field.inverse) {
            value = !value;
          }

          if (!value) {
            value = false;
          } //Ensure it's a boolean


          value = !!value;
          break;
      } // //console.log('CLEANED INPUT', self.field.title, value)


      return value;
    },

    fixCorruptedData(input) {
      var self = this;
      var output; ////////////////////////////////////////////

      function getPlaceholders() {
        //We need to create an empty array
        var array = []; //Find out our minimum

        var minimumToAsk = Math.max(self.field.minimum || 0, self.field.askCount || 0);

        for (var i = 0; i < minimumToAsk; i++) {
          array.push({});
        } /////////////////////
        //Restrict the maximum limit


        if (self.field.maximum && array.length > self.field.maximum) {
          array.length = self.field.maximum;
        } /////////////////////


        return array;
      } ////////////////////////////////////////////


      var multipleInput = self.multipleInput;

      var isArray = lodash.isArray(input); //We're expecting multiple answers


      if (multipleInput) {
        //But the existing value is not an array
        if (!isArray) {
          switch (self.field.type) {
            case 'reference':
              if (input) {
                //We are an object so insert the object into the array
                output = [input];
              } else {
                if (self.renderer == 'embedded') {
                  output = getPlaceholders();
                }
              }

              break;

            case 'group':
              //We aren't an array but we should be
              if (self.field.asObject) {
                if (input) {
                  //We are an object so insert the object into the array
                  output = [input];
                } else {
                  output = getPlaceholders();
                }
              }

              break;

            case 'void':
              break;

            case 'date':
              // if (input) {
              // 				output = input;
              // } else {
              // 				return;
              // }
              break;

            case 'email':
            case 'url':
            case 'string':
            default:
              //Clean up in case a string has been added instead of an array of strings
              if (input) {
                output = [input];
              } else {
                output = [];
              }

              break;
          }
        }
      } else {
        /////////////////////////////////////////////
        //If it's a date field
        if (self.field.type == 'date') {
          //And we have a value
          if (input) {
            if (lodash.isDate(input)) {
              output = input;
            } else {
              //Convert the value to a date
              output = new Date(input); //console.log('convert to date', typeof input, input)
            }
          }

          return output || input;
        } /////////////////////////////////////////////
        //If this field is a group and it's set to be
        //an object literal


        var fieldIsAGroupObject = self.renderer == 'group' && self.field.asObject;
        var fieldIsAReferenceObject = self.renderer == 'embedded'; /////////////////////////////////////////////

        if (fieldIsAGroupObject || fieldIsAReferenceObject) {
          //Create an object
          //If we are an array of objects
          if (isArray && input[0] && lodash.isObject(input[0])) {
            //Return the first object in the array
            output = input[0];
          } else if (!input) {
            //Create an empty object
            output = {};
          } //Data is already an object
          // if (fieldIsAGroupObject || fieldIsAReferenceObject) {
          // 				//Create an object
          // 				if (self.minimum == 1 && self.maximum == 1) {
          // 								//If we are an array of objects
          // 								if (isArray && input[0] && _.isObject(input[0])) {
          // 												//Return the first object in the array
          // 												output = input[0]
          // 								} else if (!input) {
          // 												//Create an empty object
          // 												output = {};
          // 								} else {
          // 												//Data is already an object
          // 								}
          // 				} else {
          // 								//Create an array for our single item
          // 								if (isArray) {
          // 												//All good
          // 								} else {
          // 												if (input) {
          // 																output = [input];
          // 												} else {
          // 																output = [];
          // 												}
          // 								}
          // 				}

        } else {
          //We're expecting a single answer but the current value is an array
          if (isArray) {
            switch (self.field.type) {
              case 'date':
                output = new Date(lodash.first(input));
                break;

              case 'void':
                break;

              case 'string':
              case 'url':
              case 'email':
              default:
                output = lodash.chain(input).compact().first().value();
                break;
            }
          }
        }
      } //////////////////////////
      //If we had to make adjustments


      if (output) {
        //console.log('fixed corrupted data set', self.field.title, 'from', input, 'to', output);
        //return the cleaned up value
        return output;
      } //////////////////////////
      //Otherwise return the original input


      return input;
    },

    debugSelect($event) {
      var self = this;

      if (self.context == 'builder' && self.recursiveClick) {
        if ($event) {
          $event.preventDefault();
          $event.stopPropagation();
        }

        self.recursiveClick(self);
      }
    },

    checkInitialValue() {
      var self = this;

      if (typeof self.fieldModel == 'undefined' || self.fieldModel == null || self.fieldModel == '') {
        self.hasInitialValue = false;
      } else {
        self.hasInitialValue = true;
      } // //console.log('')

    },

    clear() {
      this.fieldModel = null; //console.log('RESET INSIDE CLEAR()')

      this.reset();
    },

    reset() {
      //console.log('reset field', this.field.title)
      //Clear files
      this.files = [];
      this.$v.$reset();
    },

    removeFile(file) {
      var self = this; //If the file is halfway through uploading

      if (file.cancelToken) {
        //Cancel the file
        file.cancelToken.cancel('Operation canceled by the user.');
      } //////////////////////////////////
      //Remove it from the list


      self.files.splice(self.files.indexOf(file), 1);
      self.mapFilesToValues(); //If it's currently uploading

      if (file.state == 'uploading') {
        self.uploadNextFile();
      }
    },

    filesSelected(list) {
      var self = this; //Mark that we've touched the field

      self.touch();
      if (!list.length) return; /////////////////////////////////////////
      //Update our files list

      var newFiles = lodash.map(list, function (file) {
        return {
          file,
          data: {},
          name: file.name,
          size: file.size
        };
      }); //Update the files


      self.files = lodash.chain(self.files.concat(newFiles)).compact().uniqBy(function (file) {
        return file.name;
      }).value();

      if (self.maximum) {
        self.files = self.files.slice(0, self.maximum); ////console.log('Cropped to', self.files.length);
      } //Clear out the files


      this.$refs.file.value = null;
      return self.uploadNextFile();
    },

    upload(file) {
      var self = this;

      switch (file.state) {
        case 'complete':
        case 'uploading':
          //Stop here if it's already in uploading or complete
          return;
      } /////////////////////////////////////////////
      //Change the state to uploading


      file.state = 'uploading'; //Create a new form object

      var formData = new FormData();
      //Include the tags
      // jsonData.definition = 'photo';
      // jsonData.tags = file.tags;
      //Data
      // var data = file.data || {}
      //Link the photo to the event
      // data.event = self.$route.params.id
      // data.photographer = self.$fluro.utils.getStringID(data.photographer) || null;
      // jsonData.data = data;
      //Include the realms
      // jsonData.realms = this.realms;
      /////////////////////////////////////////////
      //Add the JSON data and the binary file data
      // formData.set('json', JSON.stringify(jsonData));

      formData.append('file', file.file, file.name); /////////////////////////////////////////////

      self.$forceUpdate();
      var body = formData;
      var config = {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: progressEvent => {
          let percentCompleted = Math.floor(progressEvent.loaded * 100 / progressEvent.total); // do whatever you like with the percentage complete
          // maybe dispatch an action that will update a progress bar or something

          file.progress = percentCompleted;
          file.bytesLoaded = progressEvent.loaded;
          file.bytesTotal = progressEvent.total; ///////////////////////////////////////////////////
          //Update the bytes loaded from all the files in the array

          self.bytesLoaded = lodash.reduce(self.files, function (set, file) {
            if (file.state == 'complete') {
              set += file.size || file.bytesTotal || 0;
            } else {
              set += file.bytesLoaded || 0;
            }

            return set;
          }, 0); ///////////////////////////////////////////////////

          self.$forceUpdate();
        }
      }; ///////////////////////////////////////////////////

      const CancelToken = self.$fluro.api.CancelToken;
      const source = CancelToken.source();
      config.cancelToken = source.token;
      file.cancelToken = source; //Set headers to undefined content type

      config.headers = {
        'Content-Type': undefined
      }; ///////////////////////////////////////////////////
      ////console.log('Get the upload realm id', self.field);

      var uploadRealmID = lodash.chain(self.field).get('params.realm').first().value(); ///////////////////////////////////////////////////
      //If there is no Realm


      if (!uploadRealmID) {
        // if there is no realm id, grab the form's realm
        var defaultRealmID = lodash.get(self.options, 'backupUploadRealm');

        if (defaultRealmID) {
          uploadRealmID = defaultRealmID;
        } else {
          //Then there is no backup realm id, so fail here
          file.state = 'error';
          self.uploadNextFile();
        }
      } ///////////////////////////////////////////////////
      //console.log('Uploading to ', uploadRealmID)


      return this.$fluro.api.post(`/file/attach/${uploadRealmID}`, body, config).then(function (res) {
        ////console.log('UPLOAD RESPONSE', res);
        file.state = 'complete';
        file.result = res.data;
        file.attachmentID = res.data._id;
        file.cancelToken = null;
        self.uploadNextFile();
      }).catch(function (err) {
        ////console.log('UPLOAD Error', err);
        file.state = 'error';
        file.cancelToken = null;
        self.uploadNextFile();
      });
    },

    uploadNextFile() {
      var self = this;
      self.uploadState = 'uploading'; ///////////////////////////////////////////
      //Find the next file that can be uploaded

      var nextFile = lodash.find(self.files, function (file) {
        switch (file.state) {
          case 'complete':
          case 'error':
            return;

          default:
            return true;
        }
      }); ///////////////////////////////////////////


      if (nextFile) {
        self.upload(nextFile);
      } else {
        self.uploadState = 'ready';
      } ///////////////////////////////////////////


      self.mapFilesToValues(); ///////////////////////////////////////////
    },

    mapFilesToValues() {
      var self = this;
      var mapField = 'result'; //'attachmentID';

      if (self.multipleInput) {
        self.fieldModel = lodash.map(self.files, mapField);
      } else {
        self.fieldModel = lodash.chain(self.files).first().get(mapField).value();
      } //console.log('MAP FILES TO VALUES', self.field.key, self.field.type);


      self.$forceUpdate();
    },

    resolveExpression(expression) {
      var self = this; //Create a context model

      var context = {
        data: self.parent,
        //self.model,
        interaction: self.parent,
        //self.model,
        model: self.model,
        Math: Math,
        String: String,
        Array: Array,
        Date: Date,
        moment: self.$fluro.date.moment,
        //Include helper function
        matchInArray: this.$fluro.utils.matchInArray
      };
      var ast;
      var result;

      try {
        ast = expressionEval.parse(expression);
        result = expressionEval.eval(ast, context);
      } catch (err) {// //console.log('EXPRESSION', expression, err);
      } finally {
        // //console.log('EXPRESSION RESULT', result, ast, expression, context)
        return result;
      }
    },

    groupTitle(object, index) {
      if (object) {
        if (object.title && object.title.length) {
          return object.title;
        }

        if (object.name && object.name.length) {
          return object.name;
        }

        if (object.firstName) {
          if (object.lastName) {
            return `${object.firstName} ${object.lastName}`;
          }

          return object.firstName;
        }
      }

      return `${this.title} ${index + 1}`;
    },

    includesValue(value) {
      return lodash.includes(this.fieldModel, value);
    },

    addProposedValue() {
      var self = this;
      var proposedValue = this.proposedValue; //Touch the field

      self.touch();

      if (!self.canAddValue) {
        return;
      }

      if (!proposedValue || proposedValue == '') {
        return;
      } ////////////////////////////
      //Check to see if the input is valid


      var errors = checkValidInput(self, proposedValue);

      if (errors.length) {
        ////////console.log('Bad Data!', errors)
        return;
      } ////////////////////////////


      if (!self.includesValue(proposedValue)) {
        self.addValue(proposedValue);
      }

      self.proposedValue = null;
    },

    addValue(value) {
      //console.log('ADD ANOTHER VALUE', value)
      // this.fieldModel.push(value);
      // ////////console.log('Add', this.fieldModel, this.maximum);
      // 
      //THIS WORKS BUT COMPUTED PROPERTIES BELOW DONT
      // if(this.fieldModel.length >= this.maximum) {
      //     return;
      // }
      // this.$set(this.model, this.field.key, [value]);
      if (!this.fieldModel) {
        this.fieldModel = []; //console.log('Create Field Model');
      } // if (this.total < this.maximum) {


      if (this.canAddValue) {
        this.fieldModel.push(value); ////////console.log('ADD VALUE NOW', this.fieldModel)
        // Vue.set(this.fieldModel, this.total, value);

        this.valueChange();
      }
    },

    removeValue(index, forceAllow) {
      //console.log('REMOVE VALUE', index, this.fieldModel)
      if ((this.canRemoveValue || forceAllow) && this.fieldModel) {
        this.fieldModel.splice(index, 1);
        this.valueChange();
      }
    },

    touch() {
      //console.log('touch the field!')
      this.$v.model.$touch();
    },

    clicked($event) {
      this.debugSelect($event);
      this.touch();
    },

    focussed() {
      this.debugSelect();
      this.touch();
    },

    modalFocussed() {
      this.focussed();
      this.modal = true;
    },

    //CADESEARCHBACKHERE
    elementValueChanged(event, setTouched) {
      var self = this;

      if (setTouched) {
        self.touch();
      } // //console.log('ELEMENT VALUE CHANGED', self.field.title, self.field.key)

    },

    valueChange(event, setTouched) {
      var self = this;

      if (setTouched) {
        self.touch();
      }

      return; // // self.model= Object.assign({}, self.model);
      // //If it's a group and not an object then end here so we don't have a recurring loop
      // // if(self.field.type == 'group' && !self.field.asObject) {
      // // 	//console.log('No change', event)
      // // 	return;
      // // }
      // ////////////////////////////////////////////
      // // if (self.field.type == 'reference') {
      // // 				//console.log('EMIT REFERENCE CHANGE', event, self.field.maximum, self.field.directive, self.field.key);
      // // 				//return;
      // // }
      // // //console.log('FIELD VALUE CHANGED', self.field.title, self.field.key, '>>', self.model[self.field.key], self.fieldModel);
      // //console.log('valueChange()', self.field.title, self.model[self.field.key]);
      // self.$emit('input', self.model, self.fieldModel);
      // self.$forceUpdate();
    }

  },

  mounted() {
    var self = this;

    if (self.debugMode && self.field.isNew) {
      // //console.log('SCROLL FIELD INTO VIEW', self.$el);
      self.$nextTick(function () {
        self.$nextTick(function () {
          if (self.$el && self.$el.scrollIntoView) {
            self.$el.scrollIntoView({
              behavior: 'smooth',
              block: 'center'
            }); //Remove the new tag

            self.field.isNew = undefined;
          }
        });
      });
    }
  },

  created() {
    var self = this; //console.log('FIELD IS CREATED', self.field.title)
    ////////////////////////////////////////////
    //Clean up any bad input
    // 

    var cleaned = self.fixCorruptedData(self.model[self.field.key]);

    if (typeof cleaned != typeof self.model[self.field.key] || cleaned != self.model[self.field.key]) {
      self.$set(self.model, self.field.key, cleaned);
    } ////////////////////////////////////////////
    //If we are contained inside a fluro-content-form then
    //add this component to the array


    if (self.formFields) {
      //Add to the form fields
      self.$set(self.formFields, self.formFields.length, self);
    } ///////////////////////////////////////////////
    ///////////////////////////////////////////////


    self.createDefaults();
    return self.checkInitialValue(); ////////////////////////////////////////////
  },

  beforeDestroy() {
    if (this.formFields) {
      this.formFields.splice(this.formFields.indexOf(this), 1);
    }
  },

  props: {
    'debugMode': {
      type: Boolean
    },
    'contextField': {
      type: Object
    },
    'recursiveClick': {
      type: Function
    },
    'disableDefaults': {
      type: Boolean,
      default: false
    },
    'context': {
      type: String,

      default() {
        //By default 
        return this.$fluro.global.defaultFormContext;
      }

    },
    'dynamic': {
      type: Boolean
    },
    'parent': {
      type: Object
    },
    'autofocus': {
      type: Boolean
    },
    'outline': {
      type: Boolean
    },
    'showLabel': {
      type: Boolean,
      default: true
    },
    'overrideLabel': {
      type: String
    },
    'formFields': {
      type: Array
    },
    'field': {
      type: Object
    },
    'value': {
      required: true
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    }
  },
  asyncComputed: {
    asyncOptions: {
      default: [],

      get() {
        var self = this;

        if (!self.asyncOptionsURL || !self.asyncOptionsURL.length) {
          self.asyncOptionsLoading = false;
          return;
        } ///////////////////////////////////////////////


        self.asyncOptionsLoading = true;
        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(self.asyncOptionsURL).then(function (res) {
            // //console.log('RES', res)
            resolve(res.data);
            self.asyncOptionsLoading = false;
          }).catch(function (err) {
            reject(err);
            self.asyncOptionsLoading = false;
          }); // return resolve([{
          //     title:'Woot',
          //     value:'something',
          // }])
        });
      }

    },
    required: {
      default: false,

      get() {
        var self = this;

        if (self.minimum == 1) {
          return Promise.resolve(true);
        }

        if (this.expressionRequired) {
          return Promise.resolve(true);
        }

        return Promise.resolve(false);
      }

    },
    isVisible: {
      get() {
        var isHidden = this.renderer == 'value' || this.expressionHideGroup || this.expressionHide;
        return Promise.resolve(!isHidden);
      }

    },
    expressionValue: {
      get() {
        var self = this; //There is no hidden expression

        if (!self.expressions || !self.expressions.value) {
          return Promise.resolve();
        }

        if (typeof self.expressions.value == 'function') {
          return self.expressions.value();
        } else {
          if (!String(self.expressions.value).length) {
            return Promise.resolve();
          }
        }

        var value = this.resolveExpression(self.expressions.value);
        return Promise.resolve(value);
      }

    },
    expressionDefaultValue: {
      get() {
        var self = this; //There is no hidden expression

        if (!self.expressions || !self.expressions.defaultValue) {
          return Promise.resolve();
        }

        if (typeof self.expressions.defaultValue == 'function') {
          return self.expressions.defaultValue();
        } else {
          if (!String(self.expressions.defaultValue).length) {
            return Promise.resolve();
          }
        }

        var value = this.resolveExpression(self.expressions.defaultValue);
        return Promise.resolve(value);
      }

    },
    expressionRequired: {
      default: false,

      get() {
        var self = this;
        var value = false; //There is no hidden expression

        if (!self.expressions || !self.expressions.required || !self.expressions.required.length) {
          return Promise.resolve(false);
        }

        value = this.resolveExpression(self.expressions.required);
        return Promise.resolve(value);
      }

    },
    expressionHide: {
      default: false,

      get() {
        var self = this;
        var value = false; //There is a show expression

        if (self.expressions && self.expressions.show) {
          //If its a function
          if (typeof self.expressions.show == 'function') {
            //Return the opposite of the show function
            return !self.expressions.show();
          } else {
            var shouldShow = self.resolveExpression(self.expressions.show);
            return Promise.resolve(!shouldShow);
          }
        } ///////////////////////////////////////////////////
        ///////////////////////////////////////////////////
        ///////////////////////////////////////////////////
        //There is no hidden expression


        if (!self.expressions || !self.expressions.hide) {
          return Promise.resolve(false);
        }

        if (typeof self.expressions.hide == 'function') {
          var shouldHide = self.expressions.hide(); // //console.log('SHOULD WE HIDE?', self.field.title, shouldHide)

          return Promise.resolve(shouldHide);
        } else {
          if (!String(self.expressions.hide).length) {
            return Promise.resolve(false);
          }
        } // //There is no hidden expression
        // if (!self.expressions || !self.expressions.hide || !self.expressions.hide.length) {
        //     return Promise.resolve(false);
        // }


        value = this.resolveExpression(self.expressions.hide); // //console.log('RESOLVE', value, self.expressions.hide)

        return Promise.resolve(value);
      }

    },
    expressionHideGroup: {
      default: false,

      get() {
        var self = this;
        var value = false;

        if (!self.field.hideExpression || !self.field.hideExpression.length) {
          return value;
        }

        value = this.resolveExpression(self.field.hideExpression); // self.field.hideExpression, self.model) //err);

        return Promise.resolve(value);
      }

    }
  },
  mixins: [lib_2],
  beforeCreate: function () {
    var self = this;
    Promise.all([service.load('src/components/form/FluroContentForm.vue', function () {
      return Promise.resolve().then(function () { return FluroContentForm; });
    }), service.load('src/components/form/FluroContentFormField.vue', function () {
      return Promise.resolve().then(function () { return FluroContentFormField; });
    }), service.load('src/components/form/FluroEditor.vue', function () {
      return Promise.resolve().then(function () { return FluroEditor; });
    }), service.load('src/components/form/FluroCodeEditor.vue', function () {
      return Promise.resolve().then(function () { return FluroCodeEditor; });
    })]).then(function (results) {
      // //console.log('Set Components', results);
      self.$options.components.FluroContentForm = results[0];
      self.$options.components.FluroContentFormField = results[1];
      self.$options.components.FluroEditor = results[2];
      self.$options.components.FluroCodeEditor = results[3];
      self.ready = true;
    });
  },
  validations: {
    model: {
      validateInput,
      uploading: function (source, vm) {
        if (vm.uploadState == 'uploading') {
          return false;
        } ////console.log('UPLOAD IS VALID', source, vm);


        return true;
      }
    }
  }
}; ////////////////////////////////////////////////////////

/**
 * Check if a numeric input matches the required minimum/maximum values
 * @param  {String|Number} input        The Number to check
 * @param  {Number|Float|Integer} minimumValue The minimum to check
 * @param  {Number|Float|Integer} maximumValue The maximim to check
 * @param  {String} numberType   The type of number to check, 'number','float' or 'integer'
 * @return {String}              The error message (if the number is invalid)
 */

function checkNumericInputError(input, minimumValue, maximumValue, numberType, currency, self) {
  var parseFunction = Number;

  switch (numberType) {
    case 'integer':
      parseFunction = parseInt;
      break;

    case 'float':
    case 'decimal':
      parseFunction = parseFloat;
      break;
  }

  if (typeof input != 'undefined') {
    input = parseFunction(input);
  }

  if (typeof minimumValue != 'undefined') {
    minimumValue = parseFunction(minimumValue);

    if (input < minimumValue) {
      //console.log('MINIMUM', minimumValue, input, input < minimumValue)
      return `Must be at least ${currency && self ? self.$fluro.utils.formatCurrency(maximumValue, currency) : minimumValue}`;
    }
  }

  if (typeof maximumValue != 'undefined') {
    maximumValue = parseFunction(maximumValue);

    if (input > maximumValue) {
      return `Must be less than ${currency && self ? self.$fluro.utils.formatCurrency(maximumValue, currency) : maximumValue}`;
    }
  }
} ////////////////////////////////////////////////////////
//Validate the amount of answers


function validateInput(source, vm) {
  var value = source[this.key];
  var minimum = vm.minimum; //Math.max(parseInt(this.field.minimum), 0);

  var maximum = vm.maximum; //parseInt(this.field.maximum);

  var isArray = Array.isArray(value);

  if (this.proposedValue) {
    var badDataErrors = checkValidInput(vm, this.proposedValue);

    if (badDataErrors.length) {
      return false;
    }
  } //////////////////////
  //There is no minimum


  if (!minimum && !value) {
    //////////console.log('No minimum!')
    return true;
  } //////////////////////
  //We require an answer from here on out
  //Maximum answer of 1


  if (maximum == 1) {
    if (value) {
      //////////console.log(`Required answer was provided`)
      return !checkValidInput(vm, value).length;
    } else {
      //////////console.log('Requires an answer but none provided');
      return false;
    }
  } //////////////////////
  //We need value to be an array at this point


  if (!isArray) {
    //////////console.log(`Requires ${minimum} answer but value is not an array`)
    return false;
  } //////////////////////


  var numberOfAnswersProvided = (value || '').length;

  if (numberOfAnswersProvided < minimum) {
    return false;
  }

  if (numberOfAnswersProvided > maximum) {
    return false;
  }

  var badData = lodash.some(value, function (input) {
    return checkValidInput(vm, input).length;
  });

  if (badData) {
    return false;
  } //////////////////////
  //If we get here then it's valid


  return true;
} //////////////////////////////////////////////


function checkValidInput(self, input) {
  var errors = []; //Now validate the input
  // var input = self.fieldModel;

  var dataType = self.type; //Numeric Validators

  var minimumValue = lodash.get(self.field, 'params.minValue');

  var maximumValue = lodash.get(self.field, 'params.maxValue');

  var currency = self.field.directive == 'currency' ? lodash.get(self.field, 'params.currency') : null; ////////////////////////////////////////

  switch (dataType) {
    case 'email':
      if (self.multipleInput) {
        if (lodash.isArray(input)) {
          var someInvalidEmails = lodash.some(input, function (str) {
            return !email$1(str);
          });

          if (someInvalidEmails) {
            //console.log('Invalid Emails', input)
            errors.push('All emails must be valid', input);
          }
        } else {
          if (!email$1(input) && String(input).length) {
            errors.push('Must be a valid email', input);
          }
        }
      } else {
        if (!email$1(input) && String(input).length) {
          errors.push('Must be a valid email', input);
        }
      }

      break;

    case 'url':
      if (!url$1(input)) {
        errors.push(`Must be a valid url eg. https://...`);
      }

      break;

    case 'boolean':
      if (self.minimum) {
        if (!input) {
          errors.push('This is required');
        }
      }

      break;

    case 'integer':
    case 'decimal':
    case 'float':
    case 'number':
      var numberised = Number(input);
      var isActualNumber = lodash.isFinite(numberised) && !lodash.isNaN(numberised);

      if (!isActualNumber) {
        //console.log('Is not a valid number??', input, numberised)
        errors.push(`${input ? input : ''} is not a valid number!`);
      }

      var numberError = checkNumericInputError(input, minimumValue, maximumValue, dataType, currency, self);

      if (numberError) {
        errors.push(numberError);
      }

      break;
  } ////////////////////////////////////////


  return errors;
}

/* script */
const __vue_script__$H = script$H;

/* template */
var __vue_render__$G = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isVisible)?_c('div',_vm._b({staticClass:"fluro-content-form-field",class:_vm.fieldClass,attrs:{"data-field-key":_vm.key},on:{"click":function($event){return _vm.clicked($event)}}},'div',_vm.attributes,false),[(_vm.ready)?[(_vm.officeUseOnly)?void 0:(_vm.customComponent)?[_c(_vm.customComponent,{tag:"component",model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:(_vm.renderer == 'dynamicdate')?[_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.displayLabel,"persistent-hint":true,"hint":_vm.dynamicDateHint}},[_c('div',{staticStyle:{"margin":"10px 0"}},[_c('v-btn-toggle',{model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}},[_c('v-btn',{attrs:{"flat":"","value":null}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","value":"DATE_NOW"}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDynamic Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-menu',{attrs:{"fixed":true,"min-width":"290px","right":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"flat":"","value":_vm.currentDateOrToday}},on),[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSpecific Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]}}],null,false,4252019594),model:{value:(_vm.modal),callback:function ($$v) {_vm.modal=$$v;},expression:"modal"}},[_vm._v(" "),_c('v-card',[_c('v-date-picker',{attrs:{"attach":"","no-title":"","scrollable":""},on:{"change":function($event){_vm.modal = false;}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}},[_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){_vm.modal = false;}}},[_vm._v("Done")])],1)],1)],1)],1)],1)])]:(_vm.renderer == 'custom')?[_c('fluro-compile-html',{attrs:{"template":_vm.customTemplate,"context":_vm.customContext}})]:(_vm.renderer == 'embedded')?[(!_vm.multipleInput)?[_c('fluro-content-form',{attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"fields":_vm.fields},on:{"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_vm._l((_vm.fieldModel),function(object,index){return _c('v-card',{key:object.guid},[_c('v-toolbar',{staticClass:"elevation-0"},[_c('v-toolbar-title',{staticClass:"hidden-xs"},[_vm._v(_vm._s(_vm.groupTitle(object, index)))]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-toolbar-items',[(_vm.canRemoveValue)?_c('v-btn',{attrs:{"icon":"","small":"","flat":"","color":"error"},on:{"click":function($event){return _vm.removeValue(index)}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1):_vm._e()],1)],1),_vm._v(" "),_c('v-card-text',[_c('fluro-content-form',{attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"fields":_vm.fields},on:{"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})],1)],1)}),_vm._v(" "),(!_vm.fieldModel || !_vm.fieldModel.length)?[(_vm.canAddValue)?_c('v-btn',{staticClass:"ml-0",attrs:{"block":"","large":"","color":"primary"},on:{"click":function($event){return _vm.addValue({})}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.addLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()]:[(_vm.canAddValue)?_c('v-btn',{staticClass:"ml-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.addValue({})}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.addLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()]]]:(_vm.renderer == 'group')?[(_vm.asObject)?[(!_vm.multipleInput)?[_c('fluro-content-form',{attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"fields":_vm.fields},on:{"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_vm._l((_vm.fieldModel),function(object,index){return _c('v-card',{key:object.guid},[_c('v-toolbar',{staticClass:"elevation-0"},[_c('v-toolbar-title',{staticClass:"hidden-xs"},[_vm._v(_vm._s(_vm.groupTitle(object, index)))]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-toolbar-items',[(_vm.canRemoveValue)?_c('v-btn',{attrs:{"small":"","icon":"","flat":"","color":"error"},on:{"click":function($event){return _vm.removeValue(index)}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1):_vm._e()],1)],1),_vm._v(" "),_c('v-card-text',[_c('fluro-content-form',{attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"fields":_vm.fields},on:{"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})],1)],1)}),_vm._v(" "),(!_vm.fieldModel || !_vm.fieldModel.length)?[(_vm.canAddValue)?_c('v-btn',{staticClass:"ml-0",attrs:{"block":"","large":"","color":"primary"},on:{"click":function($event){return _vm.addValue({})}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.addLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()]:[(_vm.canAddValue)?_c('v-btn',{staticClass:"ml-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.addValue({})}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.addLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()]]]:[(_vm.field.sameLine)?[_c('v-layout',{staticClass:"same-line",attrs:{"row":""}},[_vm._l((_vm.fields),function(subfield){return [_c('fluro-content-form-field',{staticClass:"flex",attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"field":subfield},on:{"input":_vm.elementValueChanged},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]})],2)]:[_vm._l((_vm.fields),function(subfield){return [_c('fluro-content-form-field',{staticClass:"flex",attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"parent":_vm.formModel,"form-fields":_vm.formFields,"options":_vm.options,"field":subfield},on:{"input":_vm.elementValueChanged},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]})]]]:(_vm.renderer == 'checkbox')?[(_vm.savedTerms)?_c('div',{staticClass:"terms",class:{'has-error':_vm.errorMessages.length}},[_c('v-checkbox',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"mandatory":_vm.required,"persistent-hint":true,"label":_vm.displayLabel,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"change":function($event){return _vm.elementValueChanged(_vm.event, true)}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}}),_vm._v(" "),_c('div',{staticClass:"conditions"},[_vm._v(_vm._s(_vm.field.params.storeData))])],1):[_c('v-checkbox',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"mandatory":_vm.required,"persistent-hint":true,"label":_vm.displayLabel,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"change":function($event){return _vm.elementValueChanged(_vm.event, true)}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]]:(_vm.renderer == 'number')?[_c('v-text-field',{attrs:{"persistent-hint":_vm.persistentDescription,"suffix":_vm.suffix,"prefix":_vm.prefix,"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"pattern":"^-?(\\d*\\.)?\\d+$;","label":_vm.displayLabel,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'realmselect')?[_c('v-input',{staticClass:"no-flex",attrs:{"persistent-hint":true,"label":_vm.displayLabel,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.field.description}},[_c('fluro-realm-select',{attrs:{"block":"","type":"collection"},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)]:(_vm.renderer == 'datepicker')?[_c('v-menu',{attrs:{"fixed":true,"min-width":"290px","right":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-text-field',_vm._g({attrs:{"outline":_vm.showOutline,"success":_vm.success,"value":_vm.formattedDate,"persistent-hint":true,"hint":_vm.dateHint,"label":_vm.displayLabel,"prepend-inner-icon":"event","readonly":""},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}}},on))]}}],null,false,2936903296),model:{value:(_vm.modal),callback:function ($$v) {_vm.modal=$$v;},expression:"modal"}},[_vm._v(" "),_c('v-card',[_c('v-date-picker',{attrs:{"attach":"","no-title":"","scrollable":""},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()},"change":function($event){_vm.modal = false;}},model:{value:(_vm.dateStringModel),callback:function ($$v) {_vm.dateStringModel=$$v;},expression:"dateStringModel"}},[_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){_vm.modal = false;}}},[_vm._v("Done")])],1)],1)],1)]:(_vm.renderer == 'timepicker')?[_c('v-dialog',{ref:"dialog",attrs:{"persistent":"","return-value":_vm.fieldModel,"lazy":"","full-width":"","width":"290px"},on:{"update:returnValue":function($event){_vm.fieldModel=$event;},"update:return-value":function($event){_vm.fieldModel=$event;}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-text-field',_vm._g({attrs:{"outline":_vm.showOutline,"success":_vm.success,"label":_vm.displayLabel,"prepend-inner-icon":"access_time","readonly":""},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.modalFocussed();}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}},on))]}}],null,false,799680477),model:{value:(_vm.modal),callback:function ($$v) {_vm.modal=$$v;},expression:"modal"}},[_vm._v(" "),(_vm.modal)?_c('v-card',[_c('v-toolbar',{attrs:{"color":"primary","dark":""}},[_c('v-toolbar-title',[_vm._v(_vm._s(_vm.displayLabel))])],1),_vm._v(" "),_c('v-time-picker',{attrs:{"attach":"","full-width":""},model:{value:(_vm.pseudoModel),callback:function ($$v) {_vm.pseudoModel=$$v;},expression:"pseudoModel"}},[_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){_vm.modal = false;}}},[_vm._v("Cancel")]),_vm._v(" "),_c('v-btn',{attrs:{"flat":"","color":"primary"},on:{"click":function($event){return _vm.$refs.dialog.save(_vm.pseudoModel)}}},[_vm._v("OK")])],1)],1):_vm._e()],1)]:(_vm.renderer == 'datetimepicker')?[_c('fluro-date-time-picker',{attrs:{"outline":_vm.showOutline,"min":_vm.minDate,"max":_vm.maxDate,"success":_vm.success,"format":"ddd D MMM - h:mma ","timePickerFormat":"ampm","label":_vm.displayLabel,"placeholder":_vm.placeholder,"hint":_vm.field.description},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.modalFocussed();}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'timezoneselect')?[(_vm.mobile)?[_c('v-select',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.timezoneOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_c('v-autocomplete',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.timezoneOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]]:(_vm.renderer == 'countrycodeselect')?[(_vm.mobile)?[_c('v-select',{attrs:{"persistent-hint":true,"dense":"","outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.countryCodeOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_c('v-autocomplete',{attrs:{"persistent-hint":true,"dense":"","outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.countryCodeOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]]:(_vm.renderer == 'countryselect')?[(_vm.mobile)?[_c('v-autocomplete',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.countryOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_c('v-select',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.countryOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]]:(_vm.renderer == 'select')?[(_vm.mobile || _vm.params.dropdown)?[_c('v-select',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"return-object":_vm.type == 'reference',"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.selectOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:[_c('v-autocomplete',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"return-object":_vm.type == 'reference',"label":_vm.displayLabel,"chips":_vm.multipleInput,"no-data-text":"No options available","multiple":_vm.multipleInput,"item-text":"title","items":_vm.selectOptions,"error-messages":_vm.errorMessages,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]]:(_vm.renderer == 'content-select-button')?[_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.displayLabel,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.field.description}},[_c('fluro-content-select-button',{attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"block":"","recursiveClick":_vm.recursiveClick,"type":_vm.restrictType,"minimum":_vm.minimum,"maximum":_vm.maximum,"searchInheritable":_vm.searchInheritable,"allDefinitions":_vm.allDefinitions},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)]:(_vm.renderer == 'content-select')?[_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.displayLabel,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.field.description}},[_c('fluro-content-select',{attrs:{"context":_vm.context,"template":_vm.params.template,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"label":_vm.displayLabel,"outline":_vm.showOutline,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description,"placeholder":_vm.placeholder,"minimum":_vm.minimum,"type":_vm.restrictType,"lockFilter":_vm.referenceFilter,"searchInheritable":_vm.searchInheritable,"maximum":_vm.maximum},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();},"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)]:(_vm.renderer == 'search-select')?[_c('v-autocomplete',{attrs:{"persistent-hint":true,"outline":_vm.showOutline,"success":_vm.success,"deletable-chips":true,"hide-selected":true,"prepend-inner-icon":"search","error-messages":_vm.errorMessages,"cache-items":!_vm.defaultReferences || !_vm.defaultReferences.length,"chips":_vm.multipleInput,"clearable":!_vm.required,"return-object":true,"item-text":"title","multiple":_vm.multipleInput,"loading":_vm.loading,"items":_vm.searchResults,"search-input":_vm.keywords,"flat":"","hide-no-data":"","label":_vm.displayLabel},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()},"change":function($event){return _vm.elementValueChanged($event, true)},"update:searchInput":function($event){_vm.keywords=$event;},"update:search-input":function($event){_vm.keywords=$event;}},scopedSlots:_vm._u([{key:"item",fn:function(ref){
var item = ref.item;
return [_c('fluro-avatar',{staticClass:"xs",attrs:{"id":item._id,"type":"contact"}}),_vm._v(" "),_c('v-list-tile-content',[_c('v-list-tile-title',{domProps:{"textContent":_vm._s(item.title)}})],1)]}}],null,false,2762711489),model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'signature')?[_c('fluro-signature-field',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"label":_vm.displayLabel,"required":_vm.required,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'code')?_c('client-only',{staticStyle:{"display":"block"}},[_c('v-input',{staticClass:"no-flex",attrs:{"hint":_vm.field.description,"persistent-hint":true}},[(_vm.multipleInput)?[(_vm.fieldModel && _vm.fieldModel.length)?[_vm._l((_vm.fieldModel),function(entry,index){return [_c('fluro-code-editor',{attrs:{"autoformat":_vm.autoformat,"outline":_vm.showOutline,"success":_vm.success,"lang":_vm.syntax,"height":200},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();}},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})]})]:_vm._e(),_vm._v(" "),(_vm.canAddValue)?[_c('v-btn',{staticClass:"ml-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.addValue('')}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.multiLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus"}})],1)]:_vm._e()]:[_c('v-label',[_vm._v(_vm._s(_vm.displayLabel))]),_vm._v(" "),_c('v-card',{staticClass:"no-flex"},[_c('fluro-code-editor',{attrs:{"autoformat":_vm.autoformat,"outline":_vm.showOutline,"success":_vm.success,"lang":_vm.syntax,"height":200},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)]],2)],1):(_vm.renderer == 'textarea')?[_c('v-input',{staticClass:"no-flex",attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description}},[(_vm.multipleInput)?[(_vm.fieldModel && _vm.fieldModel.length)?[_vm._l((_vm.fieldModel),function(entry,index){return [_c('v-layout',{attrs:{"wrap":"","row":""}},[_c('v-flex',{staticClass:"vertical-center"},[_c('v-label',[_vm._v(_vm._s(_vm.groupTitle(entry, index)))])],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),(_vm.canRemoveValue)?_c('v-btn',{attrs:{"icon":"","flat":"","color":"error"},on:{"click":function($event){return _vm.removeValue(index, true)}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1):_vm._e()],1),_vm._v(" "),_c('v-textarea',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})]})]:_vm._e(),_vm._v(" "),(_vm.canAddValue)?[_c('v-btn',{staticClass:"ml-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.addValue('')}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.multiLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus"}})],1)]:_vm._e()]:_vm._e(),_vm._v(" "),(!_vm.multipleInput)?[_c('v-textarea',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":_vm.displayLabel,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:_vm._e()],2)]:(_vm.renderer == 'wysiwyg')?[_c('v-input',{staticClass:"no-flex",attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description}},[(_vm.multipleInput)?[(_vm.fieldModel && _vm.fieldModel.length)?[_vm._l((_vm.fieldModel),function(entry,index){return [_c('v-layout',{attrs:{"wrap":"","row":""}},[_c('v-flex',{staticClass:"vertical-center"},[_c('v-label',[_vm._v(_vm._s(_vm.groupTitle(entry, index)))])],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),(_vm.canRemoveValue)?_c('v-btn',{attrs:{"icon":"","flat":"","color":"error"},on:{"click":function($event){return _vm.removeValue(index, true)}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1):_vm._e()],1),_vm._v(" "),_c('fluro-editor',{attrs:{"options":_vm.multiEditorOptions,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();},"input":_vm.elementValueChanged},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})]})]:_vm._e(),_vm._v(" "),(_vm.canAddValue)?[_c('v-btn',{staticClass:"ml-0",attrs:{"color":"primary"},on:{"click":function($event){return _vm.addValue('')}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.multiLabel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus"}})],1)]:_vm._e()]:_vm._e(),_vm._v(" "),(!_vm.multipleInput)?[_c('v-label',[_vm._v(_vm._s(_vm.displayLabel))]),_vm._v(" "),_c('fluro-editor',{attrs:{"options":_vm.editorOptions,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:_vm._e()],2)]:(_vm.renderer == 'upload')?[_c('v-input',{staticClass:"no-flex",attrs:{"outline":_vm.showOutline,"success":_vm.success,"label":_vm.displayLabel,"required":_vm.required,"error-messages":_vm.errorMessages,"persistent-hint":true,"hint":_vm.fileHint}},[(_vm.files && _vm.files.length)?_c('div',{staticClass:"file-items"},_vm._l((_vm.files),function(file){return _c('div',{staticClass:"file-item"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('v-flex',{attrs:{"grow":""}},[_c('strong',[_vm._v(_vm._s(file.name))]),_vm._v(" "),_c('div',{staticClass:"small"},[(file.state == 'progress')?_c('span',[_vm._v("Uploaded "+_vm._s(file.progress)+"% of ")]):_vm._e(),_c('span',{staticClass:"muted"},[_vm._v(_vm._s(_vm._f("filesize")(file.size)))])])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[(file.state == 'error')?[_c('v-btn',{attrs:{"icon":""}},[_c('fluro-icon',{attrs:{"icon":"exclamation"}})],1)]:(file.state == 'complete')?[_c('v-hover',{scopedSlots:_vm._u([{key:"default",fn:function(ref){
var hover = ref.hover;
return _c('v-btn',{attrs:{"icon":""},on:{"click":function($event){return _vm.removeFile(file)}}},[(hover)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"check"}})],1)}}],null,true)})]:(file.state == 'uploading')?[_c('v-hover',{scopedSlots:_vm._u([{key:"default",fn:function(ref){
var hover = ref.hover;
return _c('v-btn',{attrs:{"icon":""},on:{"click":function($event){return _vm.removeFile(file)}}},[(!hover)?_c('v-progress-circular',{attrs:{"value":file.progress}}):_vm._e(),_vm._v(" "),(hover)?_c('fluro-icon',{attrs:{"icon":"times"}}):_vm._e()],1)}}],null,true)})]:[_c('v-btn',{attrs:{"icon":""},on:{"click":function($event){return _vm.removeFile(file)}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1)]],2)],1)],1)}),0):_vm._e(),_vm._v(" "),(_vm.canAddFile)?_c('label',{staticClass:"file-drop"},[_c('input',{ref:"file",attrs:{"type":"file","multiple":_vm.multipleInput},on:{"change":function($event){return _vm.filesSelected($event.target.files)}}}),_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDrag and drop or click here to select "+_vm._s(_vm.multipleInput ? 'files' : 'a file')+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()])]:(_vm.renderer == 'currency' && !_vm.multipleInput)?[_c('fluro-currency-input',{attrs:{"currency":_vm.params.currency,"hideSuffix":_vm.params.hideSuffix,"min":_vm.minValue,"max":_vm.maxValue,"label":_vm.displayLabel,"required":_vm.required,"autofocus":_vm.shouldAutofocus,"outline":_vm.showOutline,"success":_vm.success,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-menu-select')?[_c('fluro-app-menu-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-block-select')?[_c('fluro-app-block-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-font-select')?[_c('fluro-app-font-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-page-select')?[_c('fluro-app-page-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-size-select')?[_c('fluro-app-size-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-theme-select')?[_c('fluro-app-theme-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'app-font-select')?[_c('fluro-app-font-select',{attrs:{"field":_vm.field,"options":_vm.options,"label":_vm.displayLabel},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:(_vm.renderer == 'color' && !_vm.multipleInput)?[_c('v-menu',{attrs:{"fixed":true,"min-width":"290px","right":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.displayLabel,"persistent-hint":true}},[_c('div',_vm._g({staticClass:"color-swatch"},on),[_c('div',{staticClass:"swatch",style:({backgroundColor:_vm.colorModel.hex8})},[_c('span',[_vm._v(_vm._s(_vm.colorModel.hex8 ? _vm.colorModel.hex8 : 'transparent'))])])])])]}}],null,false,3970237788),model:{value:(_vm.modal),callback:function ($$v) {_vm.modal=$$v;},expression:"modal"}},[_vm._v(" "),_c('div',[_c('color-picker',{on:{"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed();}},model:{value:(_vm.colorModel),callback:function ($$v) {_vm.colorModel=$$v;},expression:"colorModel"}})],1)])]:[(_vm.multipleInput)?[_c('v-input',{staticClass:"no-flex",attrs:{"outline":_vm.showOutline,"label":_vm.displayLabel,"success":_vm.success}},[(_vm.fieldModel && _vm.fieldModel.length)?[_c('draggable',_vm._b({on:{"start":function($event){_vm.drag=true;},"end":function($event){_vm.drag=false;}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}},'draggable',_vm.dragOptions,false),_vm._l((_vm.fieldModel),function(entry,index){return _c('div',{key:entry,staticClass:"multi-input-row"},[_c('v-flex',{staticStyle:{"padding":"0 !important"}},[_vm._v(_vm._s(entry))]),_vm._v(" "),_c('span',{on:{"click":function($event){return _vm.removeValue(index, true)}}},[_vm._v("Remove")])],1)}),0)]:_vm._e(),_vm._v(" "),(_vm.canAddValue)?[_c('v-text-field',{staticClass:"faint",attrs:{"mask":_vm.params.mask,"autofocus":_vm.shouldAutofocus,"append-inner-icon":"plus","outline":_vm.showOutline,"success":_vm.success,"browser-autocomplete":"off","append-icon":"plus","required":_vm.required,"label":_vm.multiLabel,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.hint,"placeholder":_vm.placeholder},on:{"focus":function($event){return _vm.focussed();},"input":_vm.elementValueChanged,"blur":function($event){return _vm.addProposedValue()}},nativeOn:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }$event.stopPropagation();$event.preventDefault();return _vm.addProposedValue()}},model:{value:(_vm.proposedValue),callback:function ($$v) {_vm.proposedValue=$$v;},expression:"proposedValue"}})]:_vm._e()],2)]:_vm._e(),_vm._v(" "),(!_vm.multipleInput)?[_c('v-text-field',{attrs:{"mask":_vm.params.mask,"autofocus":_vm.shouldAutofocus,"outline":_vm.showOutline,"success":_vm.success,"browser-autocomplete":"off","required":_vm.required,"label":_vm.displayLabel,"error-messages":_vm.errorMessages,"persistent-hint":_vm.persistentDescription,"hint":_vm.field.description,"placeholder":_vm.placeholder},on:{"input":_vm.elementValueChanged,"blur":function($event){return _vm.touch()},"focus":function($event){return _vm.focussed()}},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:_vm._e()]]:_vm._e()],2):_vm._e()};
var __vue_staticRenderFns__$G = [];

  /* style */
  const __vue_inject_styles__$H = function (inject) {
    if (!inject) return
    inject("data-v-2e769f64_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.vc-chrome{width:auto!important}.color-swatch{cursor:pointer;border:1px solid #ccc;border-radius:5px;overflow:hidden;background:conic-gradient(#fafafa 0deg,#fafafa 90deg,#ccc 90deg,#ccc 180deg,#fafafa 180deg,#fafafa 270deg,#ccc 270deg,#ccc 360deg) 0 0/25% 25%}.color-swatch .swatch{display:block;width:100%;padding:10px;color:#fff;font-weight:500;text-align:center}.color-swatch .swatch span{background:rgba(0,0,0,.2);border-radius:5px;padding:3px 10px;line-height:20px;font-size:14px;display:inline-block}.fluro-content-form-field .same-line{padding-top:0!important;padding-bottom:0!important}.fluro-content-form-field.is-context{border-radius:5px;outline:1px dashed rgba(42,212,185,.5);background:rgba(42,212,185,.1)}.fluro-content-form-field .multi-input-row{display:flex;padding:5px 10px;align-items:center;border-bottom:1px solid rgba(0,0,0,.1);background:#fff;border-radius:5px;margin-bottom:4px}.fluro-content-form-field .multi-input-row span,.fluro-content-form-field .multi-input-row svg{opacity:0;cursor:pointer}.fluro-content-form-field .multi-input-row:hover span,.fluro-content-form-field .multi-input-row:hover svg{opacity:.5}.fluro-content-form-field .multi-input-row span{font-style:italic;font-size:.8em}.fluro-content-form-field .file-drop{display:block;position:relative;border:1px dashed rgba(0,0,0,.2);background:rgba(0,0,0,.05);padding:10px;border-radius:10px;text-align:center;min-height:60px;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:.8;font-style:italic;color:rgba(0,0,0,.5);margin-bottom:5px}.fluro-content-form-field .file-drop:active,.fluro-content-form-field .file-drop:focus,.fluro-content-form-field .file-drop:hover{background:#fff}.fluro-content-form-field .file-drop input{display:block;left:0;right:0;bottom:0;top:0;opacity:0;width:100%;height:100%;position:absolute;cursor:pointer}.fluro-content-form-field .file-items{margin-bottom:15px}.fluro-content-form-field .file-items .file-item{position:relative;padding:5px 5px 5px 15px;border:1px solid rgba(0,0,0,.2);border-bottom:none;background:#fff;font-size:.9em}.fluro-content-form-field .file-items .file-item:first-child{border-radius:5px 5px 0 0}.fluro-content-form-field .file-items .file-item:last-child{border-bottom:1px solid rgba(0,0,0,.2);border-radius:0 0 5px 5px}.fluro-content-form-field .vertical-center{display:flex;align-items:center;min-height:36px}.fluro-content-form-field.fluro-content-form-field-embedded.multiple-input,.fluro-content-form-field.fluro-content-form-field-group.multiple-input{margin:25px 0}.fluro-content-form-field.fluro-content-form-field-embedded.multiple-input.multiple-input-values-0,.fluro-content-form-field.fluro-content-form-field-group.multiple-input.multiple-input-values-0{margin:0}.fluro-content-form-field .no-flex>.v-input__control>.v-input__slot{display:block;margin:0}.fluro-content-form-field .v-sheet{margin-bottom:15px}.fluro-content-form-field .v-toolbar__content{height:40px!important;padding-right:5px}.fluro-content-form-field .v-toolbar__title{letter-spacing:-.03em}.fluro-content-form-field .fluro-editor .fluro-editor-textarea>div{min-height:200px}.fluro-content-form-field .faint .v-label{font-weight:400!important;opacity:.5;font-style:italic}.fluro-content-form-field .terms{padding:15px 15px;background:rgba(0,0,0,.05);border-radius:3px;margin-top:16px}.fluro-content-form-field .terms.has-error{background:rgba(255,82,82,.05)}.fluro-content-form-field .terms>.v-input{margin-top:0!important}.fluro-content-form-field .terms .conditions{margin-top:10px;font-size:.9em;opacity:.8;font-style:italic}.fluro-content-form-field.right-messages>>>.v-text-field__details{text-align:right}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$H = undefined;
  /* module identifier */
  const __vue_module_identifier__$H = undefined;
  /* functional template */
  const __vue_is_functional_template__$H = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$G = normalizeComponent(
    { render: __vue_render__$G, staticRenderFns: __vue_staticRenderFns__$G },
    __vue_inject_styles__$H,
    __vue_script__$H,
    __vue_scope_id__$H,
    __vue_is_functional_template__$H,
    __vue_module_identifier__$H,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroContentFormField = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$G
});

//
var script$I = {
  name: 'fluro-content-form',
  props: {
    'contextField': {
      type: Object
    },
    'recursiveClick': {
      type: Function
    },
    'debugMode': {
      type: Boolean
    },
    'debounce': {
      type: Number,
      default: 0
    },
    //This stops the form from adding the default values
    //We use this so that we don't accidentally fill in fields
    //that have been cleared by the user (mainly for website builder)
    'disableDefaults': {
      type: Boolean,
      default: false
    },
    'dynamic': {
      type: Boolean
    },
    'context': {
      type: String,

      default() {
        //By default 
        return this.$fluro.global.defaultFormContext;
      }

    },
    'parent': {
      type: Object
    },
    'fields': {
      type: Array
    },
    'value': {
      type: Object
    },
    'formFields': {
      default() {
        return [];
      },

      type: Array
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    },
    'outline': {
      type: Boolean
    }
  },
  computed: {
    fieldsOutput() {
      return this.fields;
    },

    formModel() {
      return this.parent || this.model;
    },

    showOutline() {
      return this.outline || this.options.outline;
    },

    errorMessages() {
      return lodash.chain(this.formFields).filter(function (field) {
        var errorMessages = field.errorMessages;

        if (!errorMessages) {
          console.log('this field has no error messages!', field);
          return;
        }

        return errorMessages.length;
      }).map(function (field) {
        // ///console.log('ERROR MESSAGES', field);
        // ///console.log('ERROR MESSAGE', field);
        return {
          title: field.errorTitle,
          messages: field.errorMessages
        };
      }).value();
    },

    fieldHash() {
      return lodash.reduce(this.fieldsOutput, function (set, field) {
        set[field.key] = field;
        return set;
      }, {});
    }

  },

  data() {
    return {
      ready: false,
      model: this.value
    };
  },

  components: {// FluroContentFormField,
  },
  watch: {
    model(newModel, oldModel) {
      // ///console.log('form model changed');
      this.$emit('input', this.model);
    },

    value(v) {
      //If the model has been changed
      if (this.model != v) {
        ///console.log('FORM MODEL IS NOW SOMETHING DIFFERENT VALUE', v);
        this.model = v;
        this.reset();
      } // ///console.log('Form value set', val)
      // 		// var newModel = Object.assign({}, val) //input;
      // 		this.$set(this, 'model', val);
      // 		this.reset();

    },

    // fields(val) {
    // 				///console.log('FIELDS CHANGED needs reset')
    // 				return this.reset();
    // },
    errorMessages(messages) {
      this.$emit('errorMessages', messages);
    }

  },
  beforeCreate: function () {
    var self = this;
    Promise.all([service.load('src/components/form/FluroContentForm.vue', function () {
      return Promise.resolve().then(function () { return FluroContentForm; });
    }), service.load('src/components/form/FluroContentFormField.vue', function () {
      return Promise.resolve().then(function () { return FluroContentFormField; });
    })]).then(function (results) {
      // ///console.log('Set Components', results);
      self.$options.components.FluroContentForm = results[0];
      self.$options.components.FluroContentFormField = results[1];
      self.ready = true;
    }); // Promise.all([
    // 								import('src/components/form/FluroContentForm.vue'),
    // 								import('src/components/form/FluroContentFormField.vue'),
    // 				])
    // 				.then(function(results) {
    // 								self.$options.components.FluroContentForm = results[0].default
    // 								self.$options.components.FluroContentFormField = results[1].default
    // 								self.ready = true;
    // 								/////console.log('Imported Components Dynamically', results)
    // 				})
    // Promise.all([
    // 								DynamicImportService.load('src/components/form/FluroContentForm.vue', function() {
    // 												return import('src/components/form/FluroContentForm.vue')
    // 								}),
    // 								DynamicImportService.load('src/components/form/FluroContentFormField.vue', function() {
    // 												return import('src/components/form/FluroContentFormField.vue')
    // 								}),
    // 				])
    // 				.then(function(results) {
    // 								// ///console.log('Set Components', results);
    // self.$options.components.FluroContentForm = results[0];
    // self.$options.components.FluroContentFormField = results[1];
    // 								self.ready = true;
    // 				})
  },

  created() {
    ///console.log('Reset on creation!')
    this.reset();
  },

  methods: {
    touch() {
      lodash.each(this.formFields, function (component) {
        if (component.touch) {
          component.touch();
        }
      });
    },

    reset() {
      var self = this; // ///console.log('Form reset() THIS SHOULD ONLY HAPPEN IF THE ORIGINAL PROP IS CHANGED')
      /////////////////////////////////////////////////
      //For each field reset the model

      if (!self.disableDefaults) {
        (self.fieldsOutput || []).forEach(createDefaults);
      }

      function createDefaults(field) {
        if (field.type == 'group' && !field.asObject) {
          (field.fields || []).forEach(createDefaults);
          return;
        }

        var existingValue = lodash.get(self.model, field.key); //We already have a value in this field


        if (existingValue) {
          return;
        } ////////////////////////////////
        //Create an empty array


        if (field.maximum != 1) {
          var startingValueCount = Math.max(field.askCount, field.minimum);
          var array = [];

          for (var i = 0; i < startingValueCount; i++) {
            array.push({});
          }

          console.log('Add and create array');
          Vue.set(self.model, field.key, array);
        }
      } /////////////////////////////////////////////////
      //Reset the components too


      self.formFields.forEach(function (component) {
        component.reset();
      }); // self.$nextTick(function() {

      self.$emit('default'); // })
      // /////////////////////////////////////////////////
      // //Recursively create all the default keys for nested fields
      // function createDefaults(field) {
      // 				//Check if it's just a display group
      // 				if (field.type == 'group' && !field.asObject) {
      // 								(field.fieldsOutput || []).forEach(createDefaults);
      // 								return;
      // 				}
      // 				// ///console.log('CREATE DEFAULTS FOR', field.title)
      // 				var existingValue = _.get(self.model, field.key);
      // 				//We already have a value in this field
      // 				if (existingValue) {
      // 								// ///console.log('Has existing value', field.key, existingValue);
      // 								Vue.set(self.model, field.key, existingValue);
      // 								return;
      // 				}
      // 				// ///console.log('Create Defaults', self);
      // 				var blankValue = self.$fluro.utils.getDefaultValueForField(field);
      // 				if (field.type == 'date' && blankValue == 'now') {
      // 								blankValue = new Date();
      // 				}
      // 				///console.log('Set Default value', field.key, blankValue);
      // 				Vue.set(self.model, field.key, blankValue);
      // }
    },

    update(input, valueThatWasChanged) {// ///console.log('form model changed from update callback');
      // this.$forceUpdate();
      // this.$emit('input', this.model);
      // ///console.log('form model changed');
      // this.$emit('input', this.model);
      // JSON.parse(JSON.stringify(this.model)));
    } // update: function(input, valueThatWasChanged) {
    //     var self = this;
    //     self.model = input;
    //     // ///console.log('Update -> model')
    //     //If there is already a debouncer
    //     if (debouncer) {
    //         //Stop it
    //         clearTimeout(debouncer);
    //     }
    //     if (!self.debounce) {
    //         ///console.log('')
    //         return self.$emit('input', this.model);
    //     }
    //     //Start a new debouncer
    //     debouncer = setTimeout(() => self.dispatch(), self.debounce);
    // },
    // dispatch() {
    // 				// ///console.log('Update -> dispatch')
    // 				this.$emit('input', this.model);
    // }


  }
};

/* script */
const __vue_script__$I = script$I;

/* template */
var __vue_render__$H = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('div',{staticClass:"fluro-content-form"},[_vm._t("form",_vm._l((_vm.fields),function(field,index){return _c('v-container',{key:("" + (field.guid) + (field.key)),staticClass:"grid-list-lg",attrs:{"fluid":"","pa-0":""}},[_c('fluro-content-form-field',{attrs:{"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"disableDefaults":_vm.disableDefaults,"dynamic":_vm.dynamic,"context":_vm.context,"parent":_vm.formModel,"outline":_vm.showOutline,"form-fields":_vm.formFields,"options":_vm.options,"field":_vm.fields[index]},on:{"input":_vm.update},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)}),{"parent":_vm.formModel,"context":_vm.context,"formFields":_vm.formFields,"fieldHash":_vm.fieldHash,"model":_vm.model,"update":_vm.update,"options":_vm.options})],2):_vm._e()};
var __vue_staticRenderFns__$H = [];

  /* style */
  const __vue_inject_styles__$I = function (inject) {
    if (!inject) return
    inject("data-v-58a8efe6_0", { source: ".border-top[data-v-58a8efe6]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-58a8efe6]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-58a8efe6]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-58a8efe6]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$I = "data-v-58a8efe6";
  /* module identifier */
  const __vue_module_identifier__$I = undefined;
  /* functional template */
  const __vue_is_functional_template__$I = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$H = normalizeComponent(
    { render: __vue_render__$H, staticRenderFns: __vue_staticRenderFns__$H },
    __vue_inject_styles__$I,
    __vue_script__$I,
    __vue_scope_id__$I,
    __vue_is_functional_template__$I,
    __vue_module_identifier__$I,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroContentForm = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$H
});

//
var script$J = {
  components: {
    draggable
  },
  props: {
    value: {
      type: Array
    }
  },

  data() {
    return {
      proposed: {
        name: '',
        value: ''
      },
      model: this.value
    };
  },

  created() {
    var self = this;

    if (!self.value) {
      self.$set(self, 'model', []);
    }

    self.$emit('input', self.model);
  },

  watch: {
    value(v) {
      this.model = v;
    },

    'proposed.name': function (name) {
      this.proposed.value = name;
    }
  },
  methods: {
    commit($event, option, key) {
      this.$set(option, key, $event.target.value); // console.log('COMMIT', $event, option, key);
    },

    sorted() {
      var self = this;
      self.$emit('input', self.model);
    },

    remove(option) {
      this.model.splice(this.model.indexOf(option), 1);
    },

    addOption() {
      console.log('Add copy');
      var self = this;
      var copy = JSON.parse(JSON.stringify(self.proposed));

      if (lodash.some(self.model, function (option) {
        return option.value == self.proposed.value;
      })) {
        return;
      }

      self.model.push(copy);
      self.proposed = {
        name: '',
        value: ''
      };
      self.$refs.name.focus();
    }

  },
  computed: {}
};

/* script */
const __vue_script__$J = script$J;

/* template */
var __vue_render__$I = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('fluro-panel',[_c('table',[_c('thead',[_c('tr',[_c('th'),_vm._v(" "),_c('th',[_vm._v("Name")]),_vm._v(" "),_c('th',[_vm._v("Value")]),_vm._v(" "),_c('th')])]),_vm._v(" "),_c('draggable',{staticClass:"options-manager-items",attrs:{"element":"tbody","handle":".handle"},on:{"sort":_vm.sorted},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}},_vm._l((_vm.model),function(option,index){return _c('tr',{key:option.name,staticClass:"option"},[_c('td',{staticClass:"handle"},[_c('fluro-icon',{attrs:{"icon":"arrows"}})],1),_vm._v(" "),_c('td',[_c('input',{attrs:{"placeholder":"Name"},domProps:{"value":option.name},on:{"change":function($event){return _vm.commit($event, option, 'name')}}})]),_vm._v(" "),_c('td',[_c('input',{attrs:{"placeholder":"Value"},domProps:{"value":option.value},on:{"change":function($event){return _vm.commit($event, option, 'value')}}})]),_vm._v(" "),_c('td',[_c('v-btn',{staticClass:"ma-0",attrs:{"icon":"","small":""},on:{"click":function($event){return _vm.remove(option)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)],1)])}),0)],1),_vm._v(" "),_c('fluro-panel-title',[_c('form',{on:{"submit":function($event){$event.preventDefault();$event.stopPropagation();return _vm.addOption($event)}}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.proposed.name),expression:"proposed.name"}],ref:"name",staticClass:"input",attrs:{"placeholder":"Name"},domProps:{"value":(_vm.proposed.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.proposed, "name", $event.target.value);}}})]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.proposed.value),expression:"proposed.value"}],staticClass:"input",attrs:{"placeholder":"Value"},domProps:{"value":(_vm.proposed.value)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.proposed, "value", $event.target.value);}}})]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","color":"primary","type":"submit"}},[_vm._v("\n                        Add\n                    ")])],1)],1)],1)])],1)};
var __vue_staticRenderFns__$I = [];

  /* style */
  const __vue_inject_styles__$J = function (inject) {
    if (!inject) return
    inject("data-v-850d50f0_0", { source: ".border-top[data-v-850d50f0]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-850d50f0]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-850d50f0]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-850d50f0]{border-left:1px solid rgba(0,0,0,.05)}table[data-v-850d50f0]{width:100%;border-collapse:collapse}table thead th[data-v-850d50f0]{background:#eee;font-size:10px;padding:4px}.input[data-v-850d50f0]{background:#fff;border-radius:2px;border:1px solid rgba(0,0,0,.1);padding:3px;height:30px;line-height:30px;display:block;width:100%}.option td[data-v-850d50f0]{padding:4px;border-bottom:1px solid rgba(0,0,0,.05)}.option td input[data-v-850d50f0]{width:100%;display:block}.option .handle[data-v-850d50f0]{width:10px}.option .handle svg[data-v-850d50f0]{opacity:0}.option:hover .handle svg[data-v-850d50f0]{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$J = "data-v-850d50f0";
  /* module identifier */
  const __vue_module_identifier__$J = undefined;
  /* functional template */
  const __vue_is_functional_template__$J = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$I = normalizeComponent(
    { render: __vue_render__$I, staticRenderFns: __vue_staticRenderFns__$I },
    __vue_inject_styles__$J,
    __vue_script__$J,
    __vue_scope_id__$J,
    __vue_is_functional_template__$J,
    __vue_module_identifier__$J,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$K = {
  props: {
    value: {
      type: Array
    },
    context: {
      type: Object
    }
  },

  data() {
    return {
      contextField: this.context,
      model: this.value,
      fields: [],
      selected: null
    };
  },

  watch: {
    value(v) {
      this.model = v;
    },

    contextField: 'map',
    model: 'map'
  },

  created() {
    this.map();
  },

  computed: {
    currentTrail() {
      var self = this;
      var context = self.contextField;

      if (!context) {
        return;
      }

      var field = lodash.find(self.trails, {
        guid: context.guid
      });

      return simplify(field);
    },

    trails() {
      return lodash.map(this.fields, simplify);
    }

  },
  methods: {
    selectExample(example, field) {
      this.$emit('click', example, field);
    },

    toggle(panel) {
      var self = this;
      self.selected = panel; // self.$set(panel, '_expressionExpanded', !panel._expressionExpanded);
    },

    map() {
      var self = this;

      if (!self.contextField) {
        return;
      }

      self.fields = getFieldDescriptions(self.contextField, self.model); // extractFieldsFromDefinitionFields(self.contextField, self.model, '0', true);
    }

  }
};

function simplify(f) {
  if (!f) {
    return;
  }

  return {
    title: f.title,
    path: f.path,
    guid: f.guid || 'nope'
  };
} ///////////////////////////////////////////////////////////////////////////////////////


function getFieldDescriptions(contextField, fields) {
  var trail = [];
  var titles = [];
  var results = []; ///////////////////////////////////////////

  function recurMap(array, trail, titles) {
    lodash.each(array, function (field) {
      var output = {
        title: field.title,
        key: field.key,
        type: field.type,
        guid: field.guid
      }; //JSON.parse(JSON.stringify(originalField));
      // field.originalField = originalField;
      /////////////////////////////////////////////
      //We need to add the field to our results

      output.trail = trail.slice();
      output.titles = titles.slice();
      output.context = contextField == field; /////////////////////////////////////////////

      output.absoluteTitle = output.titles.concat([field.title]).join(' > ');
      output.parentTitle = lodash.last(titles);
      output.parentTrail = trail.slice().join('.');
      output.path = output.trail.concat([field.key]).join('.');
      output.isArray = field.maximum != 1; /////////////////////////////////////////////

      if (field.allowedValues && field.allowedValues.length) {
        output.options = lodash.map(field.allowedValues, function (value) {
          return {
            name: value,
            value: value
          };
        });
      } else {
        output.options = field.options || [];
      } /////////////////////////////////////////////


      results.push(output); /////////////////////////////////////////////

      if (field.asObject || field.directive == 'embedded') {
        if (field.maximum == 1) {
          trail.push(field.key);
          titles.push(field.title);
        } else {
          trail.push(field.key + '[0]');
          titles.push(field.title);
        }
      }

      if (field.fields && field.fields.length) {
        //Go down one level deeper
        recurMap(field.fields, trail, titles);
      }

      if (field.asObject || field.directive == 'embedded') {
        trail.pop();
        titles.pop();
      }
    });
  } //Loop through and get a flat list of all our fields and their paths


  recurMap(fields, trail, titles); ///////////////////////////////////////////
  //Find the current 


  var thisField = lodash.find(results, {
    guid: contextField.guid
  });

  var currentTrail = thisField ? thisField.parentTrail : ''; ///////////////////////////////////////////

  return lodash.chain(results).map(function (field) {
    //Find the contextual path to this field
    field.contextualPath = currentTrail.length ? field.path.replace(currentTrail, 'model') : field.path;

    if (field.contextualPath == field.path) {
      field.contextualPath = `data.${field.path}`;
    } //Now we add our examples


    field.examples = []; //////////////////////////////////////////////////

    var exampleTitle;
    var exampleValue; //////////////////////////////////////////////////

    var sampleOptions = field.options ? field.options.slice(0, 5) : []; //////////////////////////////////////////////////

    switch (field.type) {
      case 'group':
        if (!field.asObject) {
          return;
        }

        break;

      case 'void':
        return;

      case 'number':
        exampleTitle = exampleValue = 18;
        break;

      case 'integer':
        exampleTitle = exampleValue = 12;
        break;

      case 'decimal':
      case 'float':
        exampleTitle = exampleValue = 3.56;
        break;

      case 'boolean':
        exampleTitle = exampleValue = 'true';
        break;

      case 'email':
        exampleTitle = exampleValue = 'example@fluro.io';
        break;

      case 'url':
        exampleTitle = exampleValue = 'https://www.fluro.io';
        break;

      case 'date':
        exampleTitle = 'Date';
        exampleValue = Date.now();
        break;

      case 'string':
        if (field.isArray) {
          //If there are options specified already
          if (sampleOptions && sampleOptions.length) {
            exampleTitle = `[${lodash.map(sampleOptions, function (value) {
              return `'${value}'`;
            }).join(', ')}]`;
            exampleValue = lodash.map(sampleOptions, 'value');
          } else {
            exampleValue = ['Michael', 'Susan', 'Jerry'];
            exampleTitle = exampleValue.join(', ');
          }
        } else {
          //It's a single value
          if (sampleOptions && sampleOptions.length) {
            exampleTitle = lodash.first(sampleOptions).name;
            exampleValue = `'${lodash.first(sampleOptions).value}'`;
          } else {
            exampleTitle = exampleValue = `'Michael'`;
          }
        }

        break;

      case 'reference':
        if (field.isArray) {
          exampleTitle = exampleValue = ['Object', 'Object', 'Object'];
        } else {
          exampleTitle = exampleValue = {};
        }

        break;
    } //////////////////////////////////////////////////


    var examples = []; //////////////////////////////////////////////////

    var delimiter = '[0]';
    var fieldPath = field.contextualPath;
    var delimiterIndex = fieldPath.lastIndexOf(delimiter);
    var subFieldOfNested = delimiterIndex != -1;
    var parentPath = fieldPath.slice(0, delimiterIndex);
    var sliceIndex = delimiterIndex == -1 ? 0 : delimiterIndex;
    var childPath = fieldPath.slice(sliceIndex + delimiter.length + 1);
    var isArray = field.isArray; //////////////////////////////////////////////////

    if (isArray) {
      switch (field.type) {
        case 'reference':
        case 'group':
          break;

        case 'number':
        case 'integer':
        case 'decimal':
        case 'float':
          if (sampleOptions.length) {
            lodash.each(sampleOptions, function (option) {
              examples.push({
                path: `${field.contextualPath}.includes(${option.value})`,
                description: `Returns if '${option.name}' has been selected as a value`
              });
            });
          } else {
            lodash.each(exampleValue, function (option) {
              examples.push({
                path: `${field.contextualPath}.includes(${option})`,
                description: `Returns if '${field.path}' has been selected as a value`
              });
            });
          }

          break;

        default:
          if (sampleOptions.length) {
            lodash.each(sampleOptions, function (option) {
              examples.push({
                path: `${field.contextualPath}.includes('${option.value}')`,
                description: `Returns if '${option.name}' has been selected`
              });
            });
          } else {
            lodash.each(exampleValue, function (option) {
              examples.push({
                path: `${field.contextualPath}.includes('${option}')`,
                description: `Returns if '${field.path}' has been selected`
              });
            });
          }

          break;
      } ////////////////////////////////////////////////


      examples.push({
        path: `${field.contextualPath}.length`,
        description: `Returns the number of '${field.title}' values that have been input`
      });
      examples.push({
        path: `${field.contextualPath}.length > 1`,
        description: `Returns true if more than 1 '${field.title}' value has been input`
      });
      examples.push({
        path: `${field.contextualPath}.length < 4`,
        description: `Returns true if less than 4 '${field.title}' values have been input`
      });
    } else {
      if (sampleOptions.length) {
        switch (field.type) {
          case 'reference':
          case 'group':
            break;

          case 'number':
          case 'integer':
          case 'decimal':
          case 'float':
            lodash.each(sampleOptions, function (option) {
              examples.push({
                path: `${field.contextualPath} == ${option.value}`,
                description: `Returns if '${option.name}' has been selected`
              });
            });

            break;

          default:
            lodash.each(sampleOptions, function (option) {
              examples.push({
                path: `${field.contextualPath} == '${option.value}'`,
                description: `Returns if '${option.name}' has been selected`
              });
            });

            break;
        }
      } else {
        examples.push({
          path: `${field.contextualPath}`,
          description: `Returns the value of '${field.title}'`
        });
      }
    } //////////////////////////////////////////////////
    //Now we add the absolute paths


    if (subFieldOfNested) {
      // console.log('CONTEXTUAL', field.contextualPath, '--', currentTrail, '--', field.path)
      // console.log('SUBFIELD',subFieldOfNested, field.contextualPath, '--', currentTrail, '--', field.path )
      if (field.isArray) {
        if (sampleOptions.length) {
          lodash.each(sampleOptions, function (option) {
            examples.push({
              path: `matchInArray(${field.contextualPath}, '${childPath}', '${option.value}', 'in').length`,
              description: `Returns the total number of '${field.parentTitle}' where '${field.title}' includes'${option.name}'`
            });
          });
        } else {
          examples.push({
            path: `matchInArray(data.${parentPath}, '${childPath}', '${exampleValue}', 'in').length`,
            description: `Returns the total number of '${field.parentTitle}' where '${field.title}' includes'${exampleTitle}'`
          });
        }
      } else {
        if (sampleOptions.length) {
          lodash.each(sampleOptions, function (option) {
            examples.push({
              path: `matchInArray(${parentPath}, '${childPath}', '${option.value}').length`,
              description: `Returns the total number of '${field.parentTitle}' where ${field.title} is equal to '${option.name}'`
            });
          });
        } else {
          switch (field.type) {
            case 'number':
            case 'float':
            case 'decimal':
            case 'integer':
              examples.push({
                path: `matchInArray(${parentPath}, '${childPath}', ${exampleValue}).length`,
                description: `Returns the total number of '${field.parentTitle}' where ${field.title} is equal to ${exampleTitle}`
              });
              examples.push({
                path: `matchInArray(${parentPath}, '${childPath}', ${exampleValue}, '>=').length`,
                description: `Returns the total number of '${field.parentTitle}' where ${field.title} is greater than or equal to ${exampleTitle}`
              });
              examples.push({
                path: `matchInArray(${parentPath}, '${childPath}', ${exampleValue}, '<').length`,
                description: `Returns the total number of '${field.parentTitle}' where ${field.title} is less than ${exampleTitle}`
              });
              break;

            case 'boolean':
              break;

            default:
              examples.push({
                path: `matchInArray(${parentPath}, '${childPath}', ${exampleValue}).length`,
                description: `Returns the total number of '${field.parentTitle}' where ${field.title} is equal to ${exampleTitle}`
              });
              break;
          }
        }
      }
    } //////////////////////////////////////////////////


    field.examples = examples;
    return field;
  }).compact().value(); ///////////////////////////////////////////
}

/* script */
const __vue_script__$K = script$K;

/* template */
var __vue_render__$J = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"expression-field-select"},[_c('flex-column-body',[_c('div',{staticClass:"accordion"},_vm._l((_vm.fields),function(field){return _c('div',{staticClass:"accordion-panel",class:{expanded:field == _vm.selected}},[_c('div',{staticClass:"accordion-panel-title",on:{"click":function($event){return _vm.toggle(field)}}},[_c('v-layout',[_c('v-flex',[_vm._v("\n                            "+_vm._s(field.absoluteTitle)+"\n                        ")]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('fluro-icon',{attrs:{"icon":field == _vm.selected ? "angle-up" : "angle-down"}})],1)],1)],1),_vm._v(" "),(field == _vm.selected)?_c('div',{staticClass:"accordion-panel-content"},_vm._l((field.examples),function(example){return _c('div',{staticClass:"example",on:{"click":function($event){return _vm.selectExample(example, field)}}},[_c('div',{staticClass:"example-code"},[_vm._v(_vm._s(example.path))]),_vm._v(" "),_c('div',{staticClass:"example-description"},[_vm._v(_vm._s(example.description))])])}),0):_vm._e()])}),0)])],1)};
var __vue_staticRenderFns__$J = [];

  /* style */
  const __vue_inject_styles__$K = function (inject) {
    if (!inject) return
    inject("data-v-d93fbf2a_0", { source: ".border-top[data-v-d93fbf2a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-d93fbf2a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-d93fbf2a],.expression-field-select .accordion .accordion-panel[data-v-d93fbf2a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-d93fbf2a]{border-left:1px solid rgba(0,0,0,.05)}.expression-field-select[data-v-d93fbf2a]{width:400px;height:100%;max-height:50vh;background:#fff}.expression-field-select .example[data-v-d93fbf2a]{font-size:12px;margin-bottom:5px}.expression-field-select .example .example-code[data-v-d93fbf2a]{font-weight:700;background:rgba(42,212,185,.3);color:#000;display:inline-block;padding:3px;border-radius:3px}.expression-field-select .example .example-description[data-v-d93fbf2a]{font-size:.8em}.expression-field-select .accordion .accordion-panel[data-v-d93fbf2a]{margin:0}.expression-field-select .accordion .accordion-panel .accordion-panel-title[data-v-d93fbf2a]{padding:5px;font-weight:600;font-weight:500;background:#eee}.expression-field-select .accordion .accordion-panel.expanded .accordion-panel-title[data-v-d93fbf2a]{background:#fff}.expression-field-select .accordion .accordion-panel .accordion-panel-content[data-v-d93fbf2a]{background:#fff;padding:5px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$K = "data-v-d93fbf2a";
  /* module identifier */
  const __vue_module_identifier__$K = undefined;
  /* functional template */
  const __vue_is_functional_template__$K = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$J = normalizeComponent(
    { render: __vue_render__$J, staticRenderFns: __vue_staticRenderFns__$J },
    __vue_inject_styles__$K,
    __vue_script__$K,
    __vue_scope_id__$K,
    __vue_is_functional_template__$K,
    __vue_module_identifier__$K,
    false,
    createInjector,
    undefined,
    undefined
  );

//
// import js_beautify from 'js-beautify';
// console.log('BEAUTIFY', js_beautify.html);

var script$L = {
  props: {
    'value': {
      type: String,
      default: ''
    },
    'readonly': {
      type: Boolean
    }
  },

  data() {
    return {
      ready: false,
      editor: null,
      model: this.value
    };
  },

  mounted() {
    var self = this;
    Promise.all([service.load('vue2-ace-editor', function () {
      return import('vue2-ace-editor');
    }), import('brace/mode/javascript')]).then(function (results) {
      console.log('Loaded brace extras');
      self.$options.components.CodeEditor = results[0];
      self.ready = true;
    }, function (err) {
      self.ready = true;
    });
  },

  methods: {
    editorInit: function (editor) {
      // $rootScope.singleLineAce = function(editor) {
      //     // remove newlines in pasted text
      //     editor.on("paste", function(e) {
      //         e.text = e.text.replace(/[\r\n]+/g, " ");
      //     });
      //     // disable Enter Shift-Enter keys
      //     editor.commands.bindKey("Enter|Shift-Enter", "null")
      // }
      var self = this; // require('brace/theme/tomorrow_night_eighties')

      self.editor = editor;
      editor.on("paste", function (e) {
        e.text = e.text.replace(/[\r\n]+/g, " ");
      }); // make mouse position clipping nicer

      editor.renderer.screenToTextCoordinates = function (x, y) {
        var pos = this.pixelToScreenCoordinates(x, y);
        return this.session.screenToDocumentPosition(Math.min(this.session.getScreenLength() - 1, Math.max(pos.row, 0)), Math.max(pos.column, 0));
      };

      editor.commands.bindKey("Enter|Shift-Enter", "null"); ////////////////////////////////////////

      editor.renderer.setShowGutter(false);

      if (this.readonly) {
        editor.setReadOnly(true);
      }
    }
  },
  components: {// CodeEditor,
  },
  watch: {
    value(value) {

      if (value !== this.model) {
        this.editor.session.setValue(value);
      }
    },

    model(value) {
      // so cursor doesn't jump to start on typing
      if (value != this.model) {
        this.editor.setContent(this.model);
      } // console.log('NEw Code', value)


      this.$emit('input', this.model);
    }

  }
};

/* script */
const __vue_script__$L = script$L;

/* template */
var __vue_render__$K = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('div',{staticClass:"fluro-expression-editor"},[_c('code-editor',{attrs:{"lang":"javascript","height":30},on:{"init":_vm.editorInit},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1):_vm._e()};
var __vue_staticRenderFns__$K = [];

  /* style */
  const __vue_inject_styles__$L = function (inject) {
    if (!inject) return
    inject("data-v-04c21c68_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-expression-editor{min-height:30px;max-height:30px;display:flex;border-radius:4px;border:1px solid #ddd;overflow:hidden;flex-direction:column;margin-bottom:5px}.fluro-expression-editor div.ace_scroller>div.ace_content{margin-top:0!important;overflow:hidden!important;height:30px!important}.fluro-expression-editor div.ace_scroller>div.ace_content .ace_active-line,.fluro-expression-editor div.ace_scroller>div.ace_content .ace_cursor,.fluro-expression-editor div.ace_scroller>div.ace_content .ace_line{line-height:30px!important;height:30px!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$L = undefined;
  /* module identifier */
  const __vue_module_identifier__$L = undefined;
  /* functional template */
  const __vue_is_functional_template__$L = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$K = normalizeComponent(
    { render: __vue_render__$K, staticRenderFns: __vue_staticRenderFns__$K },
    __vue_inject_styles__$L,
    __vue_script__$L,
    __vue_scope_id__$L,
    __vue_is_functional_template__$L,
    __vue_module_identifier__$L,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/////////////////////////////////////////////////////
var script$M = {
  props: {
    autofocus: {
      type: Boolean
    },
    enabled: {
      type: Boolean,
      default: true
    }
  },

  data() {
    return {
      props: {
        element: null,
        editing: false
      },
      dblclick: {
        type: Boolean
      }
    };
  },

  beforeDestroy() {
    var self = this;

    if (self.element) {
      self.element.removeEventListener('focus', self.focus);
      self.element.removeEventListener('blur', self.blur);
      self.element = null;
    }
  },

  mounted() {
    var self = this;
    self.mount();

    if (self.autofocus) {
      self.enableEdit();
    }
  },

  methods: {
    doubleClickEnableEdit() {
      if (this.dblclick) {
        return this.enableEdit();
      } else {
        return;
      }
    },

    clickEnableEdit() {
      if (this.dblclick) {
        return;
      } else {
        return this.enableEdit();
      }
    },

    mount() {
      var self = this;
      self.element = self.$el.querySelector('input, textarea, select, [contenteditable]');

      if (self.element) {
        self.element.addEventListener('focus', self.focus);
        self.element.addEventListener('blur', self.blur);
      }
    },

    enableEdit() {
      var self = this;

      if (self.enabled) {
        if (!self.element) {
          self.mount();
        }

        if (self.element) {
          self.element.focus();
        }

        self.props.editing = true;
      }
    },

    focus(event) {
      var self = this;

      if (self.enabled) {
        this.props.editing = true;

        if (self.element && self.element.select) {
          self.element.select();
        }
      }
    },

    blur() {
      this.props.editing = false;
    }

  }
};

/* script */
const __vue_script__$M = script$M;

/* template */
var __vue_render__$L = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"fluro-inline-edit",on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.blur($event)},"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.enableEdit($event)}}},[(_vm.enabled)?[_c('span',{staticClass:"inline-edit-input",class:{'inline-hide':!_vm.props.editing, 'inline-show':_vm.props.editing}},[_vm._t("edit",null,{"props":_vm.props,"blur":_vm.blur,"focus":_vm.focus})],2),_vm._v(" "),_c('span',{staticClass:"inline-edit-default",class:{'inline-hide':_vm.props.editing, 'inline-show':_vm.props.editing}},[_vm._t("default",null,{"props":_vm.props,"blur":_vm.blur,"focus":_vm.focus})],2)]:[_vm._t("default",null,{"props":_vm.props,"blur":_vm.blur,"focus":_vm.focus})]],2)};
var __vue_staticRenderFns__$L = [];

  /* style */
  const __vue_inject_styles__$M = function (inject) {
    if (!inject) return
    inject("data-v-857604f6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-inline-edit .inline-hide{height:0!important;width:0!important;overflow:hidden!important;display:block!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$M = undefined;
  /* module identifier */
  const __vue_module_identifier__$M = undefined;
  /* functional template */
  const __vue_is_functional_template__$M = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$L = normalizeComponent(
    { render: __vue_render__$L, staticRenderFns: __vue_staticRenderFns__$L },
    __vue_inject_styles__$M,
    __vue_script__$M,
    __vue_scope_id__$M,
    __vue_is_functional_template__$M,
    __vue_module_identifier__$M,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$N = {
  props: {
    options: {
      type: Object,

      default() {
        return {};
      }

    }
  },

  data() {
    return {
      proposed: {
        title: 'Standard',
        event: null
      }
    };
  },

  methods: {
    toggleExpanded(index) {
      var self = this;
      self.$set(self.model[index], 'expanded', !self.model[index].expanded);
    },

    removeEntry(index) {
      var self = this;
      self.model.splice(index, 1);
    },

    add() {
      var self = this;
      var copy = JSON.parse(JSON.stringify(self.proposed));
      self.model.push(copy);
      self.$set(self, 'proposed', {
        title: 'Standard',
        event: null
      });
    }

  },
  computed: {
    model() {
      var self = this;
      return self.options.model;
    },

    field() {
      var self = this;
      return self.options.field;
    },

    fields() {
      var fields = []; /////////////////////////////////

      addField('title', {
        title: 'Ticket Title',
        description: `What kind of ticket? Eg. Adult, VIP, Kids`,
        minimum: 1,
        maximum: 1,
        type: 'string',
        expressions: {
          defaultValue() {
            return 'Standard';
          }

        }
      });
      addField('event', {
        title: 'Events',
        description: `What events should tickets be created for?`,
        minimum: 1,
        maximum: 1,
        type: 'reference',
        directive: '',
        params: {
          restrictType: 'event'
        }
      }); /////////////////////////////////

      function addField(key, data) {
        if (!data.key) {
          data.key = key;
        }

        fields.push(data);
      }

      return fields;
    }

  },
  components: {
    FluroRealmDots: __vue_component__$q,
    FluroContentFormField: __vue_component__$G,
    FluroContentForm: __vue_component__$H
  },
  mixins: [FluroModalMixin]
};

/* script */
const __vue_script__$N = script$N;

/* template */
var __vue_render__$M = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"modal-size",staticStyle:{"max-width":"400px"}},[_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":"ticket"},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('div',[_c('h3',[_vm._v(_vm._s(_vm.field.title)+" "),_c('span',{staticClass:"small text-muted"},[_vm._v("Tickets")])]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v("Create tickets for specific events for each "+_vm._s(_vm.field.title)+" entry")])])]},proxy:true},{key:"right",fn:function(){return [_c('v-btn',{staticClass:"ma-0",on:{"click":function($event){return _vm.close()}}},[_vm._v("\n            \t\tClose\n            \t")])]},proxy:true}])})],1),_vm._v(" "),_c('flex-column-body',_vm._l((_vm.model),function(entry,index){return _c('v-container',{staticClass:"border-bottom",attrs:{"fluid":"","py-2":""}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{attrs:{"xs3":""}},[_c('fluro-icon',{attrs:{"left":"","library":"fas","type":"ticket"}}),_vm._v(" "),_c('strong',[_vm._v(_vm._s(entry.title))])],1),_vm._v(" "),_c('v-flex',[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{attrs:{"shrink":""}},[_c('fluro-realm-dots',{attrs:{"realms":entry.event.realms}})],1),_vm._v(" "),(entry.event)?_c('v-flex',[_c('strong',[_vm._v(_vm._s(entry.event.title))]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(entry.event.firstLine)+" "+_vm._s(_vm._f("readableEventDate")(entry.event)))])]):_vm._e()],1)],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0 mr-1",attrs:{"small":"","content":"More","icon":""},on:{"click":function($event){return _vm.toggleExpanded(index)}}},[_c('fluro-icon',{attrs:{"icon":entry.expanded ? 'angle-down' : 'angle-up'}})],1),_vm._v(" "),_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","content":"Remove","icon":""},on:{"click":function($event){return _vm.removeEntry(index)}}},[_c('fluro-icon',{attrs:{"icon":"trash-alt"}})],1)],1)],1)],1)}),1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticStyle:{"background":"#fafafa"},attrs:{"fluid":"","grid-list-sm":""}},[_c('fluro-content-form',{attrs:{"fields":_vm.fields},scopedSlots:_vm._u([{key:"form",fn:function(ref){
var formFields = ref.formFields;
var fieldHash = ref.fieldHash;
var model = ref.model;
var update = ref.update;
var options = ref.options;
return [_c('v-layout',[_c('v-flex',{attrs:{"xs5":""}},[_c('fluro-content-form-field',{attrs:{"field":fieldHash.title},model:{value:(model),callback:function ($$v) {model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"xs5":""}},[_c('fluro-content-form-field',{attrs:{"field":fieldHash.event},model:{value:(model),callback:function ($$v) {model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"xs2":""}},[_c('v-btn',{attrs:{"block":"","small":"","color":"primary"},on:{"click":_vm.add}},[_vm._v("\n                                Add\n                                "),_c('fluro-icon',{attrs:{"icon":"plus"}})],1)],1)],1)]}}]),model:{value:(_vm.proposed),callback:function ($$v) {_vm.proposed=$$v;},expression:"proposed"}})],1)],1)],1)};
var __vue_staticRenderFns__$M = [];

  /* style */
  const __vue_inject_styles__$N = function (inject) {
    if (!inject) return
    inject("data-v-1bede2b2_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$N = undefined;
  /* module identifier */
  const __vue_module_identifier__$N = undefined;
  /* functional template */
  const __vue_is_functional_template__$N = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$M = normalizeComponent(
    { render: __vue_render__$M, staticRenderFns: __vue_staticRenderFns__$M },
    __vue_inject_styles__$N,
    __vue_script__$N,
    __vue_scope_id__$N,
    __vue_is_functional_template__$N,
    __vue_module_identifier__$N,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$O = {
  props: {
    'field': {
      type: Object
    },
    'value': {
      type: Array,

      default() {
        return [];
      }

    }
  },

  data() {
    return {
      model: this.value
    };
  },

  methods: {
    showModal() {
      var self = this; //////////////////////////////////////

      var promise = self.$fluro.modal({
        component: __vue_component__$M,
        options: {
          field: self.field,
          model: self.model
        }
      });
    }

  },
  computed: {
    selectionSummary() {
      var self = this;

      if (!self.model || !self.model.length) {
        return 'Advanced Ticket Options';
      }

      return lodash.map(self.model, function (entry) {
        return `${entry.title} - ${entry.event.title}`;
      }).join(', ');
    }

  },
  watch: {}
};

/* script */
const __vue_script__$O = script$O;

/* template */
var __vue_render__$N = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"ticketing-manager"},[_c('v-btn',{staticClass:"mx-0",attrs:{"large":"","block":""},on:{"click":_vm.showModal}},[_c('span',[_vm._v(_vm._s(_vm.selectionSummary))])])],1)};
var __vue_staticRenderFns__$N = [];

  /* style */
  const __vue_inject_styles__$O = undefined;
  /* scoped */
  const __vue_scope_id__$O = undefined;
  /* module identifier */
  const __vue_module_identifier__$O = undefined;
  /* functional template */
  const __vue_is_functional_template__$O = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$N = normalizeComponent(
    { render: __vue_render__$N, staticRenderFns: __vue_staticRenderFns__$N },
    __vue_inject_styles__$O,
    __vue_script__$O,
    __vue_scope_id__$O,
    __vue_is_functional_template__$O,
    __vue_module_identifier__$O,
    false,
    undefined,
    undefined,
    undefined
  );

//
var script$P = {
  components: {
    FieldSelectModal: __vue_component__$7,
    FluroContentFormField: __vue_component__$G,
    FluroContentForm: __vue_component__$H,
    OptionsManager: __vue_component__$I,
    ExpressionFieldSelect: __vue_component__$J,
    FluroExpressionEditor: __vue_component__$K,
    FluroInlineEdit: __vue_component__$L
  },
  props: {
    value: {
      type: Object
    },
    expressionFields: {
      type: Array
    },
    item: {
      type: Object
    }
  },

  created() {// this.startListener();
  },

  data() {
    var self = this;
    var model = this.value;
    self.setDefaults(model); ////////////////////////////////

    return {
      tabIndex: 0,
      model,
      editingKey: false,
      showAdvancedOptions: false,
      loadingFields: false,
      focussed: null,
      popup: {
        hide: false,
        hideExpression: false,
        show: false,
        required: false,
        value: false,
        defaultValue: false
      }
    };
  },

  methods: {
    recursiveGUID(fields) {
      var self = this;

      lodash.each(fields, function (field) {
        if (!field.guid) {
          self.$set(field, 'guid', self.$fluro.utils.guid());
        }

        self.recursiveGUID(field.fields);
      });
    },

    setDefaults(model) {
      var self = this;

      if (!model.params) {
        self.$set(model, 'params', {});
      }

      if (!model.params.ticketing) {
        self.$set(model.params, 'ticketing', {
          events: []
        });
      }

      if (!model.params.ticketing.events) {
        self.$set(model.params.ticketing, 'events', []);
      }

      if (!model.expressions) {
        self.$set(model, 'expressions', {});
      }
    },

    deleteField() {
      var self = this;
      self.$emit('deleted');
    },

    selectDetailSheetFields() {
      var self = this;
      self.loadingFields = true; ////////////////////////////////

      return self.$fluro.api.get('/defined/types/contactdetail').then(function (res) {
        self.loadingFields = false;
        self.$fluro.options(res.data, 'Select detail sheet').then(function (definition) {
          definition = JSON.parse(JSON.stringify(definition)); ///////////////////////////////////////

          var detailsBlock = lodash.find(self.model.fields, {
            key: 'details'
          });

          if (!detailsBlock) {
            detailsBlock = {
              title: 'Details',
              type: 'group',
              key: 'details',
              asObject: true,
              minimum: 1,
              maximum: 1,
              askCount: 1,
              fields: [],
              guid: self.$fluro.utils.guid()
            };
            self.model.fields.push(detailsBlock);
          } ///////////////////////////////////////


          var sheetBlock = lodash.find(detailsBlock.fields, {
            key: definition.definitionName
          });

          var dataBlock; ///////////////////////////////////////

          if (!sheetBlock) {
            sheetBlock = {
              title: definition.title,
              type: 'group',
              key: definition.definitionName,
              asObject: true,
              minimum: 1,
              maximum: 1,
              askCount: 1,
              fields: [],
              guid: self.$fluro.utils.guid()
            };
            dataBlock = {
              title: 'Data',
              type: 'group',
              key: 'data',
              asObject: true,
              minimum: 1,
              maximum: 1,
              askCount: 1,
              fields: [],
              guid: self.$fluro.utils.guid()
            }; //Add as a pyramid

            sheetBlock.fields.push(dataBlock);
            detailsBlock.fields.push(sheetBlock);
          } //////////////////////////////


          lodash.each(definition.fields, function (field) {
            // guid:self.$fluro.utils.guid(),
            var existingField = lodash.find(dataBlock.fields, {
              key: field.key
            });

            if (!existingField) {
              field.guid = self.$fluro.utils.guid();
              self.recursiveGUID(field.fields);
              dataBlock.fields.push(field);
            }
          }); //Recursive create GUID


          self.resetRequired();
        }).catch(reject);
      }).catch(function (err) {
        self.loadingFields = false;
      }); // self.$fluro.modal({
      //     component: FieldSelectModal,
      // })
      // .then(function(res) {
      //     console.log('RES', res);
      // });
    },

    selectTitle(select) {
      var scrollbox = this.$refs.scrollbox;

      if (scrollbox) {
        scrollbox.$el.scrollTo(0, 0);
      } /////////////////////////////////////////


      var self = this;

      if (select) {
        setTimeout(function () {
          var match = self.model.type == 'group' ? self.$refs.grouptitle : self.$refs.title;

          if (match && match.$el) {
            var input = match.$el.querySelectorAll('input');

            if (input && input[0]) {
              input = input[0];
              input.focus();
              input.select();
            }
          }
        }, 10);
      }
    },

    injectExpression($event, target) {
      var self = this;
      self.popup[target] = false;
      var currentValue = self.model.expressions[target]; /////////////////////////////////////////
      //LEGACY SUPPORT
      //We need to support the old school angular formly field

      if (target == 'hideExpression') {
        currentValue = self.model.hideExpression;
      } /////////////////////////////////////////


      var newValue;

      if (!currentValue) {
        newValue = $event.path;
      } else {
        newValue = `${currentValue} ${$event.path}`;
      } /////////////////////////////////////////
      //LEGACY SUPPORT
      //We need to support the old school angular formly field


      if (target == 'hideExpression') {
        self.$set(self.model, 'hideExpression', newValue);
      } else {
        /////////////////////////////////////////
        self.$set(self.model.expressions, target, newValue);
      }
    },

    // stopListener() {
    //     var self = this;
    //     self.resetRequired = function() {
    //     }
    // },
    // startListener() {
    //     var self = this;
    //     self.resetRequired = _.debounce(function(field) {
    //         console.log('NEEDS A RESET!', field)
    //         this.$emit('reset');
    //     }, 100)
    // },
    resetRequired: function (field) {
      //Nothing
      var self = this;
      self.previousField = field;
      setTimeout(function () {
        if (self.previousField == field) {
          console.log('NEEDS RESET!');
          self.previousField = false;
          self.$emit('reset');
        }
      }, 100);
    }
  },
  watch: {
    value(v) {
      var self = this;
      self.editingKey = false; // self.stopListener();

      var model = v;
      self.setDefaults(model);
      self.model = model;
      self.tabIndex = 0;
      self.selectTitle(!self.model.title); // self.startListener();
    }

  },

  mounted() {
    var self = this;
    setTimeout(function () {
      self.selectTitle(!self.model.title);
    }, 100);
  },

  asyncComputed: {
    referenceOptions: {
      default: [],

      get() {
        var self = this;
        return new Promise(function (resolve, reject) {
          self.$fluro.types.terms().then(function (terms) {
            /////////////////////////
            var mapped = lodash.chain(terms).values().map(function (term) {
              return {
                name: term.title,
                title: term.title,
                value: term.definitionName
              };
            }).orderBy('title').value(); /////////////////////////


            resolve(mapped);
          }).catch(reject); // Promise.all([
          //     new Promise(function(resolve, reject) {
          //         self.$fluro.types.basicTypes()
          //             .then(function(values) {
          //                 var cleaned = _.chain(values)
          //                     .compact()
          //                     .map(function(type) {
          //                         return {
          //                             name: type.title,
          //                             title: type.title,
          //                             value: type.definitionName,
          //                         }
          //                     })
          //                     .orderBy('title')
          //                     .value();
          //                 resolve(cleaned);
          //             });
          //     }),
          //     new Promise(function(resolve, reject) {
          //         self.$fluro.types.basicTypes()
          //             .then(function(values) {
          //                 var cleaned = _.chain(values)
          //                     .compact()
          //                     .map(function(type) {
          //                         return {
          //                             name: type.title,
          //                             title: type.title,
          //                             value: type.definitionName,
          //                         }
          //                     })
          //                     .orderBy('title')
          //                     .value();
          //                 resolve(cleaned);
          //             });
          //     }),
          // ])
        });
      }

    }
  },
  computed: {
    fullPath() {
      return this.model.key;
    },

    field() {
      return this.model;
    },

    ticketingEnabled() {
      return this.model && this.model.params && this.model.params.ticketing && this.model.params.ticketing.enabled;
    },

    ticketingManager() {
      if (this.model.type == 'reference' && this.restrictType == 'contact' && this.ticketingEnabled) {
        return __vue_component__$N;
      }
    },

    isNumeric() {
      switch (this.model.type) {
        case 'float':
        case 'decimal':
        case 'integer':
        case 'number':
          return true;
      }
    },

    isDate() {
      return this.model.type == 'date';
    },

    currencyOptions() {
      var self = this;
      var array = [];

      if (lodash.get(self.user, 'countryCode') == 'AU') {
        array.push({
          name: `AUD (${self.$fluro.utils.currencySymbol('aud')})`,
          value: 'aud'
        });
      }

      array.push({
        name: `USD (${self.$fluro.utils.currencySymbol('usd')})`,
        value: 'usd'
      });

      if (lodash.get(self.user, 'countryCode') != 'AU') {
        array.push({
          name: `AUD (${self.$fluro.utils.currencySymbol('aud')})`,
          value: 'aud'
        });
      }

      array.push({
        name: `GBP (${self.$fluro.utils.currencySymbol('gbp')})`,
        value: 'gbp'
      });
      array.push({
        name: `CAD (${self.$fluro.utils.currencySymbol('cad')})`,
        value: 'cad'
      });
      return array;
    },

    showDescription() {
      switch (this.model.directive) {
        case 'embedded':
          return;

        default:
          return true;
      }
    },

    showPlaceholder() {
      switch (this.model.directive) {
        case 'custom':
        case 'embedded':
          return;

        default:
          return true;
      }
    },

    showKey() {
      var self = this;
      return self.editingKey; // || !self.model.key;
    },

    advancedOptions() {
      if (this.model.options && this.model.options.length) {
        return true;
      }

      return this.showAdvancedOptions;
    },

    simpleExpressionEnabled() {
      return this.model.type != 'reference' && this.model.type != 'group';
    },

    restrictType() {
      return this.model && this.model.params && this.model.params.restrictType;
    },

    requiresOptions() {
      switch (this.model.directive) {
        case 'select':
        case 'button-select':
        case 'search-select':
        case 'order-select':
          return true;
      }
    },

    ticketingFields() {
      var fields = [];
      addField('enabled', {
        title: 'Create tickets for this contact',
        description: `If selected then this contact will be considered a ticketed attendee if an event is specified during the form submission a 'Standard' ticket will be created for each contact created by this field`,
        minimum: 0,
        maximum: 1,
        type: 'boolean'
      });

      function addField(key, data) {
        if (!data.key) {
          data.key = key;
        }

        fields.push(data);
      }

      return fields;
    },

    fields() {
      var self = this;
      var fields = {};
      var definitionTitle = self.$fluro.types.readable(self.restrictType || 'node', true);
      addField('defaultReferences', {
        title: 'Default References',
        description: `Select which ${definitionTitle} should be selected by default`,
        minimum: 0,
        maximum: self.maximum,
        type: 'reference',
        params: {
          searchInheritable: true,
          allDefinitions: true,
          restrictType: self.restrictType
        }
      });
      addField('allowedValues', {
        title: 'Allowed Options',
        description: 'Add each option that the user may select',
        minimum: 0,
        maximum: 0,
        type: 'string'
      });
      addField('allowedReferences', {
        title: 'Allowed References',
        description: `Select which ${definitionTitle} may be selected by the user`,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          searchInheritable: true,
          allDefinitions: true,
          restrictType: self.restrictType
        }
      });
      addField('wysiwygDefaultValues', {
        title: self.model.maximum == 1 ? 'Default Value' : 'Default Values',
        key: 'defaultValues',
        description: 'Preselect values for this field',
        minimum: 0,
        maximum: 0,
        type: 'string',
        directive: 'wysiwyg'
      });
      addField('codeDefaultValues', {
        title: 'Default Value(s)',
        key: 'defaultValues',
        description: 'add a default value for this field',
        minimum: 0,
        maximum: 0,
        type: 'string',
        directive: 'code',
        params: {
          syntax: self.model.params.syntax
        }
      });
      addField('defaultValues', {
        title: 'Default Value(s)',
        description: 'add a default value for this field',
        minimum: 0,
        maximum: 0,
        type: 'string'
      });
      addField('errorMessage', {
        title: 'Custom Error Message',
        description: 'Customise the message to display to the user if they enter invalid answers for this field',
        minimum: 0,
        maximum: 1,
        type: 'string'
      });
      addField('officeUseOnly', {
        key: 'disableWebform',
        title: 'Office Use Only (Hide from public web forms)',
        description: 'Check this if you want this field to be excluded from public facing webforms',
        minimum: 0,
        maximum: 1,
        type: 'boolean'
      });
      addField('syntax', {
        title: 'Code Syntax',
        minimum: 1,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: [{
          title: 'JSON',
          value: 'json'
        }, {
          title: 'Javascript',
          value: 'js'
        }, {
          title: 'HTML',
          value: 'html'
        }, {
          title: 'CSS',
          value: 'scss'
        }]
      });
      addField('title', {
        title: 'Title',
        // description: 'The title as displayed to the user',
        minimum: 1,
        maximum: 1,
        type: 'string'
      });
      addField('minimum', {
        title: 'Minimum Answers',
        description: 'Minimum amount of answers that can be provided for this field (Setting this to a number higher than 0 will make this field required)',
        minimum: 0,
        maximum: 1,
        type: 'integer',
        params: {
          minValue: 0
        }
      });
      addField('maximum', {
        title: 'Max Answers',
        description: 'Maximum amount of answers that can be provided for this field (usually 1 answer is necessary)',
        minimum: 0,
        maximum: 1,
        type: 'integer',
        params: {
          minValue: 0
        }
      });
      addField('minValue', {
        title: 'Minimum Amount',
        description: 'Minimum amount that can be input',
        minimum: 0,
        maximum: 1,
        type: self.model.type,
        directive: self.model.directive || null,
        params: {
          currency: self.model.params.currency
        }
      });
      addField('maxValue', {
        title: 'Maximum Amount',
        description: 'Maximum amount that can be input',
        minimum: 0,
        maximum: 1,
        type: self.model.type,
        directive: self.model.directive || null,
        params: {
          currency: self.model.params.currency
        }
      });
      addField('minDate', {
        title: 'Earliest Date',
        description: 'Earliest date that can be input',
        minimum: 0,
        maximum: 1,
        type: 'date'
      });
      addField('maxDate', {
        title: 'Latest Date',
        description: 'Latest date that can be input',
        minimum: 0,
        maximum: 1,
        type: 'date'
      });
      addField('groupMinimum', {
        title: 'Minimum',
        key: 'minimum',
        description: 'Minimum amount of entries for this group that can be created',
        minimum: 0,
        maximum: 1,
        type: 'integer',
        params: {
          minValue: 0
        }
      });
      addField('groupMaximum', {
        title: 'Maximum',
        key: 'maximum',
        description: 'Maximum amount of entries for this group that can be created',
        minimum: 0,
        maximum: 1,
        type: 'integer',
        params: {
          minValue: 0
        }
      });
      addField('askCount', {
        title: 'Ask Count',
        description: 'How many input groups should be asked for by default',
        minimum: 0,
        maximum: 1,
        type: 'integer',
        params: {
          minValue: 0
        }
      });
      addField('key', {
        title: 'Database Key',
        description: `A unique key used to store this field's data in the system`,
        minimum: 1,
        maximum: 1,
        type: 'string',
        expressions: {
          // transform(value) {
          //     var regexp = /[^a-zA-Z0-9-_]+/g;
          //     var cleaned = _.camelCase(String(value).replace(regexp, ''));
          //     return cleaned;
          // },
          defaultValue() {
            var regexp = /[^a-zA-Z0-9-_]+/g;

            var cleaned = lodash.camelCase(String(self.model.title).replace(regexp, ''));

            return cleaned;
          }

        }
      });
      addField('description', {
        title: 'Help /Hint text',
        description: 'An optional description that can add extra detail for users entering data',
        minimum: 0,
        maximum: 1,
        type: 'string'
      });
      addField('placeholder', {
        title: 'Placeholder',
        description: 'Faded text that can be displayed inside the field to give a hint as to what the user should type',
        minimum: 0,
        maximum: 1,
        type: 'string'
      });
      addField('type', {
        title: 'Data Type',
        description: 'The required kind of input that can be entered into this field',
        minimum: 1,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: [{
          title: 'Text (String)',
          value: 'string'
        }, {
          title: 'True / False (Boolean)',
          value: 'boolean'
        }, {
          title: 'Date',
          value: 'date'
        }, {
          title: 'Phone Number',
          value: 'string'
        }, {
          title: 'Email Address',
          value: 'email'
        }, {
          title: 'URL',
          value: 'url'
        }, {
          title: 'Content Reference',
          value: 'reference'
        }, {
          title: 'Number',
          value: 'number'
        }, {
          title: 'Integer (Whole Number)',
          value: 'integer'
        }, {
          title: 'Decimal (Float)',
          value: 'float'
        }, {
          title: 'No value',
          value: 'void'
        }]
      });
      addField('referenceType', {
        key: 'restrictType',
        title: 'Reference Type',
        description: 'Restrict what kind of items can be referenced in this field',
        minimum: 0,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: self.referenceOptions
      });
      addField('currency', {
        key: 'currency',
        title: 'Currency',
        description: 'Select what currency symbol to display',
        minimum: 0,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: self.currencyOptions
      });
      addField('placeholder', {
        title: 'Placeholder',
        description: 'Faded text that can be displayed inside the field to give a hint as to what the user should type',
        minimum: 0,
        maximum: 1,
        type: 'string'
      }); /////////////////////////////////////    

      var inputOptions = [];

      switch (self.model.type) {
        case 'reference':
          inputOptions.push({
            title: 'Reference Select',
            value: 'reference-select'
          });
          inputOptions.push({
            title: 'Embedded Form',
            value: 'embedded'
          });
          inputOptions.push({
            title: 'File Upload',
            value: 'upload'
          });
          break;

        case 'boolean':
          inputOptions.push({
            title: 'Checkbox',
            value: 'input'
          });
          inputOptions.push({
            title: 'Terms / Conditions Checkbox',
            value: 'terms'
          });
          break;

        case 'string':
          if (self.model.maximum != 1) {
            inputOptions.push({
              title: 'Multiple Text Field',
              value: 'input'
            });
          } else {
            inputOptions.push({
              title: 'Text Field',
              value: 'input'
            });
          }

          inputOptions.push({
            title: 'Text Area',
            value: 'textarea'
          });
          inputOptions.push({
            title: 'Rich Text (WYSIWYG)',
            value: 'wysiwyg'
          });
          inputOptions.push({
            title: 'Code Editor',
            value: 'code'
          });
          inputOptions.push({
            title: 'Select Dropdown',
            value: 'select'
          });
          inputOptions.push({
            title: 'Multiple Button Select',
            value: 'button-select'
          });
          inputOptions.push({
            title: 'Orderable Select',
            value: 'order-select'
          });
          inputOptions.push({
            title: 'Autocomplete Search',
            value: 'search-select'
          });
          inputOptions.push({
            title: 'Time Picker',
            value: 'time-select'
          });
          inputOptions.push({
            title: 'Color Picker',
            value: 'color'
          });
          inputOptions.push({
            title: 'Signature',
            value: 'signature'
          });
          break;

        case 'date':
          inputOptions.push({
            title: 'Date Picker',
            value: 'date-select'
          });
          inputOptions.push({
            title: 'Date + Time Picker',
            value: 'datetime-select'
          });
          inputOptions.push({
            title: 'Age / Birthdate Select',
            value: 'dob-select'
          });
          break;

        case 'number':
        case 'integer':
        case 'decimal':
        case 'float':
          inputOptions.push({
            title: 'Number Input',
            value: 'input'
          });
          inputOptions.push({
            title: 'Currency Input',
            value: 'currency'
          });
          break;

        default:
          inputOptions.push({
            title: 'Text Input',
            value: 'input'
          });
          break;
      } //////////////////////////////////////////


      if (self.item._type == 'component') {
        if (self.model.type == 'string') {
          inputOptions.push({
            title: 'Website Builder Menu Select',
            value: 'app-menu-select'
          });
          inputOptions.push({
            title: 'Website Builder Page Select',
            value: 'app-page-select'
          });
          inputOptions.push({
            title: 'Website Builder Size Select',
            value: 'app-size-select'
          });
          inputOptions.push({
            title: 'Website Builder Theme Select',
            value: 'app-theme-select'
          });
        }
      } //////////////////////////////////////////


      inputOptions.push({
        title: 'Hidden Value',
        value: 'value'
      });
      inputOptions.push({
        title: 'Custom HTML',
        value: 'custom'
      }); /////////////////////////////////////    

      addField('directive', {
        title: 'Input Type',
        description: 'What kind of widget should be provided to the user for input?',
        minimum: 1,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: inputOptions
      });
      addField('asObject', {
        title: 'Group as Sub Object',
        description: `Treat this group as it's own entity. If not selected this group will be purely for visual layout.`,
        minimum: 0,
        maximum: 1,
        type: 'boolean'
      });
      addField('sameLine', {
        title: 'Same Line',
        description: 'Attempt to render fields in this group on the same line on larger screens',
        minimum: 0,
        maximum: 1,
        type: 'boolean'
      });
      addField('className', {
        title: 'CSS Classes',
        description: 'Add CSS classes to this field',
        minimum: 0,
        maximum: 1,
        type: 'string'
      });
      addField('template', {
        title: 'Custom HTML',
        description: 'Custom HTML to be shown for this field',
        minimum: 0,
        maximum: 1,
        type: 'string',
        directive: 'code',
        params: {
          syntax: 'html'
        }
      }); /////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////

      var embeddedType = self.model.params.restrictType;
      var embeddedTitle = self.$fluro.types.readable(embeddedType);
      var embeddedPlural = self.$fluro.types.readable(embeddedType, true);

      var definitions = lodash.chain(self.$fluro.glossary).reduce(function (set, term, key) {
        term.definitionName = key;

        if (term.parentType == embeddedType) {
          set.push(term);
        }

        return set;
      }, []).map(function (definition) {
        return {
          name: definition.title,
          value: definition.definitionName
        };
      }).orderBy(function (definition) {
        return definition.title;
      }).value(); ////////////////////////////////////////////


      addField('targetDefinition', {
        title: 'Definition',
        description: `Select the definition that should be applied to ${embeddedPlural}.`,
        minimum: 0,
        maximum: 1,
        type: 'reference',
        expressions: {
          hide() {
            return !definitions.length;
          }

        },
        params: {
          restrictType: 'realm'
        }
      });
      addField('targetRealms', {
        title: `Create ${embeddedTitle} in Realms`,
        description: `Select realms that these ${embeddedPlural} should be created in. If left blank it will default to the same realm as the form submission itself`,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        directive: 'realm-select',
        params: {
          restrictType: 'realm'
        }
      });
      addField('targetHouseholdRole', {
        title: 'Household Role',
        description: `Select the household role to add to these ${embeddedPlural}`,
        minimum: 0,
        maximum: 1,
        type: 'string',
        directive: 'select',
        options: [{
          name: 'None',
          value: ''
        }, {
          name: 'Parent',
          value: 'parent'
        }, {
          name: 'Child',
          value: 'child'
        }],
        expressions: {
          hide() {
            return embeddedType != 'contact';
          }

        }
      });
      addField('targetCapabilities', {
        title: 'Add Capabilities',
        description: `Select capabilities that will be added to these ${embeddedPlural}. `,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          restrictType: 'capability'
        },
        expressions: {
          hide() {
            return embeddedType != 'contact';
          }

        }
      });
      addField('targetTeams', {
        title: 'Add to Groups / Teams',
        description: `Select groups and teams that these ${embeddedPlural} should be created in. `,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          restrictType: 'team'
        },
        expressions: {
          hide() {
            return embeddedType != 'contact';
          }

        }
      });
      addField('targetTags', {
        title: 'Add Tags',
        description: `Select tags to add to these ${embeddedPlural}. `,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          restrictType: 'tag'
        }
      });
      addField('targetProcesses', {
        title: 'Add to Processes',
        description: `Select processes that these ${embeddedPlural} should be added in to. `,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          restrictType: 'definition'
        }
      });
      addField('targetReactions', {
        title: 'Trigger Reactions',
        description: `Select reaction pipelines that these ${embeddedPlural} should be added in to. `,
        minimum: 0,
        maximum: 0,
        type: 'reference',
        params: {
          restrictType: 'reaction'
        }
      }); ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      ///////////////////////////////////////////////
      ///////////////////////////////////////////////

      function addField(key, data) {
        if (!data.key) {
          data.key = key;
        }

        fields[key] = data;
      }

      return fields;
    }

  }
};

/* script */
const __vue_script__$P = script$P;

/* template */
var __vue_render__$O = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[(_vm.model.type == 'group')?_c('tabset',{model:{value:(_vm.tabIndex),callback:function ($$v) {_vm.tabIndex=$$v;},expression:"tabIndex"}},[_c('tab',{attrs:{"heading":"Group Settings"}},[_c('flex-column-body',[_c('v-container',[_c('fluro-content-form-field',{ref:"grouptitle",attrs:{"field":_vm.fields.title},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showKey),expression:"showKey"}]},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.key},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),(!_vm.editingKey)?_c('div',{staticClass:"key-preview",on:{"click":function($event){_vm.editingKey = true;}}},[_c('fluro-icon',{attrs:{"icon":"pencil"}}),_vm._v(" key: "+_vm._s(_vm.model.key)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")],1):_vm._e(),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.asObject},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),(!_vm.model.asObject)?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.sameLine},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:_vm._e(),_vm._v(" "),(_vm.model.asObject)?_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.groupMinimum},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.groupMaximum},on:{"input":function($event){return _vm.resetRequired(_vm.fields.groupMaximum)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.askCount},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1):_vm._e(),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.className},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],2)],1)],1),_vm._v(" "),_c('tab',{attrs:{"heading":"Expressions"}},[_c('flex-column-body',[_c('v-container',{staticClass:"border-bottom",staticStyle:{"background":"#fff"}},[_c('label',[_c('strong',[_vm._v("Expressions and Logic")])]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v("Expressions are short pieces of javascript that can be used to alter the properties of this field depending on changes made in other fields")]),_vm._v(" "),_c('v-btn',{staticClass:"ml-0",attrs:{"small":"","href":"https://support.fluro.io/kb/advanced-form-expressions-guide","target":"_blank"}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClick here for more information\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"external-link","right":""}})],1)],1),_vm._v(" "),_c('v-container',{staticClass:"border-bottom",staticStyle:{"background":"#fff"}},[_c('label',[_c('strong',[_vm._v("Variables")])]),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs3":""}},[_c('strong',[_vm._v("data")])]),_vm._v(" "),_c('v-flex',{staticClass:"sm muted",attrs:{"xs9":""}},[_vm._v("The root level model for the entire form, useful for absolute paths.")])],1),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs3":""}},[_c('strong',[_vm._v("model")])]),_vm._v(" "),_c('v-flex',{staticClass:"sm muted",attrs:{"xs9":""}},[_vm._v("The immediate model this field is attached to. Useful for relative paths")])],1)],1),_vm._v(" "),_c('v-container',[_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.show}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Show group if","hint":"Show this group only if this expression returns true ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.show),callback:function ($$v) {_vm.$set(_vm.model.expressions, "show", $$v);},expression:"model.expressions.show"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}],null,false,2555211843),model:{value:(_vm.popup.show),callback:function ($$v) {_vm.$set(_vm.popup, "show", $$v);},expression:"popup.show"}},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'show')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1),_vm._v(" "),_c('div',{staticClass:"expression-group",class:{active:_vm.model.hideExpression}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Hide group if","hint":"Hide this group if this expression returns true ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.hideExpression),callback:function ($$v) {_vm.$set(_vm.model, "hideExpression", $$v);},expression:"model.hideExpression"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}],null,false,2555211843),model:{value:(_vm.popup.hideExpression),callback:function ($$v) {_vm.$set(_vm.popup, "hideExpression", $$v);},expression:"popup.hideExpression"}},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'hideExpression')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1)])],1)],1)],1):_c('tabset',{model:{value:(_vm.tabIndex),callback:function ($$v) {_vm.tabIndex=$$v;},expression:"tabIndex"}},[_c('tab',{attrs:{"heading":"Field Settings"}},[_c('flex-column-body',{ref:"scrollbox"},[_c('v-container',[_c('fluro-content-form-field',{ref:"title",attrs:{"field":_vm.fields.title},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showKey),expression:"showKey"}]},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.key},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),(!_vm.editingKey)?_c('div',{staticClass:"key-preview",on:{"click":function($event){_vm.editingKey = true;}}},[_c('fluro-icon',{attrs:{"icon":"pencil"}}),_vm._v(" key: "+_vm._s(_vm.model.key)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")],1):_vm._e(),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.type},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),(_vm.model.type == 'reference')?_c('fluro-content-form-field',{attrs:{"field":_vm.fields.referenceType},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}):_vm._e(),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.directive},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),(_vm.model.directive == 'currency')?_c('fluro-content-form-field',{attrs:{"field":_vm.fields.currency},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}):_vm._e(),_vm._v(" "),(_vm.model.type != 'void')?_c('v-container',{staticClass:"grid-list-xl",attrs:{"pa-0":"","fluid":""}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.minimum},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.maximum},on:{"input":function($event){return _vm.resetRequired(_vm.fields.maximum)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),(_vm.model.directive == 'embedded')?[_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.askCount},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)]:_vm._e()],2)],1):_vm._e(),_vm._v(" "),(_vm.isNumeric)?_c('v-container',{staticClass:"grid-list-xl",attrs:{"pa-0":"","fluid":""}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.minValue},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.maxValue},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})],1)],1)],1):_vm._e(),_vm._v(" "),(_vm.isDate)?_c('v-container',{staticClass:"grid-list-xl",attrs:{"pa-0":"","fluid":""}},[_c('v-layout',[_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.minDate},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"xs6":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.maxDate},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})],1)],1)],1):_vm._e(),_vm._v(" "),(_vm.showDescription)?_c('fluro-content-form-field',{attrs:{"field":_vm.fields.description},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}):_vm._e(),_vm._v(" "),(_vm.showPlaceholder)?_c('fluro-content-form-field',{attrs:{"field":_vm.fields.placeholder},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}):_vm._e(),_vm._v(" "),(_vm.model.directive == 'code')?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.syntax},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})]:_vm._e(),_vm._v(" "),(_vm.model.directive == 'custom')?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.template},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:[(_vm.requiresOptions)?[(_vm.advancedOptions)?[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Selectable Options"}},[_c('options-manager',{model:{value:(_vm.model.options),callback:function ($$v) {_vm.$set(_vm.model, "options", $$v);},expression:"model.options"}})],1)]:[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.allowedValues},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('div',{staticClass:"sm muted",on:{"click":function($event){_vm.showAdvancedOptions = true;}}},[_vm._v("Show advanced labelling options")])]]:_vm._e(),_vm._v(" "),(_vm.model.directive != 'embedded')?[(_vm.model.type == 'reference')?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.allowedReferences},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.defaultReferences},on:{"input":function($event){return _vm.resetRequired(_vm.fields.defaultReferences)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:[(_vm.model.directive == 'wysiwyg')?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.wysiwygDefaultValues},on:{"input":function($event){return _vm.resetRequired(_vm.fields.wysiwygDefaultValues)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:(_vm.model.directive == 'code')?[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.codeDefaultValues},on:{"input":function($event){return _vm.resetRequired(_vm.fields.codeDefaultValues)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.defaultValues},on:{"input":function($event){return _vm.resetRequired(_vm.fields.defaultValues)}},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]]]:_vm._e(),_vm._v(" "),(_vm.model.directive == 'embedded' && _vm.restrictType == 'contact')?_c('fluro-panel',[_c('fluro-panel-title',[_c('strong',[_vm._v(_vm._s(_vm._f("definitionTitle")(_vm.restrictType))+" Options")])]),_vm._v(" "),_c('fluro-panel-body',[_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetRealms},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('v-input',{staticClass:"no-flex"},[_c('v-label',[_vm._v("Add fields from Detail Sheets")]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v("Add other pre-defined fields to this contact")]),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"loading":_vm.loadingFields},on:{"click":_vm.selectDetailSheetFields}},[_vm._v("Select Fields")])],1),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetHouseholdRole},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetDefinition},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetTeams},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetProcesses},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetTags},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetCapabilities},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.targetReactions},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})],1)],1):_vm._e(),_vm._v(" "),(_vm.model.directive == 'embedded' && _vm.restrictType == 'contact')?_c('fluro-panel',[_c('fluro-panel-title',[_c('strong',[_vm._v("Ticketing")])]),_vm._v(" "),_c('fluro-panel-body',[_c('fluro-content-form',{attrs:{"fields":_vm.ticketingFields},scopedSlots:_vm._u([{key:"form",fn:function(ref){
var formFields = ref.formFields;
var fieldHash = ref.fieldHash;
var model = ref.model;
var update = ref.update;
var options = ref.options;
return [_c('fluro-content-form-field',{attrs:{"field":fieldHash.enabled},model:{value:(model),callback:function ($$v) {model=$$v;},expression:"model"}}),_vm._v(" "),(_vm.ticketingEnabled)?[(_vm.ticketingManager)?_c(_vm.ticketingManager,{ref:"ticketingManager",tag:"component",attrs:{"field":_vm.field},model:{value:(model.events),callback:function ($$v) {_vm.$set(model, "events", $$v);},expression:"model.events"}}):_vm._e()]:_vm._e()]}}],null,false,2834436234),model:{value:(_vm.model.params.ticketing),callback:function ($$v) {_vm.$set(_vm.model.params, "ticketing", $$v);},expression:"model.params.ticketing"}})],1)],1):_vm._e(),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.errorMessage},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.className},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.fields.officeUseOnly},model:{value:(_vm.model.params),callback:function ($$v) {_vm.$set(_vm.model, "params", $$v);},expression:"model.params"}})]],2)],1)],1),_vm._v(" "),_c('tab',{attrs:{"heading":"Expressions"}},[_c('flex-column-body',[_c('v-container',{staticClass:"border-bottom",staticStyle:{"background":"#fff"}},[_c('label',[_c('strong',[_vm._v("Expressions and Logic")])]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v("Expressions are short pieces of javascript that can be used to alter the properties of this field depending on changes made in other fields")]),_vm._v(" "),_c('v-btn',{staticClass:"ml-0",attrs:{"small":"","href":"https://support.fluro.io/kb/advanced-form-expressions-guide","target":"_blank"}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClick here for more information\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"external-link","right":""}})],1)],1),_vm._v(" "),_c('v-container',{staticClass:"border-bottom",staticStyle:{"background":"#fff"}},[_c('label',[_c('strong',[_vm._v("Variables")])]),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs3":""}},[_c('strong',[_vm._v("data")])]),_vm._v(" "),_c('v-flex',{staticClass:"sm muted",attrs:{"xs9":""}},[_vm._v("The root level model for the entire form, useful for absolute paths.")])],1),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs3":""}},[_c('strong',[_vm._v("model")])]),_vm._v(" "),_c('v-flex',{staticClass:"sm muted",attrs:{"xs9":""}},[_vm._v("The immediate model this field is attached to. Useful for relative paths")])],1)],1),_vm._v(" "),_c('v-container',[_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.show}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Show this field if","hint":"Show this field only if this expression returns true ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.show),callback:function ($$v) {_vm.$set(_vm.model.expressions, "show", $$v);},expression:"model.expressions.show"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}])},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'show')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1),_vm._v(" "),_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.hide}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Hide this field if","hint":"Hide this field if this expression returns true ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.hide),callback:function ($$v) {_vm.$set(_vm.model.expressions, "hide", $$v);},expression:"model.expressions.hide"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}])},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'hide')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1),_vm._v(" "),(_vm.simpleExpressionEnabled)?_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.defaultValue}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Set default value to","hint":"Set the default value, (the value before the user changes it) of this field depending on the input of another. ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.defaultValue),callback:function ($$v) {_vm.$set(_vm.model.expressions, "defaultValue", $$v);},expression:"model.expressions.defaultValue"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}],null,false,2555211843),model:{value:(_vm.popup.defaultValue),callback:function ($$v) {_vm.$set(_vm.popup, "defaultValue", $$v);},expression:"popup.defaultValue"}},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'defaultValue')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1):_vm._e(),_vm._v(" "),(_vm.simpleExpressionEnabled)?_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.value}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Set value to","hint":"Set the value of this field depending on the input of another","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.value),callback:function ($$v) {_vm.$set(_vm.model.expressions, "value", $$v);},expression:"model.expressions.value"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}],null,false,2555211843),model:{value:(_vm.popup.value),callback:function ($$v) {_vm.$set(_vm.popup, "value", $$v);},expression:"popup.value"}},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'value')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1):_vm._e(),_vm._v(" "),(_vm.simpleExpressionEnabled)?_c('div',{staticClass:"expression-group",class:{active:_vm.model.expressions.required}},[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Require this field if","hint":"Require input for this field if it's visible and this expression returns true ","persistent-hint":true}},[_c('v-layout',[_c('v-flex',[_c('fluro-expression-editor',{model:{value:(_vm.model.expressions.required),callback:function ($$v) {_vm.$set(_vm.model.expressions, "required", $$v);},expression:"model.expressions.required"}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"top":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0 ml-1",attrs:{"icon":"","small":""}},on),[_c('fluro-icon',{attrs:{"icon":"bullseye"}})],1)]}}],null,false,2555211843),model:{value:(_vm.popup.required),callback:function ($$v) {_vm.$set(_vm.popup, "required", $$v);},expression:"popup.required"}},[_vm._v(" "),_c('div',[_c('expression-field-select',{attrs:{"context":_vm.model},on:{"click":function($event){return _vm.injectExpression($event, 'required')}},model:{value:(_vm.expressionFields),callback:function ($$v) {_vm.expressionFields=$$v;},expression:"expressionFields"}})],1)])],1)],1)],1)],1):_vm._e()])],1)],1)],1)],1)};
var __vue_staticRenderFns__$O = [];

  /* style */
  const __vue_inject_styles__$P = function (inject) {
    if (!inject) return
    inject("data-v-a33acdb8_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.key-name{margin-bottom:10px;display:block}.key-name.fade{opacity:.5}.key{border-radius:3px;background:rgba(0,0,0,.1);padding:2px;display:block}.input-block{background:#fff;display:block;border:1px solid #2ad4b9;width:100%}.expression-group{padding:15px 15px;background:rgba(0,0,0,.05);border-radius:3px;margin-top:16px;border:1px solid transparent}.expression-group.active{background:rgba(240,151,78,.1);border:1px solid rgba(240,151,78,.5);color:#f0974e}.key-preview{margin-top:-15px;font-size:.8em;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$P = undefined;
  /* module identifier */
  const __vue_module_identifier__$P = undefined;
  /* functional template */
  const __vue_is_functional_template__$P = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$O = normalizeComponent(
    { render: __vue_render__$O, staticRenderFns: __vue_staticRenderFns__$O },
    __vue_inject_styles__$P,
    __vue_script__$P,
    __vue_scope_id__$P,
    __vue_is_functional_template__$P,
    __vue_module_identifier__$P,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var hasBeenReset; //////////////////////////////////////////////////

var injectedScripts = {};

function injectScript(scriptURL, callback) {
  if (injectedScripts[scriptURL]) {
    return callback();
  } //Keep note so we don't inject twice


  injectedScripts[scriptURL] = true; //////////////////////////////////////

  var script = document.createElement("script");
  script.type = "text/javascript";
  script.async = true;
  script.onload = callback;
  script.src = scriptURL;
  document.getElementsByTagName("head")[0].appendChild(script); ////////////////////////////////////

  console.log("Appended script dependency", scriptURL);
} //////////////////////////////////////////////////


var script$Q = {
  props: {
    contextField: {
      type: Object
    },
    title: {
      type: String
    },
    prefill: {
      type: Boolean,

      default() {
        return true;
      }

    },
    context: {
      type: String,

      default() {
        //By default
        return this.$fluro.global.defaultFormContext;
      }

    },
    definition: {
      type: Object,
      required: true
    },
    paymentIntegration: {
      type: Object
    },
    linkedProcess: {
      type: [Object, String]
    },
    linkedEvent: {
      type: [Object, String]
    },
    debugMode: {
      type: Boolean
    },
    submissionConfig: {
      type: Object,

      default() {
        return {};
      }

    },
    value: {
      type: Object,

      default() {
        return {
          data: {}
        };
      }

    },
    defaultState: {
      type: String,

      default() {
        return "ready";
      }

    },
    options: {
      default: function () {
        var self = this;
        return {
          validateSuccess: true,
          backupUploadRealm: lodash.chain(self.definition).get("realms").first().value()
        };
      },
      type: Object
    }
  },

  data() {
    return {
      paymentReady: false,
      dataModel: JSON.parse(JSON.stringify(this.value)),
      // model: {
      //     data: {},
      // },
      serverErrors: "",
      errorMessages: [],
      result: null,
      state: this.defaultState
    };
  },

  // beforeCreate: function() {
  // 				var self = this;
  // 				Promise.all([
  // 												DynamicImportService.load('src/components/form/FluroContentForm.vue', function() {
  // 																return import('src/components/form/FluroContentForm.vue')
  // 												}),
  // 												DynamicImportService.load('src/components/form/FluroContentFormField.vue', function() {
  // 																return import('src/components/form/FluroContentFormField.vue')
  // 												}),
  // 								])
  // 								.then(function(results) {
  // 												// console.log('Set Components', results);
  // 												self.$options.components.FluroContentForm = results[0];
  // 												self.$options.components.FluroContentFormField = results[1];
  // 												self.ready = true;
  // 								})
  // },
  created() {
    // console.log('INTERACTION FORM VUE', Vue.$store._modulesNamespaceMap);
    this.reset();
  },

  mounted() {
    this.validate();
    this.initializePayment();
  },

  watch: {
    state(state) {
      this.$emit("state", state);
    },

    defaultState(state) {
      this.state = state;
    },

    paymentIntegration: "initializePayment"
  },
  computed: {
    renderable() {
      return this.definition; // && this.ready;
    },

    recursiveClick() {
      var self = this;

      if (!self.debugMode) {
        return;
      } //Create a callback


      return function (component) {
        // console.log('EMIT NOW!', component.field)
        self.$emit("debug", component.field);
      };
    },

    mobile() {
      return this.$vuetify.breakpoint.xsOnly;
    },

    receiptInput() {
      return {
        title: "Where should we send the receipt?",
        placeholder: "Eg. me@website.com",
        key: "receiptEmail",
        type: "email",
        minimum: 0,
        maximum: 1
      };
    },

    activeModifiers() {
      var self = this; //Store the calculatedAmount on the scope

      var calculatedTotal = self.baseAmount || 0;
      var date = Date.now(); /////////////////////////////////////////////////////

      var modifications = []; /////////////////////////////////////////////////////

      var modifiers = self.paymentDetails.modifiers;

      if (!modifiers || !modifiers.length) {
        console.log("No modifiers");
        return modifications;
      } /////////////////////////////////////////////////////
      //Loop through each modifier


      var activeModifiers = lodash.chain(modifiers).map(function (modifier) {
        //Create a new context for this modifier
        var context = {
          date: date,
          calculatedTotal,
          model: self.dataModel,
          data: self.dataModel,
          matchInArray: self.$fluro.utils.matchInArray,
          //Basic Bits
          getAge: self.$fluro.utils.getAge,
          Date: Date,
          Math: Math,
          String: String,
          Date: Date,
          parseInt: parseInt,
          parseFloat: parseFloat,
          Boolean: Boolean,
          Number: Number
        }; /////////////////////////////////////////////////////

        var parsedValue = self.evaluate(modifier.expression, context);
        parsedValue = Number(parsedValue); //.toFixed(2);
        /////////////////////////////////////////////////////

        if (isNaN(parsedValue)) {
          //We have an issue here
          // self.debugLog('NOT A NUMBER', modifier.expression, context, parsedValue)
          return;
        } /////////////////////////////////////////
        //Check the condition


        var parsedCondition = true;

        if (modifier.condition && String(modifier.condition).length) {
          parsedCondition = self.evaluate(modifier.condition, context);
        } /////////////////////////////////////////
        //If the condition returns false then just stop here and go to the next modifier


        if (!parsedCondition) {
          //Modifier is not active
          // self.debugLog('CONDITION DOES NOT MATCH', parsedCondition)
          return;
        } /////////////////////////////////////////


        var operator = "";
        var operatingValue = self.$fluro.utils.formatCurrency(parsedValue, self.currency);

        switch (modifier.operation) {
          case "add":
            operator = "+";
            calculatedTotal = calculatedTotal + parsedValue;
            break;

          case "subtract":
            operator = "-";
            calculatedTotal = calculatedTotal - parsedValue;
            break;

          case "divide":
            operator = "/";
            operatingValue = parsedValue;
            calculatedTotal = calculatedTotal / parsedValue;
            break;

          case "multiply":
            operator = "x";
            operatingValue = parsedValue;
            calculatedTotal = calculatedTotal * parsedValue;
            break;

          case "set":
            calculatedTotal = parsedValue;
            break;
        } /////////////////////////////////////////


        var readableOperator = `${operator} ${operatingValue}`;

        if (!parsedValue) {
          readableOperator = "";
        }

        var resultModified = {
          title: modifier.title,
          total: Number(parseFloat(calculatedTotal).toFixed(2)),
          description: readableOperator,
          operation: modifier.operation
        };
        return resultModified;
      }).compact().value();

      if (!activeModifiers || !activeModifiers.length) {
        return [];
      } /////////////////////////////////////////////////////


      var lastSetIndex = lodash.findLastIndex(activeModifiers, function (mod) {
        return mod.operation == "set";
      }); //////////////////////////////////////
      //A Set was used


      if (lastSetIndex && lastSetIndex != -1) {
        activeModifiers = lodash.slice(activeModifiers, lastSetIndex);
      } //////////////////////////////////////


      return activeModifiers;
    },

    currency() {
      return this.paymentDetails.currency || "";
    },

    symbol() {
      return this.$fluro.utils.currencySymbol(self.currency);
    },

    baseAmount() {
      return this.paymentDetails.amount;
    },

    formattedBaseAmount() {
      var self = this;
      return self.$fluro.utils.formatCurrency(self.baseAmount, self.currency);
    },

    total() {
      var self = this;
      var calculatedTotal = this.baseAmount;

      if (self.activeModifiers && self.activeModifiers.length) {
        calculatedTotal = lodash.last(self.activeModifiers).total;
      } //If the modifiers change the price below 0 then change the total back to 0


      if (!calculatedTotal || isNaN(calculatedTotal) || calculatedTotal < 0) {
        calculatedTotal = 0;
      }

      return calculatedTotal;
    },

    formattedTotal() {
      var self = this;
      return self.$fluro.utils.formatCurrency(self.total, self.currency);
    },

    paymentDetails() {
      return this.definition.paymentDetails || {};
    },

    showPaymentForm() {
      if (this.requirePayment || this.allowPayment) {
        return this.total && parseInt(this.total) > 0;
      }
    },

    requirePayment() {
      return this.paymentDetails.required;
    },

    allowPayment() {
      if (this.requirePayment) {
        return;
      }

      return this.paymentDetails.allow;
    },

    formErrors() {},

    hasErrors() {
      return this.errorMessages.length ? true : false;
    },

    formOptions() {
      return this.definition.data;
    },

    paymentFields() {
      var self = this;
      var fields = [];
      var defaultCardName;
      var defaultCardNumber;
      var defaultCardExpMonth;
      var defaultCardExpYear;
      var defaultCardCVC;

      if (self.debugMode) {
        defaultCardName = "John Appleseed";
        defaultCardNumber = "4242424242424242";
        defaultCardExpMonth = "09";
        defaultCardExpYear = "2025";
        defaultCardCVC = "123";
      } //////////////////////////////


      fields.push({
        title: "Name on Card",
        key: "cardName",
        type: "string",
        minimum: 1,
        maximum: 1,
        defaultValues: [defaultCardName]
      });
      fields.push({
        title: "Card Number",
        key: "cardNumber",
        type: "string",
        minimum: 1,
        maximum: 1,
        defaultValues: [defaultCardNumber],
        params: {
          mask: "credit-card"
        }
      });
      var row = {
        type: "group",
        sameLine: true,
        fields: []
      };
      row.fields.push({
        title: "Expiry Month",
        key: "cardExpMonth",
        type: "string",
        placeholder: "MM",
        minimum: 1,
        maximum: 1,
        className: "xs4",
        defaultValues: [defaultCardExpMonth]
      });
      row.fields.push({
        title: "Expiry Year",
        key: "cardExpYear",
        type: "string",
        placeholder: "YYYY",
        minimum: 1,
        maximum: 1,
        className: "xs4",
        defaultValues: [defaultCardExpYear]
      });
      row.fields.push({
        title: "CVN",
        key: "cardCVC",
        type: "string",
        minimum: 1,
        maximum: 1,
        className: "xs4",
        defaultValues: [defaultCardCVC]
      });
      fields.push(row);
      return fields;
    },

    fields() {
      var self = this;
      var allFields = []; //////////////////////////////////////////

      var nameFields = {
        key: "_name",
        type: "group",
        fields: [],
        className: "layout row wrap"
      }; //////////////////////////////////////////

      if (self.askFirstName) {
        nameFields.fields.push({
          key: "_firstName",
          minimum: self.requireFirstName ? 1 : 0,
          maximum: 1,
          title: "First Name",
          directive: "input",
          type: "string",
          className: "xs12 sm6",
          defaultValues: self.defaultUserValue("firstName")
        });
      }

      if (self.askLastName) {
        nameFields.fields.push({
          key: "_lastName",
          minimum: self.requireLastName ? 1 : 0,
          maximum: 1,
          title: "Last Name",
          directive: "input",
          type: "string",
          className: "xs12 sm6",
          defaultValues: self.defaultUserValue("lastName")
        });
      } //If there are actually name fields


      if (nameFields.fields && nameFields.fields.length) {
        //Insert the name row
        allFields.push(nameFields);
      } //////////////////////////////////////////


      if (self.askGender) {
        allFields.push({
          key: "_gender",
          minimum: this.requireGender ? 1 : 0,
          maximum: 1,
          title: "Gender",
          directive: "select",
          type: "string",
          options: [{
            name: "Male",
            value: "male"
          }, {
            name: "Female",
            value: "female"
          }]
        });
      } //////////////////////////////////////////


      if (self.askEmail) {
        allFields.push({
          key: "_email",
          minimum: self.requireEmail ? 1 : 0,
          maximum: 1,
          title: "Email Address",
          directive: "input",
          type: "email",
          defaultValues: self.defaultUserValue("email")
        });
      }

      if (self.askPhone) {
        allFields.push({
          key: "_phoneNumber",
          minimum: self.requirePhone ? 1 : 0,
          maximum: 1,
          title: "Phone Number",
          directive: "input",
          type: "string",
          defaultValues: self.defaultUserValue("phoneNumber")
        });
      }

      if (self.askDOB) {
        allFields.push({
          key: "_dob",
          minimum: self.requireDOB ? 1 : 0,
          maximum: 1,
          title: "Date of Birth",
          directive: "dob-select",
          type: "date"
        });
      } //Get the form fields


      var formFields = self.definition.fields; //Combine them together

      allFields = allFields.concat(formFields); // console.log('ALL FIELDS', allFields);

      return allFields;
    },

    // if (!interactionFormSettings.allowAnonymous && !interactionFormSettings.disableDefaultFields) {
    //     interactionFormSettings.requireFirstName = true;
    //     interactionFormSettings.requireLastName = true;
    //     interactionFormSettings.requireGender = true;
    //     interactionFormSettings.requireEmail = true;
    //     switch (interactionFormSettings.identifier) {
    //         case 'both':
    //             interactionFormSettings.requireEmail =
    //                 interactionFormSettings.requirePhone = true;
    //             break;
    //         case 'email':
    //             interactionFormSettings.requireEmail = true;
    //             break;
    //         case 'phone':
    //             interactionFormSettings.requirePhone = true;
    //             break;
    //         case 'either':
    //             interactionFormSettings.askPhone = true;
    //             interactionFormSettings.askEmail = true;
    //             break;
    //     }
    // }
    ////////////////////////////////
    identifier() {
      return this.formOptions.identifier;
    },

    ////////////////////////////////
    allowAnonymous() {
      // console.log('ONE > ANONYMOUS', this.formOptions)
      return this.formOptions.allowAnonymous || false;
    },

    disableDefaultFields() {
      // console.log('TWO > DISABLE FIELDS', this.formOptions)
      return this.formOptions.disableDefaultFields || false;
    },

    requireDefaultContactFields() {
      // console.log('THREE > CHECK DEFAULT CONTACT FIELDS', this.formOptions)
      return !this.allowAnonymous && !this.disableDefaultFields;
    },

    ////////////////////////////////
    askFirstName() {
      return this.requireDefaultContactFields || this.formOptions.askFirstName || this.formOptions.requireFirstName;
    },

    askLastName() {
      return this.requireDefaultContactFields || this.formOptions.askLastName || this.formOptions.requireLastName;
    },

    askGender() {
      return this.requireDefaultContactFields || this.formOptions.askGender || this.formOptions.requireGender;
    },

    askDOB() {
      return this.formOptions.askDOB || this.formOptions.requireDOB;
    },

    askEmail() {
      return this.formOptions.askEmail || this.requireEmail || this.requireDefaultContactFields;
    },

    askPhone() {
      return this.formOptions.askPhone || this.requirePhone || this.requireDefaultContactFields; // && this.identifier == 'either');
    },

    ////////////////////////////////
    requireFirstName() {
      return this.formOptions.requireFirstName || this.requireDefaultContactFields;
    },

    requireLastName() {
      return this.formOptions.requireLastName || this.requireDefaultContactFields;
    },

    requireGender() {
      return this.formOptions.requireGender || this.requireDefaultContactFields;
    },

    requireDOB() {
      return this.formOptions.requireDOB;
    },

    requireEmail() {
      if (this.formOptions.requireEmail) {
        return true;
      } ///////////////////////////////////
      //If we are anonymous and we haven't required the phone


      if (this.allowAnonymous) {
        //Return false
        return;
      } ///////////////////////////////////


      switch (this.identifier) {
        case "both":
          return true;

        case "email":
          return true;

        case "either":
        default:
          //Return if the contact details are required and we haven't already provided a phone number
          return this.requireDefaultContactFields && !(this.dataModel._phone && this.dataModel._phone.length);
      }
    },

    requirePhone() {
      if (this.formOptions.requirePhone) {
        return true;
      } ///////////////////////////////////
      //If we are anonymous and we haven't required the phone


      if (this.allowAnonymous) {
        //Return false
        return;
      } ///////////////////////////////////


      switch (this.identifier) {
        case "both":
          return true;

        case "phone":
          return true;

        case "either":
        default:
          //Return if the contact details are required and we haven't already provided an email
          return this.requireDefaultContactFields && !(this.dataModel._email && this.dataModel._email.length);
      }
    },

    ////////////////////////////////
    definedName() {
      return this.definition.definitionName;
    },

    displayTitle() {
      if (this.title) {
        return this.title;
      }

      return `${this.definition.title}`;
    },

    allowed() {
      // console.log('TESTING', this.definition)
      //If it's public
      if (this.definition.privacy == "public") {
        return true;
      }

      var canCreate = this.$fluro.access.can("create", this.definedName, "interaction");
      var canSubmit = this.$fluro.access.can("submit", this.definedName, "interaction");
      return canCreate || canSubmit;
    },

    user() {
      var storeObject = Vue.$store || this.$store;
      return storeObject ? storeObject.state.fluro.user : null;
    },

    application() {
      var storeObject = Vue.$store || this.$store;
      return storeObject ? storeObject.state.fluro.application : null;
    } //  ...mapFields('fluro', ['user', 'application']),
    // }


  },
  components: {
    FluroContentFormField: __vue_component__$G,
    FluroContentForm: __vue_component__$H
  },
  methods: {
    createEwayToken(done) {
      var self = this; //Get the Public Encryption Key

      var key = self.paymentIntegration.publicDetails.publicKey; /////////////////////////////////////////////
      //Get the card details from our form

      var cardDetails = {};
      cardDetails.name = self.dataModel.cardName;
      cardDetails.number = self.dataModel.cardNumber;
      cardDetails.cvc = self.dataModel.cardCVC;
      cardDetails.exp_month = String(self.dataModel.cardExpMonth);
      cardDetails.exp_year = String(self.dataModel.cardExpYear).slice(-2);

      if (cardDetails.exp_month.length < 1) {
        cardDetails.exp_month = "0" + cardDetails.exp_month;
      } ///////////////////////


      if (self.debugMode) {
        return done({
          message: `EWay can not be used with sandbox testing keys. Please add an additional testing integration.`
        });
      }

      return done(null, cardDetails);
    },

    createStripeToken(done) {
      //STRIPE v2 (DEPRECATED)
      var self = this;
      var liveKey = self.paymentIntegration.publicDetails.livePublicKey;
      var sandboxKey = self.paymentIntegration.publicDetails.testPublicKey;
      var stripeUseKey; ///////////////////////

      if (self.debugMode) {
        stripeUseKey = sandboxKey;
      } else {
        stripeUseKey = liveKey;
      }

      if (!stripeUseKey) {
        return done(null, {
          error: {
            message: self.debugMode ? `Integration Setup Error: No test keys found.` : `Integration Setup Error: No live keys found.`
          }
        });
      } ///////////////////////


      Stripe.setPublishableKey(stripeUseKey); ///////////////////////
      //Get the card details from our form

      var stripeCardDetails = {};
      stripeCardDetails.name = self.dataModel.cardName;
      stripeCardDetails.number = self.dataModel.cardNumber;
      stripeCardDetails.cvc = self.dataModel.cardCVC;
      stripeCardDetails.exp_month = self.dataModel.cardExpMonth;
      stripeCardDetails.exp_year = self.dataModel.cardExpYear; ///////////////////////

      return Stripe.card.createToken(stripeCardDetails, done);
    },

    debugLog() {
      // return;
      // if (this.debugMode) {
      console.log(lodash.map(arguments, function (v) {
        return v;
      }).join(" ")); // }
    },

    evaluate(expression, context) {
      var ast;
      var result;

      try {
        ast = expressionEval.parse(expression);
        result = expressionEval.eval(ast, context);
      } catch (err) {// self.debugLog('EXPRESSION', expression, err);
      } finally {
        // self.debugLog('EXPRESSION RESULT', result, ast, expression, context)
        return result;
      }
    },

    initializePayment() {
      var self = this;
      var integration = self.paymentIntegration; ////////////////////////////////////

      self.paymentReady = false; ////////////////////////////////////
      // console.log('INJECT INTEGRATION?', integration)

      if (!integration) {
        return;
      } ////////////////////////////////////


      switch (integration.module) {
        case "stripe":
          // injectScript('https://js.stripe.com/v3/', function() {
          //     console.log('Stripe has been included on page')
          //     self.paymentReady = true;
          // });
          injectScript("https://js.stripe.com/v2/", function () {
            console.log("Stripe has been included on page");
            self.paymentReady = true;
          });
          break;

        case "eway":
          injectScript("https://secure.ewaypayments.com/scripts/eCrypt.js", function () {
            console.log("Eway has been included on page");
            self.paymentReady = true;
          });
          break;
      }
    },

    modelChanged() {
      this.$emit("input", this.dataModel);
    },

    validate() {
      var form = this.$refs.form;

      if (!form) {
        return [];
      }

      var errors = [];
      errors = errors.concat(form.errorMessages);

      if (this.showPaymentForm) {
        var payment = this.$refs.payment;

        if (payment && payment.errorMessages) {
          errors = errors.concat(payment.errorMessages);
        }
      }

      this.errorMessages = errors;
    },

    validateAllFields() {
      var form = this.$refs.form;
      form.touch();
      var payment = this.$refs.payment;

      if (payment) {
        payment.touch();
      }

      this.validate();
    },

    defaultUserValue(key) {
      if (!this.prefill) {
        return;
      }

      if (!this.user) {
        return null;
      }

      return lodash.compact([lodash.get(this.user, key)]);
    },

    reset() {
      var self = this; //Reset the model
      // Vue.set(self.model, 'data', {});

      if (!hasBeenReset) {
        hasBeenReset = true; //Use the value that was input originally

        self.dataModel = JSON.parse(JSON.stringify(this.value));
      } else {
        self.dataModel = {};
      }

      self.result = null;
      self.state = "ready";
      self.modelChanged();
      self.$emit("reset");
    },

    submit() {
      var self = this;
      self.validateAllFields();

      if (self.hasErrors) {
        //Gotta finish the stuff first!
        return;
      }

      self.state = "processing"; /////////////////////////////////

      var dataModel = JSON.parse(JSON.stringify(self.dataModel)); //Remove data we don't want to send to the server

      delete dataModel.cardName;
      delete dataModel.cardNumber;
      delete dataModel.cardExpYear;
      delete dataModel.cardExpMonth;
      delete dataModel.cardCVC; /////////////////////////////////
      // From https://stackoverflow.com/questions/18515254/recursively-remove-null-values-from-javascript-object

      function pruneEmpty(obj) {
        return function prune(current) {
          lodash.forOwn(current, function (value, key) {
            if (lodash.isUndefined(value) || lodash.isNull(value) || lodash.isNaN(value) || lodash.isString(value) && lodash.isEmpty(value) || lodash.isObject(value) && lodash.isEmpty(prune(value))) {
              delete current[key];
            }
          }); // remove any leftover undefined values from the delete
          // operation on an array


          if (lodash.isArray(current)) lodash.pull(current, undefined);
          return current;
        }(lodash.cloneDeep(obj)); // Do not modify the original object, create a clone instead
      } /////////////////////////////////


      dataModel = pruneEmpty(dataModel); /////////////////////////////////

      var interactionData = {
        interaction: dataModel,
        event: self.$fluro.utils.getStringID(self.linkedEvent),
        process: self.$fluro.utils.getStringID(self.linkedProcess) // transaction:self.$fluro.utils.getStringID(self.linkedProcess),

      }; /////////////////////////////////
      //Get the _ prepended values

      setDefaultContactField("firstName");
      setDefaultContactField("lastName");
      setDefaultContactField("email");
      setDefaultContactField("phoneNumber");
      setDefaultContactField("dob");
      setDefaultContactField("gender"); //Set the default contact fields

      function setDefaultContactField(key) {
        var value = lodash.get(self.dataModel, `_${key}`);

        if (value) {
          lodash.set(interactionData, `contact.${key}`, value);
        }
      } /////////////////////////////////
      //Set a default title


      if (!interactionData.title) {
        interactionData.title = this.definition.title;
      } /////////////////////////////////
      //If we need to have a payment


      if (self.showPaymentForm) {
        var paymentDetails = {
          amount: self.total,
          email: dataModel.receiptEmail,
          integration: self.$fluro.utils.getStringID(self.paymentIntegration)
        }; /////////////////////////////////
        /////////////////////////////////
        /////////////////////////////////
        //Here we generate our client side tokens

        switch (self.paymentIntegration.module) {
          case "eway":
            if (process.browser && !window.eCrypt) {
              self.serverErrors = `ERROR: Eway is selected for payment but the eCrypt script has not been included in this application visit https://eway.io/api-v3/#encrypt-function for more information`;
              self.$fluro.error(self.serverErrors);
              self.state = "error";
              self.$emit("error", err);
              return;
            } /////////////////////////////////////////////


            return self.createEwayToken(function (err, token) {
              if (err) {
                self.serverErrors = self.$fluro.utils.errorMessage(err);
                self.$fluro.error(self.serverErrors);
                self.state = "error";
                self.$emit("error", err);
                return;
              } //Include the payment details


              paymentDetails.details = token;
              return submitRequest(paymentDetails);
            });

          case "stripe":
            //Generate the Stripe Token
            return self.createStripeToken(function (status, response) {
              var error = status.error || response.error;

              if (error) {
                console.log("FORM -> Stripe token error", status, response);
                self.serverErrors = error.message;
                self.$fluro.error(self.serverErrors);
                self.state = "error";
                self.$emit("error", error);
              } else {
                //Include the payment details
                console.log("FORM -> Stripe tokenized", status, response);
                paymentDetails.details = response;
                return submitRequest(paymentDetails);
              }
            });
        }
      } else {
        return submitRequest();
      } /////////////////////////////////
      /////////////////////////////////
      /////////////////////////////////
      /////////////////////////////////


      function submitRequest(paymentDetails) {
        if (paymentDetails) {
          interactionData.payment = paymentDetails;
          console.log("SUBMIT REQUEST", interactionData);
        } /////////////////////////////////


        var submissionConfig = self.submissionConfig;
        submissionConfig.params = {
          definition: self.$fluro.utils.getStringID(self.definition),
          process: self.$fluro.utils.getStringID(self.linkedProcess)
        }; /////////////////////////////////

        var request = self.$fluro.content.submitInteraction(self.definedName, interactionData, submissionConfig);
        request.then(function (interaction) {
          self.state = "success";
          self.dataModel = {
            data: {}
          };
          self.result = interaction;
          self.$emit("success", interaction);
        }, function (err) {
          //Dispatch an error
          var humanMessage = self.$fluro.utils.errorMessage(err);
          self.$fluro.error(err);
          self.serverErrors = humanMessage;
          self.state = "error";
          self.$emit("error", err);
          console.log("SWITCH STATE TO", err, self);
        });
      }
    }

  }
};

/* script */
const __vue_script__$Q = script$Q;

/* template */
var __vue_render__$P = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-interaction-form"},[(_vm.renderable)?[(!_vm.allowed)?[(_vm.user)?[_vm._t("authenticated",[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou do not have permission to submit this form\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:_vm._e(),_vm._v(" "),(!_vm.user)?[_vm._t("unauthenticated",[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou must be signed in to submit this form\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:_vm._e()]:_vm._e(),_vm._v(" "),(_vm.allowed)?[(_vm.state == 'success')?_vm._t("success",[_c('div',{staticClass:"text-xs-center"},[_c('h3',[_vm._v("Submission Successful")]),_vm._v(" "),_c('div',[_vm._v("Thank you for your submission")]),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",on:{"click":function($event){return _vm.reset()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBack to form\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],{"reset":_vm.reset,"result":_vm.result}):[_vm._t("info"),_vm._v(" "),_c('form',{attrs:{"disabled":_vm.state == 'processing'},on:{"submit":function($event){$event.preventDefault();return _vm.submit($event)}}},[_c('fluro-content-form',{ref:"form",attrs:{"context":_vm.context,"debugMode":_vm.debugMode,"contextField":_vm.contextField,"recursiveClick":_vm.recursiveClick,"options":_vm.options,"fields":_vm.fields},on:{"errorMessages":_vm.validate,"input":_vm.modelChanged},model:{value:(_vm.dataModel),callback:function ($$v) {_vm.dataModel=$$v;},expression:"dataModel"}}),_vm._v(" "),(_vm.showPaymentForm)?_c('div',{staticClass:"payment"},[_c('v-container',[_c('h2',[_vm._v("Payment Summary")]),_vm._v(" "),_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{staticClass:"modifier-title"},[_c('strong',[_vm._v("Amount")])]),_vm._v(" "),(_vm.baseAmount)?_c('v-flex',{attrs:{"shrink":""}},[_c('strong',[_vm._v(_vm._s(_vm.formattedBaseAmount))])]):_vm._e()],1),_vm._v(" "),_vm._l((_vm.activeModifiers),function(modifier){return _c('div',{staticClass:"modifier"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{staticClass:"modifier-title"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(modifier.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(modifier.description)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(modifier.formattedTotal)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1)}),_vm._v(" "),_c('div',[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('h3',[_vm._v("Total")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('h3',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.formattedTotal)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('span',{staticClass:"muted"},[_vm._v(_vm._s(_vm.currency.toUpperCase()))])])])],1)],1)],2),_vm._v(" "),_c('v-container',{staticClass:"border-top",staticStyle:{"background":"#fafafa"}},[_c('h4',[_vm._v("Card Details")]),_vm._v(" "),_c('fluro-content-form',{ref:"payment",attrs:{"options":_vm.options,"fields":_vm.paymentFields},on:{"errorMessages":_vm.validate,"input":_vm.modelChanged},model:{value:(_vm.dataModel),callback:function ($$v) {_vm.dataModel=$$v;},expression:"dataModel"}})],1),_vm._v(" "),(_vm.definition.data.enableReceipt)?_c('v-container',{staticClass:"border-top",staticStyle:{"background":"#fafafa"}},[_c('fluro-content-form-field',{attrs:{"options":_vm.options,"field":_vm.receiptInput},on:{"input":_vm.modelChanged},model:{value:(_vm.dataModel),callback:function ($$v) {_vm.dataModel=$$v;},expression:"dataModel"}})],1):_vm._e()],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"actions"},[(_vm.state == 'processing')?[_c('v-btn',{staticClass:"mx-0",attrs:{"block":_vm.mobile,"large":_vm.mobile,"disabled":true}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProcessing\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)]:(_vm.state == 'error')?[_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.serverErrors)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",attrs:{"block":_vm.mobile,"large":_vm.mobile},nativeOn:{"click":function($event){$event.preventDefault();_vm.state = 'ready';}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTry Again\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:[(_vm.hasErrors)?_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPlease check the following issues before\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubmitting\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_vm._l((_vm.errorMessages),function(error){return _c('div',[_c('strong',[_vm._v(_vm._s(error.title))]),_vm._v(": "+_vm._s(error.messages[0])+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])})],2):_vm._e(),_vm._v(" "),_c('v-layout',[_c('v-btn',{staticClass:"mx-0",attrs:{"block":_vm.mobile,"large":_vm.mobile,"disabled":_vm.hasErrors,"type":"submit","color":"primary"}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_vm._t("submit")],2)]],2)],1)]]:_vm._e()]:_vm._e()],2)};
var __vue_staticRenderFns__$P = [];

  /* style */
  const __vue_inject_styles__$Q = function (inject) {
    if (!inject) return
    inject("data-v-438fed5c_0", { source: ".border-top[data-v-438fed5c]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-438fed5c]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-438fed5c]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-438fed5c]{border-left:1px solid rgba(0,0,0,.05)}.fluro-interaction-form .payment[data-v-438fed5c]{margin:15px 0;background:#fff;border-radius:3px;border:1px solid #ddd;box-shadow:0 1px 2px rgba(0,0,0,.1)}.fluro-interaction-form dt[data-v-438fed5c],.fluro-interaction-form label[data-v-438fed5c]{font-weight:600}.fluro-interaction-form .modifier[data-v-438fed5c]{opacity:.5}.fluro-interaction-form .modifier .modifier-title[data-v-438fed5c]{font-style:italic}.fluro-interaction-form .v-btn .v-progress-circular[data-v-438fed5c]{width:15px!important;height:15px!important;margin-left:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$Q = "data-v-438fed5c";
  /* module identifier */
  const __vue_module_identifier__$Q = undefined;
  /* functional template */
  const __vue_is_functional_template__$Q = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$P = normalizeComponent(
    { render: __vue_render__$P, staticRenderFns: __vue_staticRenderFns__$P },
    __vue_inject_styles__$Q,
    __vue_script__$Q,
    __vue_scope_id__$Q,
    __vue_is_functional_template__$Q,
    __vue_module_identifier__$Q,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$R = {
  components: {
    draggable,
    FluroFieldEditorItem: __vue_component__$6,
    FluroFieldEdit: __vue_component__$O,
    FluroContentForm: __vue_component__$H,
    FluroInteractionForm: __vue_component__$P,
    FluroCompileHtml: __vue_component__$8
  },
  props: {
    'value': {
      type: Array,

      default() {
        return [];
      }

    },
    'item': {
      type: Object
    }
  },

  created() {
    var self = this; /////////////////////////////

    self.recursiveGUID(self.model);
  },

  computed: {
    allFields() {
      var self = this;
      var array = []; /////////////////////////////////

      function recursiveFind(fields) {
        lodash.each(fields, function (field) {
          array.push(field);
          recursiveFind(field.fields);
        });
      } /////////////////////////////////


      recursiveFind(self.model); /////////////////////////////////

      return array;
    },

    readablePreviewState() {
      switch (this.previewState) {
        case 'ready':
          return 'Ready for input';

        case 'success':
          return 'Thank you';

        default:
          return '';
      }
    },

    image() {
      var self = this;

      var image = lodash.get(self.publicData, 'mainImage');

      if (!image || !image._id && !image.length) {
        return;
      }

      return image;
    },

    noImage() {
      return !this.image;
    },

    hideDisplayTitle() {
      var self = this;
      return self.publicData.hideDisplayTitle;
    },

    displayTitle() {
      var self = this;
      return self.publicData.title || self.item.title;
    },

    componentMode() {
      return this.item._type == 'component';
    },

    formMode() {
      return this.item.definition == 'form' || this.item.parentType == 'interaction';
    },

    showPreview() {
      // if(!this.formMode) {
      //     return this.$vuetify.breakpoint.lgAndUp;
      // }
      // if(!this.field) {
      return this.$vuetify.breakpoint.mdAndUp; // }
      // return !this.field || this.$vuetify.breakpoint.mdAndUp
    },

    formOptions() {
      if (!this.item) {
        return {};
      }

      return this.item.data || {};
    },

    identifier() {
      return this.formOptions.identifier;
    },

    allowAnonymous() {
      return this.formOptions.allowAnonymous || false;
    },

    disableDefaultFields() {
      return this.formOptions.disableDefaultFields || false;
    },

    requireDefaultContactFields() {
      return !this.allowAnonymous && !this.disableDefaultFields;
    },

    ////////////////////////////////
    askFirstName() {
      return this.requireDefaultContactFields || this.formOptions.askFirstName || this.formOptions.requireFirstName;
    },

    askLastName() {
      return this.requireDefaultContactFields || this.formOptions.askLastName || this.formOptions.requireLastName;
    },

    askGender() {
      return this.requireDefaultContactFields || this.formOptions.askGender || this.formOptions.requireGender;
    },

    askDOB() {
      return this.formOptions.askDOB || this.formOptions.requireDOB;
    },

    askEmail() {
      return this.formOptions.askEmail || this.requireEmail || this.requireDefaultContactFields;
    },

    askPhone() {
      return this.formOptions.askPhone || this.requirePhone || this.requireDefaultContactFields; // && this.identifier == 'either');
    },

    ////////////////////////////////
    requireFirstName() {
      return this.formOptions.requireFirstName || this.requireDefaultContactFields;
    },

    requireLastName() {
      return this.formOptions.requireLastName || this.requireDefaultContactFields;
    },

    requireGender() {
      return this.formOptions.requireGender || this.requireDefaultContactFields;
    },

    requireDOB() {
      return this.formOptions.requireDOB;
    },

    requireEmail() {
      if (this.formOptions.requireEmail) {
        return true;
      }

      switch (this.identifier) {
        case 'both':
          return true;

        case 'email':
          return true;

        case 'either':
          return true;
      }
    },

    requirePhone() {
      if (this.formOptions.requirePhone) {
        return true;
      }

      switch (this.identifier) {
        case 'both':
          return true;

        case 'phone':
          return true;

        case 'either':
          return true;
      }
    },

    // hasPaymentFields() {
    //     var self = this;
    //     if(!self.formMode) {
    //         return;
    //     }
    //     if (self.item.parentType != 'interaction') {
    //         return;
    //     }
    //     //Check if we have the defaults turned off
    //     if (!self.item.paymentDetails) {
    //         return;
    //     }
    //     return (self.item.paymentDetails.required || self.item.paymentDetails.allow)
    // },
    // hasDefaultFields() {
    //     var self = this;
    //     if (self.item.parentType != 'interaction') {
    //         return;
    //     }
    //     //Check if we have the defaults turned off
    //     if (self.requireDefaultContactFields) {
    //         return true;
    //     }
    //     return self.askFirstName || self.askLastName || self.askGender || self.askDOB || self.askEmail || self.askPhone
    // },
    fauxDefinition() {
      var self = this;
      return Object.assign({}, self.item, {
        fields: self.model
      });
    },

    publicData() {
      var self = this;
      return self.item && self.item.data ? self.item.data.publicData : {};
    },

    paymentIntegration() {
      var self = this;

      if (!self.publicData.paymentGateways || !self.publicData.paymentGateways.length) {
        return;
      }

      return lodash.first(self.publicData.paymentGateways);
    }

  },
  // watch:{
  //     'field.maximum':function() {
  //         var currentGUID = this.field.guid;
  //         this.$nextTick(function() {
  //             if(currentGUID == this.field.guid) {
  //             }
  //         })
  //     }
  // },
  methods: {
    fieldPath() {},

    deselectAll() {
      var self = this;
      self.configurePayment = self.configureDefaults = self.field = null;
    },

    sorted($event) {
      var self = this;
      self.$emit('input', self.model);
    },

    // fieldsChanged() {
    // 				console.log('Fields have been changed', this.model);
    // 				// self.model = (self.model || []).slice();
    // },
    expandAll() {
      var self = this;

      lodash.each(self.allFields, function (field) {
        if (field.directive == 'embedded' || field.type == 'group') {
          self.$set(field, 'collapsed', false);
        }
      });
    },

    collapseAll() {
      var self = this;

      lodash.each(self.allFields, function (field) {
        if (field.directive == 'embedded' || field.type == 'group') {
          self.$set(field, 'collapsed', true);
        }
      });
    },

    stateChanged(value) {
      this.previewState = value;
    },

    deleteSelectedField() {
      var self = this;
      var selectedField = self.field;
      self.$fluro.confirm(`Delete Field`, `Are you sure you want to delete '${selectedField.title}'?`, {
        confirmColor: 'error',
        confirmText: 'Confirm Delete'
      }).then(function (res) {
        var {
          parent,
          index
        } = self.findSelectedParent();
        self.deleteField(self.field, parent);
      });
    },

    recursiveGUID(fields) {
      var self = this;

      lodash.each(fields, function (field) {
        if (!field.guid) {
          field.guid = self.$fluro.utils.guid();
        }

        self.recursiveGUID(field.fields);
      });
    },

    showDefaultFieldOptions() {
      var self = this;
      self.field = null;
      self.configurePayment = false;
      self.configureDefaults = true;
    },

    showPaymentOptions() {
      var self = this;
      self.field = null;
      self.configureDefaults = false;
      self.configurePayment = true;
    },

    debugComponent(component) {
      this.debugField(component.field);
    },

    debugField(field) {
      // console.log('CLICKED FIELD', field)
      var self = this; //Find the field in our fields list

      var found = self.findField(field);

      if (!found || !found.parent) {
        console.log('NOT FOUND', field);
        return;
      }

      self.field = field;
    },

    toggleDefaultFields() {
      var self = this;
      self.item.data.allowAnonymous = true; // self.$set(self.item.data, 'disableDefaultFields', true);
    },

    deselectField() {
      var self = this;
      self.field = null;
    },

    resetPreview() {
      var self = this;
      self.resetting = true;
      setTimeout(function () {
        self.previewModel = {};
        self.resetting = false;
      }, 10);
    },

    getFieldTemplate(type) {
      var self = this; //////////////////////////////////

      return new Promise(function (resolve, reject) {
        var templateSet = templates;

        if (self.componentMode) {
          templateSet = templates$1;
        }

        self.$fluro.options(templateSet, 'Add a field').then(function (selected) {
          var field = JSON.parse(JSON.stringify(selected.field));
          field.guid = self.$fluro.utils.guid();
          self.recursiveGUID(field.fields);
          resolve(field);
        }).catch(reject);
      });
    },

    getNewField(type) {
      var self = this;
      var field;

      switch (type) {
        case 'group':
          field = {
            title: '',
            key: '',
            type: 'group',
            fields: [],
            minimum: 1,
            maximum: 1,
            askCount: 1,
            asObject: false
          };
          break;

        default:
          field = {
            title: '',
            key: '',
            type: 'string',
            directive: 'input',
            minimum: 0,
            maximum: 1,
            params: {},
            defaultValues: [],
            defaultReferences: []
          };
          break;
      } //Add a unique ID


      field.guid = self.$fluro.utils.guid();
      return field;
    },

    addNewComponentTemplate() {
      var self = this;
      self.getFieldTemplate('component').then(function (field) {
        self.addNewField(null, field);
      });
    },

    addNewTemplate() {
      var self = this;
      self.getFieldTemplate('form').then(function (field) {
        self.addNewField(null, field);
      });
    },

    addNewField(type, newField) {
      var self = this;

      if (!newField) {
        newField = self.getNewField(type);
      } ///////////////////////////////////////


      newField.isNew = true; //Just in case we switch to an embedded field

      newField.collapsed = false;

      if (!newField.fields) {
        newField.fields = [];
      } ///////////////////////////////////////
      //If there is no field selected
      //we just add the field in at the end of the current form


      if (!self.field) {
        //If we have the form configuration bit selected
        if (self.configureDefaults) {
          //We want to add the field to the top of the list
          console.log('Add new field to top');
          self.model.unshift(newField);
        } else {
          //Add to the bottom of the list
          console.log('Add new field to bottom');
          self.model.push(newField);
        }

        self.field = newField; // self.$emit('input', self.model)

        return;
      } ///////////////////////////////////////


      if (newField.directive == 'embedded' && self.field.directive == 'embedded') ; else {
        //Check if it's a container field
        if (self.field.type == 'group') {
          // if (self.field.type == 'group' || self.field.directive == 'embedded') {
          if (!self.field.fields) {
            self.$set(self.field, 'fields', []);
          } //Add the new field into this container


          console.log('Add new field in to group');
          self.field.fields.push(newField); //And select the field

          self.field = newField; // self.fieldsChanged();

          return;
        }
      } ///////////////////////////////////////
      //Here we want to find where the current selected field is
      //so we can add it in underneath the current selected field
      // console.log('CHECK TO GET PARENT?')


      var {
        parent,
        index
      } = self.findSelectedParent(); // console.log('GOT PARENT?', parent);

      if (!parent) {
        parent = self.model;
      }

      if (index == -1) {
        console.log('push into parent', parent);
        parent.push(newField);
      } else {
        console.log('splice into parent', parent);
        parent.splice(index + 1, 0, newField); // self.fieldsChanged();
        // parent.push(newField)
      } ///////////////////////////////////////


      self.field = newField;
    },

    injectField(field, parent) {
      var self = this;
      var newField = self.getNewField();

      if (!parent) {
        return console.log('no parent!'); // if (field) {
        // 	console.log('but there is a field')
        // 		if(!field.fields) {
        // 					field.fields = [];
        // 					console.log('Create sub fields array as needed')
        // 		} 
        // 		parent = field.fields;
        // 		console.log('parent is now', parent)
        // } else {
        // 				return console.log('Can not inject here!')
        // }
      }

      var index = parent.indexOf(field); // parent.push(newField);

      parent.splice(index + 1, 0, newField);
      self.field = newField; // self.fieldsChanged();
    },

    clicked(item) {
      // console.log('Select', item);
      var self = this;
      self.field = item;
    },

    mouseover(item) {
      // console.log('Select', item);
      var self = this;
      self.contextField = item;
    },

    mouseleave(item) {
      // console.log('Select', item);
      var self = this;

      if (self.contextField == item) {
        self.contextField = null;
      }
    },

    findSelectedParent() {
      var self = this;
      var needle = self.field;
      return self.findField(needle);
    },

    findField(needle) {
      var self = this;
      var parent;
      var index = -1; ///////////////////////////////////////
      //If it's a top level

      var i = lodash.findIndex(self.model, {
        guid: needle.guid
      });

      if (i != -1) {
        return {
          parent: self.model,
          index: i
        };
      } ///////////////////////////////////////
      //Loop through each route and recur


      lodash.each(self.model, recursiveFind); ///////////////////////////////////////


      function recursiveFind(field) {
        //Check if this is the parent
        var i = lodash.findIndex(field.fields, {
          guid: needle.guid
        }); //We found it


        if (i != -1) {
          index = i; //Mark the parent

          parent = field.fields;
        } else {
          //Check each child
          lodash.each(field.fields, recursiveFind);
        }
      }

      return {
        parent,
        index
      };
    },

    duplicateField(field, parent) {
      var self = this; // var parent = self.findFieldParent(field);

      if (!parent) {
        return;
      }

      var index = parent.indexOf(field);
      var copy = JSON.parse(JSON.stringify(field));
      copy.guid = self.$fluro.utils.guid();
      copy.title = '';
      copy.key = '';
      parent.splice(index + 1, 0, copy); //Seld the first field

      self.field = copy; // //If it's not a folder then select this route
      // if (field.type != 'folder') {
      //     this.route = copy;
      // }
    },

    deleteField(field, parent) {
      var self = this; // //Deselect if we have it currently selected
      // if (self.field == field) {

      self.field = null; // }
      // console.log('PARENT', parent)
      // var parent = this.findFieldParent(field);

      if (!parent) {
        return;
      }

      var index = parent.indexOf(field);
      parent.splice(index, 1);
    }

  },

  data() {
    return {
      treeOptions: {
        animation: 1,
        group: 'fields',
        // disabled: !this.editable,
        ghostClass: 'ghost'
      },
      previewState: 'ready',
      configurePayment: false,
      configureDefaults: false,
      model: Vue.observable(this.value),
      resetting: false,
      previewModel: {},
      field: null,
      contextField: null
    };
  }

};

/* script */
const __vue_script__$R = script$R;

/* template */
var __vue_render__$Q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-field-editor",class:{'schema-mode':!_vm.formMode}},[_c('flex-row',[_c('flex-column',{staticClass:"sidebar"},[_c('flex-column',{directives:[{name:"show",rawName:"v-show",value:(true ),expression:"true || !(field || configurePayment || configureDefaults)"}],staticClass:"fields-tree"},[_c('flex-column-header',[_c('div',{staticClass:"palette-title"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{attrs:{"label":""}},[_vm._v("Field Tree")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.expandAll()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExpand All\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.collapseAll()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCollapse All\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])])],1)],1)]),_vm._v(" "),_c('flex-column-body',[_c('v-container',{attrs:{"pa-2":""}},[(_vm.formMode)?[_c('div',{staticClass:"pseudo-field",class:{active:_vm.configureDefaults && !_vm.field},on:{"click":function($event){return _vm.showDefaultFieldOptions()}}},[_vm._v("Form Configuration")])]:_vm._e(),_vm._v(" "),_c('draggable',{staticClass:"field-editor-children",attrs:{"handle":".handle","element":"ul","options":_vm.treeOptions},on:{"sort":_vm.sorted},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}},_vm._l((_vm.model),function(leaf,index){return _c('fluro-field-editor-item',{key:leaf.guid,attrs:{"top":_vm.model,"mouseover":_vm.mouseover,"mouseleave":_vm.mouseleave,"parent":_vm.model,"leaf":_vm.model[index],"selected":_vm.field,"select":_vm.clicked},on:{"duplicate":_vm.duplicateField,"injected":_vm.injectField,"deleted":_vm.deleteField}})}),1),_vm._v(" "),(_vm.formMode)?[_c('div',{staticClass:"pseudo-field",class:{active:_vm.configurePayment && !_vm.field},on:{"click":function($event){return _vm.showPaymentOptions()}}},[_vm._v("Payment Options")])]:_vm._e()],2)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"pa-2",staticStyle:{"background":"#fff"}},[_c('v-layout',{attrs:{"row":""}},[(_vm.formMode)?_c('v-flex',[_c('v-btn',{staticClass:"ma-1",attrs:{"small":"","color":"primary","block":""},on:{"click":function($event){return _vm.addNewTemplate()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus","right":""}})],1)],1):(_vm.componentMode)?_c('v-flex',[_c('v-btn',{staticClass:"ma-1",attrs:{"small":"","color":"primary","block":""},on:{"click":function($event){return _vm.addNewComponentTemplate()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus","right":""}})],1)],1):_c('v-flex',[_c('v-btn',{staticClass:"ma-1",attrs:{"small":"","color":"primary","block":""},on:{"click":function($event){return _vm.addNewField()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"plus","right":""}})],1)],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',[_c('v-btn',{staticClass:"ma-1",attrs:{"small":"","block":""},on:{"click":function($event){return _vm.addNewField('group')}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd Group\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"folder","right":""}})],1)],1)],1)],1)],1)],1)],1),_vm._v(" "),(_vm.showPreview)?_c('flex-column',{staticClass:"preview"},[(_vm.resetting)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_vm._e(),_vm._v(" "),_c('flex-column-header',[_c('div',{staticClass:"palette-title"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{attrs:{"label":""}},[_vm._v(_vm._s(_vm.formMode ? 'Form' : '')+" Preview")])]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),(_vm.formMode)?_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('span',_vm._g({directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"state-link",attrs:{"content":"Change Preview State"}},on),[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tState: "+_vm._s(_vm.readablePreviewState)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"angle-down"}})],1)]}}],null,false,2068073065)},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){_vm.previewState = 'ready';}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReady for input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){_vm.previewState = 'success';}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSuccess / Thank you message\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1)],1)],1)],1)],1):_vm._e(),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.resetPreview()}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReset "+_vm._s(_vm.formMode ? 'Form' : 'Preview')+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"icon":"undo"}})],1)])],1)],1)]),_vm._v(" "),_c('flex-column-body',[(_vm.resetting)?_c('v-container',[_c('fluro-page-preloader',{attrs:{"contain":""}})],1):[(_vm.formMode)?[(_vm.image)?_c('div',{staticClass:"form-image"},[_c('fluro-image',{attrs:{"cover":"","from":_vm.item,"imageWidth":1000,"imageHeight":300,"spinner":true,"item":_vm.image}})],1):_vm._e(),_vm._v(" "),_c('v-container',{attrs:{"fluid":""}},[_c('wrapper',{attrs:{"sm":""}},[_c('constrain',{attrs:{"sm":""}},[_c('fluro-interaction-form',{ref:"previewForm",attrs:{"contextField":_vm.contextField,"defaultState":_vm.previewState,"context":"builder","prefill":false,"title":_vm.item.title,"definition":_vm.fauxDefinition,"paymentIntegration":_vm.paymentIntegration,"debugMode":true},on:{"state":_vm.stateChanged,"debug":_vm.debugField},scopedSlots:_vm._u([{key:"info",fn:function(){return [(!_vm.hideDisplayTitle)?_c('h1',{attrs:{"margin":""}},[_vm._v(_vm._s(_vm.displayTitle))]):_vm._e(),_vm._v(" "),_c('fluro-compile-html',{staticClass:"form-body",attrs:{"template":_vm.publicData.body,"context":_vm.item}})]},proxy:true},(_vm.publicData.thankyou)?{key:"success",fn:function(){return [_c('fluro-compile-html',{staticClass:"form-thankyou",attrs:{"template":_vm.publicData.thankyou,"context":_vm.item}})]},proxy:true}:null],null,true),model:{value:(_vm.previewModel),callback:function ($$v) {_vm.previewModel=$$v;},expression:"previewModel"}})],1)],1)],1)]:_c('v-container',[_c('constrain',{attrs:{"sm":""}},[_c('fluro-content-form',{ref:"previewForm",attrs:{"context":"builder","recursiveClick":_vm.debugComponent,"debugMode":true,"contextField":_vm.contextField,"fields":_vm.model},model:{value:(_vm.previewModel),callback:function ($$v) {_vm.previewModel=$$v;},expression:"previewModel"}})],1)],1)]],2),_vm._v(" "),_vm._e()],1):_vm._e(),_vm._v(" "),_c('flex-column',{staticClass:"field-options"},[(_vm.field)?[_c('flex-column-header',[_c('div',{staticClass:"palette-title"},[_c('v-layout',{attrs:{"align-center":""}},[_c('strong',{attrs:{"label":""}},[_vm._v(_vm._s(_vm.field.title || 'Untitled field'))]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.deselectAll()}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1)])],1)],1)]),_vm._v(" "),_c('fluro-field-edit',{attrs:{"item":_vm.item,"expressionFields":_vm.model},on:{"reset":function($event){return _vm.resetPreview()},"deleted":_vm.deleteSelectedField},model:{value:(_vm.field),callback:function ($$v) {_vm.field=$$v;},expression:"field"}})]:(_vm.configurePayment)?[_c('flex-column-header',[_c('div',{staticClass:"palette-title"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{attrs:{"label":""}},[_vm._v("Payment Settings")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.deselectAll()}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1)])],1)],1)]),_vm._v(" "),_c('flex-column-body',[_vm._t("payment")],2)]:(_vm.configureDefaults)?[_c('flex-column-header',[_c('div',{staticClass:"palette-title"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{attrs:{"label":""}},[_vm._v("Form Configuration")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('span',{staticClass:"state-link",on:{"click":function($event){return _vm.deselectAll()}}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1)])],1)],1)]),_vm._v(" "),_c('flex-column-body',[_vm._t("form")],2)]:[_c('flex-column',{staticClass:"placeholder",attrs:{"center":""}},[_c('v-container',{staticClass:"text-xs-center",staticStyle:{"flex":"none"},attrs:{"fluid":""}},[_c('p',{staticClass:"muted"},[_vm._v("Select a field on the left to edit configuration")])])],1)]],2)],1)],1)};
var __vue_staticRenderFns__$Q = [];

  /* style */
  const __vue_inject_styles__$R = function (inject) {
    if (!inject) return
    inject("data-v-13a3f73a_0", { source: ".border-top[data-v-13a3f73a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-13a3f73a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-13a3f73a],.palette-title[data-v-13a3f73a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-13a3f73a]{border-left:1px solid rgba(0,0,0,.05)}.fluro-field-editor[data-v-13a3f73a]{min-height:50vh}.state-link[data-v-13a3f73a]{margin-left:5px;display:inline-block;border-radius:3px;padding:0 5px;line-height:16px;height:16px;cursor:pointer;letter-spacing:0;text-transform:none}.state-link[data-v-13a3f73a]:hover{background:rgba(0,0,0,.1)}.fields-tree[data-v-13a3f73a]{min-width:300px;background:#eee}.fields-tree label[data-v-13a3f73a]{text-transform:uppercase;font-weight:500;letter-spacing:.03em;font-size:.8em;margin-bottom:5px}.placeholder[data-v-13a3f73a]{background:#eee}.pseudo-field[data-v-13a3f73a]{padding:5px;border-radius:3px;background:#fff;border:1px solid rgba(0,0,0,.1);margin:0 0 4px;cursor:pointer;font-weight:500}.pseudo-field.active[data-v-13a3f73a]{background:#2ad4b9;color:#fff}.default-field[data-v-13a3f73a]{border:1px solid rgba(0,0,0,.1);padding:5px;margin-bottom:2px;border-radius:3px;background:#eee;font-weight:500;cursor:pointer}.default-field[data-v-13a3f73a]:hover{background:#fafafa}.palette-title[data-v-13a3f73a]{text-transform:uppercase;letter-spacing:.05em;font-weight:500;padding:8px;font-size:10px;background:#eee;color:rgba(0,0,0,.5)}.mini-switch[data-v-13a3f73a]{border-radius:100px;line-height:10px;text-transform:uppercase;height:19px;font-size:9px;width:50px;font-weight:500;position:relative;line-height:19px;overflow:hidden;background:#eee;border:1px solid #ddd;color:#ddd;background:rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.mini-switch .off[data-v-13a3f73a],.mini-switch .on[data-v-13a3f73a]{position:absolute;width:100%;height:100%;left:0;top:0;right:0;bottom:0;text-align:center}.mini-switch .on[data-v-13a3f73a]{transform:translateX(100%)}.mini-switch .off[data-v-13a3f73a]{transform:translateX(0)}.mini-switch.active[data-v-13a3f73a]{background:0 0;box-shadow:none;color:#999;border:1px solid #999}.mini-switch.active .on[data-v-13a3f73a]{transform:translateX(0)}.mini-switch.active .off[data-v-13a3f73a]{transform:translateX(100%)}.preview[data-v-13a3f73a]{order:1;border-left:3px solid #ddd;border-right:3px solid #ddd;background:#fff;flex:2}.sidebar[data-v-13a3f73a]{min-width:300px;max-width:380px;flex:1;background:#fafafa;border-right:1px solid #ddd;order:0}.field-options[data-v-13a3f73a]{order:2;min-width:380px;background:#fafafa}.schema-mode[data-v-13a3f73a]{min-width:40vw}.schema-mode .preview[data-v-13a3f73a]{order:2}.schema-mode .sidebar[data-v-13a3f73a]{order:0}.schema-mode .field-options[data-v-13a3f73a]{order:1;min-width:40vw}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$R = "data-v-13a3f73a";
  /* module identifier */
  const __vue_module_identifier__$R = undefined;
  /* functional template */
  const __vue_is_functional_template__$R = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$Q = normalizeComponent(
    { render: __vue_render__$Q, staticRenderFns: __vue_staticRenderFns__$Q },
    __vue_inject_styles__$R,
    __vue_script__$R,
    __vue_scope_id__$R,
    __vue_is_functional_template__$R,
    __vue_module_identifier__$R,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$S = {
  props: {
    page: {
      required: true
    },
    index: {
      required: true
    }
  },

  data() {
    return {
      //THIS IS IF YOU WANT TO HIDE PAGES NOT ON THE SCREEN FOR PERFORMANCE}
      active: true // active: false,//true,//false,

    };
  },

  computed: {
    pageID() {
      return `page-${this.index}`;
    }

  }
};

/* script */
const __vue_script__$S = script$S;

/* template */
var __vue_render__$R = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"infinite-page",attrs:{"id":("page-" + _vm.index)}},[_vm._t("default",null,{"page":_vm.page})],2)};
var __vue_staticRenderFns__$R = [];

  /* style */
  const __vue_inject_styles__$S = function (inject) {
    if (!inject) return
    inject("data-v-e4535466_0", { source: ".border-top[data-v-e4535466]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-e4535466]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-e4535466]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-e4535466]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$S = "data-v-e4535466";
  /* module identifier */
  const __vue_module_identifier__$S = undefined;
  /* functional template */
  const __vue_is_functional_template__$S = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$R = normalizeComponent(
    { render: __vue_render__$R, staticRenderFns: __vue_staticRenderFns__$R },
    __vue_inject_styles__$S,
    __vue_script__$S,
    __vue_scope_id__$S,
    __vue_is_functional_template__$S,
    __vue_module_identifier__$S,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$T = {
  components: {
    FluroInfinitePage: __vue_component__$R
  },
  props: {
    items: {
      type: Array,
      default: function () {
        return [];
      }
    },
    perPage: {
      type: Number,
      default: 4
    },
    buffer: {
      type: Number,
      default: 3
    },
    scrollParent: {
      default() {
        return {};
      }

    }
  },

  data() {
    return {
      currentIndex: 0,
      parentElement: null
    };
  },

  destroyed() {
    var self = this;
    self.parentElement.removeEventListener('scroll', self.updateScroll);
  },

  mounted() {
    var self = this;
    var parentElement = self.parentElement = this.$el.closest("[scroll-parent]") || this.$el.closest("body");
    self.parentElement.addEventListener('scroll', self.updateScroll);
  },

  computed: {
    availablePages() {
      return lodash.chunk(this.items, this.perPage);
    },

    total() {
      return this.availablePages.length;
    },

    limit() {
      return this.currentIndex + this.buffer;
    },

    currentPage: {
      get() {
        return this.currentIndex;
      },

      set(integer) {
        integer = Math.max(integer, 0);
        integer = Math.min(integer, this.total - 1);
        this.currentIndex = integer;
        console.log('PAGE', integer);
      }

    }
  },
  methods: {
    hitBuffer(value1, value2, buffer) {
      var match = Math.abs(value1 - value2);
      return match < buffer;
    },

    updateScroll() {
      var self = this;
      var maxScrollHeight = self.parentElement.scrollHeight;
      var currentScroll = self.parentElement.scrollTop;
      var parentHeight = self.parentElement.clientHeight;
      var limit = maxScrollHeight - parentHeight; // var bottom = self.parentElement.scrollTop + self.parentElement.scrollHeight;

      if (self.hitBuffer(currentScroll, limit, parentHeight / 2)) {
        return self.hitBottom();
      }

      if (self.hitBuffer(currentScroll, 0, parentHeight / 2)) {
        return self.hitTop();
      } // console.log('LIMITS', currentScroll, , maxScrollHeight, parentHeight);
      // self.parentElement.scrollTop,  self.parentElement.scrollHeight, self.parentElement.offsetHeight, self.parentElement.clientHeight)

    },

    // let bottomOfWindow = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight;
    hitTop() {
      this.currentPage--;
    },

    hitBottom() {
      this.currentPage++;
    }

  }
};

/* script */
const __vue_script__$T = script$T;

/* template */
var __vue_render__$S = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container",staticClass:"infinite-scroll-container"},_vm._l((_vm.availablePages),function(page,key){return (key <= _vm.limit)?_c('div',{attrs:{"index":key}},[_vm._t("default",null,{"page":page})],2):_vm._e()}),0)};
var __vue_staticRenderFns__$S = [];

  /* style */
  const __vue_inject_styles__$T = function (inject) {
    if (!inject) return
    inject("data-v-ad3b6d7e_0", { source: ".border-top[data-v-ad3b6d7e]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-ad3b6d7e]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-ad3b6d7e]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-ad3b6d7e]{border-left:1px solid rgba(0,0,0,.05)}.infinite-scroll-container[data-v-ad3b6d7e]{position:relative}.bottom-spacer[data-v-ad3b6d7e]{pointer-events:none;height:1px;background:#f06;position:absolute;bottom:0;left:0;right:0;opacity:.1}.top-spacer[data-v-ad3b6d7e]{pointer-events:none;height:1px;background:#f06;position:absolute;top:0;left:0;right:0;opacity:.1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$T = "data-v-ad3b6d7e";
  /* module identifier */
  const __vue_module_identifier__$T = undefined;
  /* functional template */
  const __vue_is_functional_template__$T = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$S = normalizeComponent(
    { render: __vue_render__$S, staticRenderFns: __vue_staticRenderFns__$S },
    __vue_inject_styles__$T,
    __vue_script__$T,
    __vue_scope_id__$T,
    __vue_is_functional_template__$T,
    __vue_module_identifier__$T,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$U = {
  props: {
    top: {
      type: Boolean
    },
    items: {
      type: Array,
      default: function () {
        return [];
      }
    },
    perPage: {
      type: Number,
      default: 24
    },
    startPage: {
      type: Number,
      default: 1
    },
    click: {
      type: Function
    }
  },

  data() {
    return {
      currentPage: this.startPage
    };
  },

  filters: {
    numberWithCommas(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

  },
  watch: {
    'items': 'checkPage'
  },
  computed: {
    previousPageDisabled() {
      return this.currentPage <= 1;
    },

    nextPageDisabled() {
      return this.currentPage == this.totalPages;
    },

    totalVisible() {
      if (this.$vuetify.breakpoint.smAndDown) {
        return 0;
      } else {
        return 15;
      }
    },

    totalPages() {
      return this.availablePages.length;
    },

    availablePages() {
      return lodash.chunk(this.items, this.perPage);
    },

    page() {
      if (this.currentPage > this.totalPages) {
        return lodash.first(this.availablePages);
      } else {
        return this.availablePages[this.currentPage - 1];
      }
    },

    startOffset() {
      return Math.floor((this.currentPage - 1) * this.perPage);
    },

    endOffset() {
      return Math.min(this.startOffset + this.perPage, this.filteredTotal);
    },

    filteredTotal() {
      return this.items ? this.items.length : 0;
    }

  },
  methods: {
    checkPage() {
      this.currentPage = 1; // if(this.currentPage >= this.availablePages.length) {
      // 	this.currentPage = this.availablePages.length;

      this.pageChanged(); // }
    },

    pageChanged() {
      var topElement = this.$refs.top;

      if (topElement) {
        topElement.scrollIntoView({
          block: 'center',
          behavior: 'smooth'
        });
      } else {
        console.log('No top');
      } // document.getElementsByTagName('h2')[3].scrollIntoView();


      this.$emit('change', this.currentPage);
    },

    firstPage() {
      this.currentPage = 1;
    },

    lastPage() {
      this.currentPage = this.totalPages;
    },

    nextPage() {
      var total = this.totalPages;
      this.currentPage < total ? this.currentPage++ : this.currentPage = total;
      this.pageChanged();
    },

    previousPage() {
      var total = this.totalPages;
      this.currentPage > 1 ? this.currentPage-- : this.currentPage = 1;
      this.pageChanged();
    }

  }
};

/* script */
const __vue_script__$U = script$U;

/* template */
var __vue_render__$T = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[_c('flex-column-body',[_c('div',{ref:"top"}),_vm._v(" "),_vm._t("default",null,{"page":_vm.page})],2),_vm._v(" "),_c('flex-column-footer',[_c('div',{staticClass:"footer-stats"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[(!_vm.totalPages)?[_c('v-flex',{staticClass:"text-muted"},[_vm._v("\n                        No matches\n                    ")])]:[_c('v-flex',{staticClass:"text-muted",attrs:{"xs6":"","align-center":"","d-flex":""}},[_vm._v("\n                        "+_vm._s(_vm._f("numberWithCommas")(_vm.startOffset + 1))+" to "+_vm._s(_vm._f("numberWithCommas")(_vm.endOffset))+" of "+_vm._s(_vm._f("numberWithCommas")(_vm.filteredTotal))+" matches\n                        ")]),_vm._v(" "),_c('v-flex',{staticClass:"text-xs-right",attrs:{"xs6":"","align-center":"","d-flex":""}},[_c('div',[(_vm.$vuetify.breakpoint.smAndUp)?_c('span',{staticClass:"text-muted"},[_vm._v("Page "+_vm._s(_vm.currentPage)+" of "+_vm._s(_vm.totalPages))]):_vm._e(),_vm._v(" "),_c('span',{staticClass:"ml-3"},[[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.firstPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-left"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.previousPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-left"}})],1)],_vm._v(" "),[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.nextPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-right"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.lastPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-right"}})],1)]],2)])])]],2)],1)])],1)};
var __vue_staticRenderFns__$T = [];

  /* style */
  const __vue_inject_styles__$U = function (inject) {
    if (!inject) return
    inject("data-v-31285f88_0", { source: ".border-top[data-v-31285f88]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-31285f88]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-31285f88]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-31285f88]{border-left:1px solid rgba(0,0,0,.05)}.footer-stats[data-v-31285f88]{padding:5px 10px;font-size:.9em}.pager[data-v-31285f88]{text-align:center;padding:15px 0}.pager .v-pagination-item[data-v-31285f88]{font-weight:700}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$U = "data-v-31285f88";
  /* module identifier */
  const __vue_module_identifier__$U = undefined;
  /* functional template */
  const __vue_is_functional_template__$U = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$T = normalizeComponent(
    { render: __vue_render__$T, staticRenderFns: __vue_staticRenderFns__$T },
    __vue_inject_styles__$U,
    __vue_script__$U,
    __vue_scope_id__$U,
    __vue_is_functional_template__$U,
    __vue_module_identifier__$U,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$V = {
  props: {
    item: [String, Object],
    width: {
      type: Number
    },
    height: {
      type: Number
    }
  },
  computed: {
    computedWidth() {
      return lodash.get(this.item, 'width') || this.width || 1920;
    },

    computedHeight() {
      return lodash.get(this.item, 'height') || this.height || 1080;
    },

    aspectRatio() {
      return this.computedHeight / this.computedWidth * 100;
    },

    style() {
      var self = this;
      var style = {
        backgroundColor: '#eee',
        backgroundImage: self.backgroundImage
      };

      if (self.aspectRatio) {
        style.height = `0`;
        style.paddingBottom = `${self.aspectRatio}%`;
      }

      return style;
    },

    posterUrl() {
      return this.$fluro.asset.posterUrl(this.item);
    },

    backgroundImage() {
      if (this.posterUrl) {
        return `url(${this.posterUrl})`;
      } else {
        return;
      }
    }

  }
};

/* script */
const __vue_script__$V = script$V;

/* template */
var __vue_render__$U = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-video-thumbnail",style:(_vm.style)})};
var __vue_staticRenderFns__$U = [];

  /* style */
  const __vue_inject_styles__$V = function (inject) {
    if (!inject) return
    inject("data-v-6579dd11_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-video-thumbnail{overflow:hidden;width:100%;position:relative;background-size:cover;background-repeat:no-repeat;background-position:center center}.fluro-video-thumbnail img{width:100%;display:block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$V = undefined;
  /* module identifier */
  const __vue_module_identifier__$V = undefined;
  /* functional template */
  const __vue_is_functional_template__$V = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$U = normalizeComponent(
    { render: __vue_render__$U, staticRenderFns: __vue_staticRenderFns__$U },
    __vue_inject_styles__$V,
    __vue_script__$V,
    __vue_scope_id__$V,
    __vue_is_functional_template__$V,
    __vue_module_identifier__$V,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$W = {
  components: {// ActionCart,
  },
  props: {
    modal: {
      type: Object,
      required: true
    }
  },

  created() {
    if (!this.modal.options) {
      this.modal.options = {};
    }
  },

  data() {
    return {// active:true,
    };
  },

  computed: {
    componentProps() {
      return this.modal.componentProps || {};
    },

    size() {
      return `modal-size-${this.modal.options.size || 'md'}`;
    },

    top() {
      return this.modal.options.fixed || this.modal.options.top;
    },

    full() {
      return this.modal.options.full;
    },

    fixed() {
      return this.modal.options.fixed;
    }

  },
  methods: {
    dismiss(err) {
      var self = this;
      self.$fluro.closeModal(self.modal.modalID);
      self.modal.reject(err);
    },

    close(value) {
      var self = this;
      self.$fluro.closeModal(self.modal.modalID);
      self.modal.resolve(value);
    }

  }
};

/* script */
const __vue_script__$W = script$W;

/* template */
var __vue_render__$V = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"modal-outer",class:[{center:!_vm.fixed}, {top:_vm.top}, {fixed:_vm.fixed}, {full:_vm.full}, _vm.size]},[_c('div',{staticClass:"blanket",on:{"click":_vm.dismiss}}),_vm._v(" "),_c('div',{staticClass:"modal-inner"},[_c(_vm.modal.component,_vm._b({tag:"component",attrs:{"options":_vm.modal.options},on:{"close":_vm.close,"dismiss":_vm.dismiss}},'component',_vm.componentProps,false))],1)])};
var __vue_staticRenderFns__$V = [];

  /* style */
  const __vue_inject_styles__$W = function (inject) {
    if (!inject) return
    inject("data-v-95f76614_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.modal-outer{position:fixed;display:flex;width:100%;height:100%;left:0;top:0;right:0;bottom:0;z-index:999999;justify-content:center;padding:5%}.modal-outer.center{align-items:center}.modal-outer .blanket{position:absolute;background:rgba(51,55,62,.5);left:0;right:0;top:0;bottom:0}.modal-outer .modal-inner{display:flex;max-height:100%!important;max-width:100%!important;overflow:hidden;border-radius:5px;box-shadow:0 4px 15px rgba(0,0,0,.2);background:#fff;z-index:99999999}@media (max-width:768px){.modal-outer .modal-inner{min-width:0;width:100%}}.modal-outer.fixed{padding:25px;display:flex;justify-content:center}.modal-outer.top{align-items:baseline}@media (min-width:769px){.modal-outer.modal-size-lg .modal-inner{width:95%}.modal-outer.modal-size-sm .modal-inner{width:25%}}.modal-outer.full{background:#f06;padding:0}.modal-outer.full .modal-inner{left:0;right:0;bottom:0;top:0;width:100%;height:100%;border-radius:0}@media (max-width:768px){.modal-outer{display:flex!important;padding:10px 10px 60px 10px!important}.modal-outer .modal-inner{display:flex!important;flex:1!important;max-height:100%!important}}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$W = undefined;
  /* module identifier */
  const __vue_module_identifier__$W = undefined;
  /* functional template */
  const __vue_is_functional_template__$W = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$V = normalizeComponent(
    { render: __vue_render__$V, staticRenderFns: __vue_staticRenderFns__$V },
    __vue_inject_styles__$W,
    __vue_script__$W,
    __vue_scope_id__$W,
    __vue_is_functional_template__$W,
    __vue_module_identifier__$W,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
/////////////////////////////////////////////////////
var script$X = {
  data() {
    return {
      confirming: false,
      timer: null
    };
  },

  methods: {
    checkConfirm() {
      var self = this;

      if (self.confirming) {
        return this.$emit('click');
      }

      self.confirming = true;

      if (self.timer) {
        clearTimeout(self.timer);
      }

      self.timer = setTimeout(self.blur, 3000);
    },

    blur() {
      var self = this;
      self.confirming = false;
    }

  }
};

/* script */
const __vue_script__$X = script$X;

/* template */
var __vue_render__$W = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"fluro-confirm-button",on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.blur($event)},"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.checkConfirm($event)}}},[_vm._t("default",null,{"confirming":_vm.confirming})],2)};
var __vue_staticRenderFns__$W = [];

  /* style */
  const __vue_inject_styles__$X = function (inject) {
    if (!inject) return
    inject("data-v-a3512fd6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-confirm-button .confirm-hide{height:0!important;width:0!important;overflow:hidden!important;display:block!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$X = undefined;
  /* module identifier */
  const __vue_module_identifier__$X = undefined;
  /* functional template */
  const __vue_is_functional_template__$X = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$W = normalizeComponent(
    { render: __vue_render__$W, staticRenderFns: __vue_staticRenderFns__$W },
    __vue_inject_styles__$X,
    __vue_script__$X,
    __vue_scope_id__$X,
    __vue_is_functional_template__$X,
    __vue_module_identifier__$X,
    false,
    createInjector,
    undefined,
    undefined
  );

var ReportingColorsMixin = {
  computed: {
    theme() {
      return {
        colors: ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0', '#7adc12', '#f34be2', '#b76b1a', '#ff7800']
      };
    }

  },
  methods: {
    getColor(index) {
      var self = this;
      return self.theme.colors[index % self.theme.colors.length];
    }

  }
};

//
//
//
var script$Y = {
  props: {
    'value': {
      default: 0,
      type: Number
    },
    'prefix': {
      default: '',
      type: String
    },
    'suffix': {
      default: '',
      type: String
    }
  },
  computed: {
    icon() {
      if (this.increased) {
        return 'caret-square-up';
      }

      if (this.decreased) {
        return 'caret-square-down';
      }

      return 'square';
    },

    className() {
      if (this.increased) {
        return 'success--text';
      }

      if (this.decreased) {
        return 'error--text';
      }

      return 'muted';
    },

    increased() {
      return this.value > 0;
    },

    decreased() {
      return this.value < 0;
    }

  }
};

/* script */
const __vue_script__$Y = script$Y;

/* template */
var __vue_render__$X = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('strong',{class:_vm.className},[_c('fluro-icon',{attrs:{"icon":_vm.icon,"library":"fas"}}),_vm._v(" "+_vm._s(_vm.prefix)+_vm._s(_vm.value)+_vm._s(_vm.suffix))],1)};
var __vue_staticRenderFns__$X = [];

  /* style */
  const __vue_inject_styles__$Y = function (inject) {
    if (!inject) return
    inject("data-v-6ee4bcbf_0", { source: ".border-top[data-v-6ee4bcbf]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-6ee4bcbf]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-6ee4bcbf]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-6ee4bcbf]{border-left:1px solid rgba(0,0,0,.05)}.muted[data-v-6ee4bcbf]{font-weight:100;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$Y = "data-v-6ee4bcbf";
  /* module identifier */
  const __vue_module_identifier__$Y = undefined;
  /* functional template */
  const __vue_is_functional_template__$Y = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$X = normalizeComponent(
    { render: __vue_render__$X, staticRenderFns: __vue_staticRenderFns__$X },
    __vue_inject_styles__$Y,
    __vue_script__$Y,
    __vue_scope_id__$Y,
    __vue_is_functional_template__$Y,
    __vue_module_identifier__$Y,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$Z = {
  props: {
    'label': {
      type: String
    },
    'color': {
      type: String
    },
    'start': {
      default: 0,
      type: Number
    },
    'end': {
      default: 0,
      type: Number
    },
    'mean': {
      type: Number
    }
  },

  data() {
    return {};
  },

  computed: {
    average() {
      if (!this.mean) {
        return;
      }

      return `${Math.round(this.mean)}`;
    },

    style() {
      return {
        color: this.color
      };
    },

    icon() {
      if (this.increased) {
        return 'caret-square-up';
      }

      if (this.decreased) {
        return 'caret-square-down';
      }

      return 'square';
    },

    iconAvg() {
      if (this.increasedAvg) {
        return 'caret-square-up';
      }

      if (this.decreasedAvg) {
        return 'caret-square-down';
      }

      return 'square';
    },

    className() {
      if (this.increased) {
        return 'success--text';
      }

      if (this.decreased) {
        return 'error--text';
      }

      return '';
    },

    classNameAvg() {
      if (this.increasedAvg) {
        return 'success--text';
      }

      if (this.decreasedAvg) {
        return 'error--text';
      }

      return '';
    },

    value() {
      return (this.end - this.start) / this.start * 100;
    },

    valueAverage() {
      return (this.end - this.mean) / this.mean * 100;
    },

    swing() {
      return parseFloat(this.value).toFixed(2) + '%';
    },

    swingAverage() {
      return parseFloat(this.valueAverage).toFixed(2) + '%';
    },

    increased() {
      return this.end > this.start;
    },

    decreased() {
      return this.end < this.start;
    },

    increasedAvg() {
      return this.end > this.mean;
    },

    decreasedAvg() {
      return this.end < this.mean;
    },

    subtitle() {
      return 'Growth';
    }

  }
};

/* script */
const __vue_script__$Z = script$Z;

/* template */
var __vue_render__$Y = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"statbox"},[_c('div',{staticClass:"value"},[_vm._v(_vm._s(_vm.end)),(_vm.average)?_c('sup',[_vm._v("("+_vm._s(_vm.average)+" avg)")]):_vm._e()]),_vm._v(" "),_c('label',[_c('fluro-icon',{style:(_vm.style),attrs:{"icon":"circle","library":"fas"}}),_vm._v(" "+_vm._s(_vm.label))],1),_vm._v(" "),_c('div',{staticClass:"subtitle"},[_c('strong',{class:_vm.className},[_c('fluro-icon',{attrs:{"icon":_vm.icon}}),_vm._v("  "+_vm._s(_vm.swing))],1),_vm._v("\n         \n        "),_c('span',{staticClass:"muted"},[_vm._v("("+_vm._s(_vm.start)+" to "+_vm._s(_vm.end)+")")])]),_vm._v(" "),_c('div',{staticClass:"subtitle"},[_c('strong',{class:_vm.classNameAvg},[_c('fluro-icon',{attrs:{"icon":_vm.iconAvg}}),_vm._v("  "+_vm._s(_vm.swingAverage))],1),_vm._v("\n         \n        "),_c('span',{staticClass:"muted"},[_vm._v("("+_vm._s(_vm.average)+" to "+_vm._s(_vm.end)+")")])])])};
var __vue_staticRenderFns__$Y = [];

  /* style */
  const __vue_inject_styles__$Z = function (inject) {
    if (!inject) return
    inject("data-v-6f94323b_0", { source: ".border-top[data-v-6f94323b]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-6f94323b]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-6f94323b]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-6f94323b]{border-left:1px solid rgba(0,0,0,.05)}.statbox[data-v-6f94323b]{padding:15px}label[data-v-6f94323b]{font-weight:700;margin-bottom:10px;display:block}.value[data-v-6f94323b]{font-size:3em;font-weight:800;line-height:1em}.value sup[data-v-6f94323b]{font-weight:400;opacity:.5;font-size:.3em}.subtitle[data-v-6f94323b]{font-size:.9em}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$Z = "data-v-6f94323b";
  /* module identifier */
  const __vue_module_identifier__$Z = undefined;
  /* functional template */
  const __vue_is_functional_template__$Z = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$Y = normalizeComponent(
    { render: __vue_render__$Y, staticRenderFns: __vue_staticRenderFns__$Y },
    __vue_inject_styles__$Z,
    __vue_script__$Z,
    __vue_scope_id__$Z,
    __vue_is_functional_template__$Z,
    __vue_module_identifier__$Z,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var formatDay = 'dddd D MMM YYYY';
var formatWeek = '[Week] w YYYY';
var formatMonth = 'MMM YYYY';
var formatQuarter = '[Quarter] Q YYYY';
var formatYear = 'YYYY';
var dateGroupFormatOptions = [{
  title: 'Day',
  value: formatDay
}, {
  title: 'Week',
  value: formatWeek
}, {
  title: '4 Week Period',
  value: '4week',

  handler(date) {
    // 52 / 4 
    // 13
    // 
    var weekNumber = moment(date).format('W');
    var yearNumber = moment(date).format('YYYY'); // var chunk = 13 % weekNumber;
    // console.log('WEEK', weekNumber, chunk)

    var periodName = `Period ${Math.ceil(weekNumber / 4)} ${yearNumber}`;
    return periodName;
  }

}, {
  title: '6 Week Period',
  value: '6week',

  handler(date) {
    // 52 / 4 
    // 13
    // 
    var weekNumber = moment(date).format('W');
    var yearNumber = moment(date).format('YYYY'); // var chunk = 13 % weekNumber;
    // console.log('WEEK', weekNumber, chunk)

    var periodName = `Period ${Math.ceil(weekNumber / 6)} ${yearNumber}`;
    return periodName;
  }

}, {
  title: 'Month',
  value: formatMonth
}, {
  title: 'Quarter',
  value: formatQuarter
}, {
  title: 'Year',
  value: formatYear
}]; ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
/// 

var chartTypeOptions = [{
  title: 'Line',
  value: 'line'
}, {
  title: 'Bar',
  value: 'bar'
}, {
  title: 'Area',
  value: 'area'
}];
var weekday = [];
weekday[0] = "Sunday";
weekday[1] = "Monday";
weekday[2] = "Tuesday";
weekday[3] = "Wednesday";
weekday[4] = "Thursday";
weekday[5] = "Friday";
weekday[6] = "Saturday"; ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Not currently used
//var day = (1000 * 60 * 60 * 24);

var week = 1000 * 60 * 60 * 24 * 7;
var now = new Date();
var datePeriodOptions = [];
datePeriodOptions.push({
  title: 'Last 2 Years',
  start: new Date(new Date().setFullYear(new Date().getFullYear() - 2)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 12 Months',
  start: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 6 Months',
  start: new Date(new Date().setMonth(new Date().getMonth() - 6)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 3 Months',
  start: new Date(new Date().setMonth(new Date().getMonth() - 3)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 12 Weeks',
  start: new Date(new Date().setTime(new Date().getTime() - week * 12)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 4 Weeks',
  start: new Date(new Date().setTime(new Date().getTime() - week * 4)),
  end: now
});
datePeriodOptions.push({
  title: 'Last 2 Weeks',
  start: new Date(new Date().setTime(new Date().getTime() - week * 2)),
  end: now
}); ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

var script$_ = {
  components: {
    ChangeIndicator: __vue_component__$X,
    Statbox: __vue_component__$Y
  },
  props: {
    'singleScale': {
      type: Boolean
    },
    'id': {
      type: String,
      default: String(Math.random())
    },
    'title': {
      type: String
    },
    'group': {
      type: String
    },
    'weekStartDay': {
      type: Number,
      default: 4
    },
    'type': {
      type: String,
      default: 'line'
    },
    'dateFormat': {
      type: String,
      default: formatWeek
    },
    'localeID': {
      type: String,
      default: 'fluro-chart'
    },
    'data': {
      default() {
        return {
          series: [],
          values: []
        };
      },

      type: Object
    }
  },

  data() {
    var self = this; //Get the specified chart type from the props

    var defaultChartType = lodash.find(chartTypeOptions, {
      value: self.type
    });

    var defaultGroupFormat = lodash.find(dateGroupFormatOptions, {
      value: self.dateFormat
    });

    var DEFAULT_DATA = {
      chartLocale: self.localeID,
      datePeriodOptions,
      datePeriod: datePeriodOptions[1],
      dateGroupFormatOptions,
      dateGroupFormat: defaultGroupFormat,
      series: [],
      chartType: defaultChartType
    }; // console.log('DEFAULT', DEFAULT_DATA)

    return DEFAULT_DATA;
  },

  mixins: [ReportingColorsMixin],
  computed: {
    grouping() {
      return 'grouped together';
    },

    values() {
      return this.data.values;
    },

    pieChartSeries() {
      return lodash.chain(this.enabledSeries).map(function (series) {
        return lodash.get(series, `data[${series.data.length - 1}][1]`);
      }).value();
    },

    pieChartOptions() {
      return {
        labels: lodash.map(this.enabledSeries, 'title')
      };
    },

    perPageOptions() {
      return [10, 20, 50, {
        'text': 'All',
        'value': -1
      }];
    },

    hasData() {
      return this.data && this.data.values && this.data.values.length; // > 2;
    },

    enabledSeries() {
      var self = this;
      return lodash.filter(self.series, function (series) {
        if (series.hidden) {
          return;
        }

        if (!series.min && !series.max) {
          return;
        }

        return true;
      });
    },

    // lastValueDate() {
    //     var self = this;
    //     if(!self.enabledSeries.length) {
    //         return now
    //     }
    //     var mappedOptions = _.map(self.enabledSeries, "date");
    //     var maxDate = _.max(mappedOptions)
    //     console.log("maxDate", mappedOptions, maxDate, self.enabledSeries)
    //     return maxDate ? Date(maxDate) : now
    // },
    headers() {
      var self = this;
      return [{
        text: '',
        align: 'left',
        sortable: false,
        value: 'enabled'
      }, {
        text: '',
        align: 'left',
        sortable: false,
        value: 'color'
      }, {
        text: 'Title',
        align: 'left',
        sortable: true,
        value: 'title'
      }, {
        text: 'Mean / Average',
        value: 'mean',
        align: 'center'
      }, {
        text: `At ${self.readableStartDate}`,
        value: 'start',
        align: 'center'
      }, {
        text: `At ${self.readableEndDate}`,
        value: 'end',
        align: 'center'
      }, {
        text: 'Swing over time',
        value: 'changedPeriod'
      }, {
        text: 'Swing from Average',
        value: 'changedAverage'
      } // { text: 'Realms', value: 'realms' },
      // { text: 'Checked in', value: 'stats.checkin' },
      // { text: 'Headcount', value: 'stats.headcount' },
      ];
    },

    readableStartDate() {
      var self = this;
      var formattedDate;

      if (self.dateGroupFormat.handler) {
        formattedDate = self.dateGroupFormat.handler(self.datePeriod.start);
      } else {
        formattedDate = self.$fluro.date.formatDate(self.datePeriod.start, self.dateGroupFormat.value);
      }

      return formattedDate;
    },

    readableEndDate() {
      var self = this;
      var formattedDate;

      if (self.dateGroupFormat.handler) {
        formattedDate = self.dateGroupFormat.handler(self.datePeriod.end);
      } else {
        formattedDate = self.$fluro.date.formatDate(self.datePeriod.end, self.dateGroupFormat.value);
      }

      return formattedDate;
    },

    startDateString: {
      get() {
        return this.datePeriod.start.toISOString().substr(0, 10);
      },

      set(value) {
        return this.datePeriod.start = new Date(value);
      }

    },
    endDateString: {
      get() {
        return this.datePeriod.end.toISOString().substr(0, 10);
      },

      set(value) {
        return this.datePeriod.end = new Date(value);
      }

    },

    datePeriodTitle() {
      if (self.datePeriod) {
        return self.datePeriod.title;
      } else {
        return 'Custom';
      }
    },

    chartTypeOptions() {
      return chartTypeOptions;
    },

    markers() {
      return {
        size: 3,
        // colors: undefined,
        strokeColor: '#fff',
        strokeWidth: 1,
        // strokeOpacity: 0.9,
        // fillOpacity: 1,
        // discrete: [],
        // shape: "circle",
        // radius: 2,
        // offsetX: 0,
        // offsetY: 0,
        hover: {
          size: 10 // sizeOffset: 10

        }
      };
    },

    legend() {
      return {
        show: false,
        showForNullSeries: false,
        showForZeroSeries: false
      }; // var output = {
      //     labels: {
      //         colors: [],
      //     },
      // }
      // _.each(self.enabledSeries, function(series, index) {
      //     output.labels.colors[index] = _.get(series, 'options.legend.color') || _.get(series, 'options.stroke.color') || self.theme.colors[index % self.theme.colors.length];
      //     // output.curve[index] = _.get(series, 'options.legend.curve') || 'smooth'; // || 'straight'
      //     // output.dashArray[index] = _.get(series, 'options.legend.dashArray');
      //     // output.width[index] = _.get(series, 'options.legend.width') || 5;
      //     // output.lineCap[index] = _.get(series, 'options.legend.lineCap') || 'round'; // || 'butt';
      // });
      // return output;
    },

    dataLabels() {
      return {
        enabled: false //true,
        // enabledOnSeries: undefined,
        // formatter: function(val, opts) {
        //     return val
        // },
        // textAnchor: 'middle',
        // offsetX: 0,
        // offsetY: 0,
        // style: {
        //     fontSize: '20px',
        //     fontFamily: 'Helvetica, Arial, sans-serif',
        //     colors: undefined
        // },
        // dropShadow: {
        //     enabled: false,
        //     top: 1,
        //     left: 1,
        //     blur: 1,
        //     opacity: 0.45
        // }

      };
    },

    colors() {
      var self = this;
      return lodash.map(self.enabledSeries, function (series, index) {
        return lodash.get(series, 'color') || self.theme.colors[index % self.theme.colors.length];
      });
    },

    stroke() {
      var self = this;
      var output = {
        colors: [],
        curve: [],
        dashArray: [],
        width: [],
        lineCap: []
      };

      lodash.each(self.enabledSeries, function (series, index) {
        output.colors[index] = lodash.get(series, 'options.stroke.color') || lodash.get(series, 'color') || self.theme.colors[index % self.theme.colors.length];
        output.curve[index] = lodash.get(series, 'options.stroke.curve') || 'straight'; // || 'smooth'

        output.dashArray[index] = lodash.get(series, 'options.stroke.dashArray');
        output.width[index] = lodash.get(series, 'options.stroke.width') || 5;
        output.lineCap[index] = lodash.get(series, 'options.stroke.lineCap') || 'round'; // || 'butt';
      });

      return output;
    },

    fill() {
      var self = this;
      var output = {
        colors: []
      };

      lodash.each(self.enabledSeries, function (series, index) {
        output.colors[index] = lodash.get(series, 'options.fill.color') || lodash.get(series, 'color') || self.theme.colors[index % self.theme.colors.length];
      });

      return output;
    },

    chartOptions() {
      var self = this;
      var output = {
        chart: {
          id: self.id,
          responsive: [{
            breakpoint: undefined,
            options: {}
          }],
          height: 350,
          // stacked: true,
          zoom: {
            type: 'x',
            enabled: false // enabled: false,

          },
          toolbar: {
            show: false,
            enabled: false,
            autoSelected: 'zoom'
          },
          group: self.group //Groups the two charts together

        },
        plotOptions: {
          line: {
            curve: 'smooth'
          }
        },
        colors: this.colors,
        dataLabels: this.dataLabels,
        legend: this.legend,
        stroke: this.stroke,
        markers: this.markers,
        fill: this.fill,
        // title: {
        //     text: this.title,
        //     align: 'left'
        // },
        // fill: {
        //     type: 'gradient',
        //     gradient: {
        //         shadeIntensity: 1,
        //         inverseColors: false,
        //         opacityFrom: 0.5,
        //         opacityTo: 0,
        //         stops: [0, 90, 100]
        //     },
        // },
        grid: {
          row: {
            colors: ['#f3f3f3', 'transparent'],
            // takes an array which will be repeated on columns
            opacity: 0.5
          }
        },
        xaxis: this.xaxis,
        yaxis: this.yaxis,
        tooltip: {
          shared: false,
          custom: function (val) {
            var match = self.enabledSeries[val.seriesIndex].data[val.dataPointIndex] || []; // console.log('MATCH?', match)
            // 
            // console.log('VALUE', match);

            return match[2]; // return `<pre>${val.dataPointIndex}</pre>`;
          },
          y: {
            formatter: function (val) {
              var formattedDate;

              if (self.dateGroupFormat.handler) {
                formattedDate = self.dateGroupFormat.handler(val);
              } else {
                formattedDate = self.$fluro.date.formatDate(val, self.dateGroupFormat.value);
              }

              return formattedDate; // return self.$fluro.date.formatDate(val, self.dateGroupFormat.value);
              // return (val / 1000000).toFixed(0)
            }
          },
          x: {
            formatter: function (val) {
              var formattedDate;

              if (self.dateGroupFormat.handler) {
                formattedDate = self.dateGroupFormat.handler(val);
              } else {
                formattedDate = self.$fluro.date.formatDate(val, self.dateGroupFormat.value);
              }

              return formattedDate; // return self.$fluro.date.formatDate(val, self.dateGroupFormat.value);
              // return (val / 1000000).toFixed(0)
            }
          }
        }
      };
      return output;
    },

    xaxis() {
      return {
        labels: {
          datetimeFormatter: {
            year: 'yyyy',
            month: 'MMM yyyy',
            day: 'ddd d MMM',
            hour: 'HH:mm'
          }
        },
        type: 'datetime'
      }; //     return {
      //         categories: ['Jan', 'Feb', 'Woot', 'Hallo!', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],
      //     }
    },

    yaxis() {
      var self = this; // return {
      //     seriesName:self.series[0].title,
      // }

      if (!self.enabledSeries || !self.enabledSeries.length) {
        return;
      } /////////////////////////////////////////


      if (self.singleScale) {
        var maxSeries = lodash.last(lodash.orderBy(self.enabledSeries, 'max'));

        var minSeries = lodash.first(lodash.orderBy(self.enabledSeries, 'min'));

        return [{
          seriesName: maxSeries.name,
          max: Math.round(maxSeries.max * 1.05) || 0,
          min: minSeries.min,
          show: true
        }];
      } /////////////////////////////////////////


      return lodash.map(self.enabledSeries, function (series, index) {
        return {
          seriesName: series.name,
          max: Math.round(series.max * 1.05) || 0,
          min: series.min,
          show: true
        };
      });
      /**
      return _.map(self.enabledSeries, function(series, index) {
           
           
          // return {
          //     show:true,//!hidden,//: index == 0,
          //     seriesName: series.name,
          //     max: Math.round(series.max * 1.05) || 0,
          //     min: series.min || 0,
          // }
           return {
              show: index == 0,
              seriesName: maxSeries.name,
              max: Math.round(maxSeries.max * 1.05),
              min: minSeries.min,
          }
      })
      /**/
      // return {
      // show: true,
      // showAlways: true,
      // seriesName: undefined,
      // opposite: false,
      // reversed: false,
      // logarithmic: false,
      // tickAmount: 10,
      // min: 6,
      // max: 6,
      // forceNiceScale: true,
      // floating: false,
      // decimalsInFloat: undefined,
      // labels: {
      //     show: true,
      //     align: 'right',
      //     minWidth: 0,
      //     maxWidth: 160,
      //     style: {
      //         color: undefined,
      //         fontSize: '12px',
      //         fontFamily: 'Helvetica, Arial, sans-serif',
      //         cssClass: 'apexcharts-yaxis-label',
      //     },
      //     offsetX: 0,
      //     offsetY: 0,
      //     rotate: 0,
      //     formatter: (value) => { return val },
      // },
      // axisBorder: {
      //     show: true,
      //     color: '#78909C',
      //     offsetX: 0,
      //     offsetY: 0
      // },
      // axisTicks: {
      //     show: true,
      //     borderType: 'solid',
      //     color: '#78909C',
      //     width: 6,
      //     offsetX: 0,
      //     offsetY: 0
      // },
      // title: {
      //     text: undefined,
      //     rotate: -90,
      //     offsetX: 0,
      //     offsetY: 0,
      //     style: {
      //         color: undefined,
      //         fontSize: '12px',
      //         fontFamily: 'Helvetica, Arial, sans-serif',
      //         cssClass: 'apexcharts-yaxis-title',
      //     },
      // },
      // crosshairs: {
      //     show: true,
      //     position: 'back',
      //     stroke: {
      //         color: '#b6b6b6',
      //         width: 1,
      //         dashArray: 0,
      //     },
      // },
      // tooltip: {
      //     enabled: true,
      //     offsetX: 0,
      // },
      // }
    }

  },
  methods: {
    markerClick(event, context, details) {
      var self = this;
      var series = self.enabledSeries[details.seriesIndex];
      var dataPoint = series.data[details.dataPointIndex];
      console.log('CLICKED', dataPoint[3], series, dataPoint, self);
      self.$emit('clicked', dataPoint[3], series, dataPoint, self); // details, series, 
      // console.log('MARKER', series.title, dataPoint[3]);
    },

    click(event, stuff, things) {
      console.log('CLICK', event, stuff, things);
    },

    dataPointSelection(event, chartContext, config) {
      // var selectedIndex = 
      console.log('DATAPOINT', chartContext);
    },

    getFirstDayOfWeek(date) {
      var self = this;
      var returnDate = moment(date) // .locale('en', {week: {dow: weekStartDay}})
      .locale(self.chartLocale).weekday(0).toDate();
      return returnDate;
    },

    setFirstDayOfWeek(weekStartDay) {
      var self = this;
      moment.locale(self.chartLocale, {
        week: {
          dow: weekStartDay
        }
      });
    },

    selectDateFormat(option) {
      this.dateGroupFormat = option;
      this.recalculateAndMapSeries();
    },

    selectChartType(option) {
      this.chartType = option; // this.recalculateAndMapSeries();
    },

    downloadURI(uri, name) {
      var link = document.createElement("a");
      link.download = name;
      link.href = uri;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link); // delete link;
    },

    downloadPNG() {
      var self = this;
      var chart = this.$refs.chart;
      var dataURL = chart.dataURI().then(uri => {
        console.log('PNG');
        self.downloadURI(uri, 'Chart.png'); // var pdf = new jsPDF();
        // pdf.addImage(uri, 'PNG', 0, 0);
        // pdf.save("download.pdf");
      });
    },

    downloadSVG() {
      var self = this;
      var chart = this.$refs.chart;
      console.log('SVG', chart);
      var paper = chart.paper(); // .then((svg) => {

      self.downloadURI(paper.svg(), 'Chart.svg'); // var pdf = new jsPDF();
      // pdf.addImage(uri, 'PNG', 0, 0);
      // pdf.save("download.pdf");
      // })
    },

    selectorName(seriesName) {
      return `series${lodash.camelCase(seriesName).toLowerCase()}`;
    },

    showHighlight(series) {
      var all = this.$el.querySelectorAll('.apexcharts-series');

      lodash.each(all, function (element) {
        element.style.opacity = 0.1;
      }); // _.each(this.$el.querySelectorAll('.apexcharts-series'), function(element) {
      //     console.log(element.node);
      //     // element.style.opacity = 0;
      //     // console.log('ELEMENT', element);
      //     element.node.style.opacity = 0;
      // })


      var selector = `.${series.name}`;
      var element = this.$el.querySelector(selector); // console.log('ELEMENT', selector, element);

      if (element) {
        element.style.opacity = 1; // element.style.opacity = 1; //.css({'opacity':1})
      }
    },

    hideHighlight() {
      var all = this.$el.querySelectorAll('.apexcharts-series');

      lodash.each(all, function (element) {
        element.style.opacity = 1;
      });
    },

    hideAll() {
      lodash.each(this.series, function (series, i) {
        series.hidden = true;
      });
    },

    showAll() {
      lodash.each(this.series, function (series, i) {
        series.hidden = false;
      });
    },

    soloSeries(series) {
      this.hideAll();
      series.hidden = false;
    },

    toggleSeries(series, solo) {
      if (solo) {
        return this.soloSeries(series);
      }

      series.hidden = !series.hidden; // console.log('toggle Series', series.title, this.$refs.chart);
      // this.$refs.chart.toggleSeries(series.name);
    },

    recalculateAndMapSeries() {//Empty Function
    },

    // , 100),
    mapSeries(title, key, color, options) {
      if (!options) {
        options = {};
      }

      var self = this; ///////////////////////////////////////////

      var values = lodash.chain(self.values).filter(self.filterDateRange).reduce(function (set, entry) {
        ////////////////////////////////////////
        var groupingDate = new Date(entry.date);
        groupingDate.setHours(0, 0, 0, 0); ////////////////////////////////////////
        // function getMonday(d) {
        //     d = new Date(d);
        //     var day = d.getDay(),
        //         diff = d.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
        //     return new Date(d.setDate(diff));
        // }
        ////////////////////////////////////////

        switch (self.dateGroupFormat.value) {
          // case formatDay:
          // break;
          case formatWeek:
            groupingDate = self.getFirstDayOfWeek(groupingDate, self.weekStartDay); // getMonday(groupingDate);

            break;
          // case formatMonth:
          // break;
          // case formatYear:
          // break;
        }

        var formatValue = self.dateGroupFormat.value;
        var dateKey;

        if (self.dateGroupFormat.handler) {
          dateKey = self.dateGroupFormat.handler(groupingDate);
        } else {
          dateKey = moment(groupingDate).format(self.dateGroupFormat.value);
        } ////////////////////////////////////////


        var existing = set[dateKey];

        if (!existing) {
          existing = set[dateKey] = {
            date: groupingDate,
            entries: []
          };
        } //Add the entry into our group
        // console.log('PUSH ENTRY', entry)


        existing.entries.push(entry);
        return set;
      }, {}).values().compact().map(function (group) {
        var tooltip = '<div class="chart-tooltip">'; //////////////////////////////////////

        var formattedDate;

        if (self.dateGroupFormat.handler) {
          formattedDate = self.dateGroupFormat.handler(group.date);
        } else {
          formattedDate = self.$fluro.date.formatDate(group.date, self.dateGroupFormat.value);
        }

        tooltip += `<strong>${formattedDate}</strong>`;
        tooltip += `<div>${self.$fluro.date.timeago(group.date)}</div>`;
        tooltip += `<strong style="color:${color};">${title}</strong><br/>`; //////////////////////////////////////

        var totalEntries = 0; //////////////////////////////////////

        var table = '<table class="table">';

        var totalledValue = lodash.chain(group.entries).orderBy(function (entry) {
          return new Date(entry.date);
        }).reduce(function (set, entry) {
          //Get the value from the specified key on each entry
          var entryValue = lodash.get(entry.values, key); //This entry does not have a value


          if (entryValue == undefined) {
            return set;
          } //No value has been accumulated yet


          if (set == undefined) {
            set = 0;
          }

          table += `<tr><td>${entry.title || ''}</td><td>${self.$fluro.date.formatDate(entry.date, 'h:mma D MMM YYYY')}</td><td><strong>${entryValue}</strong></td></tr>`; //Add to total entries

          totalEntries++; //Total it up

          return set + entryValue;
        }, undefined).value();

        table += `<tr><td colspan="2"><strong>Total</strong></td><td><strong>${totalledValue}</strong></td></tr>`;
        table += '</table>'; //////////////////////////////////////

        tooltip += `<strong>${totalledValue} ${options.metricName || 'total'}</strong><br/>`;
        tooltip += `${totalEntries} events<br/>`; //////////////////////////////////////

        tooltip += table;
        tooltip += '</div>'; //////////////////////////////////////

        if (totalledValue == undefined) {
          if (!options.includeNull) {
            return;
          }

          totalledValue = null;
        }

        return [group.date, totalledValue, tooltip, group];
      }).compact().orderBy(function (value) {
        return value[0];
      }).value(); // if (values.length < 2) {
      //     return;
      // }
      // console.log('VALUES', _.first(values));
      ///////////////////////////////////////////


      var firstValue = (lodash.first(values) || [])[1];
      var lastValue = (lodash.last(values) || [])[1];
      var lastDate = (lodash.last(values) || [])[0];
      var firstDate = (lodash.first(values) || [])[0]; ///////////////////////////////////////////

      var mean = Math.round(lodash.chain(values).compact().meanBy(function (array) {
        return array[1];
      }).value()); ///////////////////////////////////////////

      var max = lodash.max(lodash.map(values, function (array) {
        return array[1];
      }));

      var min = lodash.min(lodash.map(values, function (array) {
        return array[1];
      }));

      if (!values.length) {
        firstValue = 0;
        lastValue = 0;
        mean = 0;
        max = 0;
        min = 0;
      } ///////////////////////////////////////////


      var changeOverPeriod = Math.round((lastValue - firstValue) / firstValue * 100);
      var changeOverAverage = Math.round((lastValue - mean) / mean * 100); ///////////////////////////////////////////
      // console.log('GETTTT', title, values);

      var name = self.selectorName(title);
      var mapped = {
        title: title,
        id: name,
        key,
        name,
        //Need to ensure no series names start with a number
        color: color,
        options: options,
        data: values,
        type: options.type,
        start: firstValue,
        end: lastValue,
        mean: mean,
        max: max,
        min: min,
        hidden: false,
        solo: false,
        changedPeriod: changeOverPeriod,
        changedAverage: changeOverAverage,
        date: lastDate,
        firstDate: firstDate
      }; // console.log('MAP SERIES', title, mapped);

      return mapped;
    },

    filterDateRange(entry) {
      var self = this;
      var now = new Date(entry.date).getTime();
      var cropStart = new Date(self.datePeriod.start).getTime();
      var cropEnd = new Date(self.datePeriod.end).getTime(); // console.log('FILTER DATE RANGE', cropStart, cropEnd);

      return now >= cropStart && now <= cropEnd;
    },

    seriesIsActive(series) {
      return !series.hidden;
    } // watchString() {
    //     var self = this;
    //     console.log('RECOMPUTE WATCH STRING')
    //     return `${self.datePeriod.start}-${self.datePeriod.end}-${self.dateGroupFormat.value}`
    // }


  },
  watch: {
    chartType() {
      return this.recalculateAndMapSeries();
    },

    data() {
      return this.recalculateAndMapSeries();
    },

    datePeriod: {
      handler: function (v) {
        return this.recalculateAndMapSeries();
      },
      deep: true
    } // 'dateGroupFormat': function(v) {
    //     console.log('CHANGING NOW?',v)
    //     return this.recalculateAndMapSeries();
    // },
    // watchString(v) {
    //     console.log('String changed', v)
    //     return this.recalculateAndMapSeries();
    // },

  },

  created() {
    // this.recalculateAndMapSeries();
    var self = this; //Set as thursday

    self.setFirstDayOfWeek(4);
    self.recalculateAndMapSeries = lodash.debounce(function () {
      var mapped = lodash.chain(self.data.series).map(function (entry, index) {
        var color = entry.color || self.getColor(index);
        var mergedOptions = Object.assign({}, {
          type: self.chartType.value
        }, entry.options); // console.log('ENTRY', entry.title, mergedOptions.type)

        return self.mapSeries(entry.title, entry.key, color, mergedOptions); //entry.options);
      }).compact().orderBy(function (series) {
        return series.mean;
      }).reverse().value(); // console.log('REMAP SERIES', mapped[])


      self.series = mapped;
    }, 200);
  },

  mounted() {
    this.recalculateAndMapSeries();
  }

};

/* script */
const __vue_script__$_ = script$_;

/* template */
var __vue_render__$Z = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.hasData)?_c('v-card',{staticClass:"chart-widget"},[_c('div',{staticClass:"chart-header"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('v-flex',{staticClass:"chart-title"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-toolbar-items',{staticClass:"hidden-xs-only"},[_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({},on),[_c('fluro-icon',{attrs:{"left":"","icon":("chart-" + (_vm.chartType.value)),"library":"far"}}),_vm._v("\n                            "+_vm._s(_vm.chartType.title)+"\n                        ")],1)]}}],null,false,1749139046)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.chartTypeOptions),function(option){return _c('v-list-tile',{key:option.value,on:{"click":function($event){return _vm.selectChartType(option)}}},[_c('v-list-tile-content',[_vm._v("\n                                "+_vm._s(option.title)+"\n                            ")]),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":("chart-" + (option.value)),"library":"far","right":""}})],1)}),1)],1),_vm._v(" "),_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({},on),[_c('fluro-icon',{attrs:{"library":"far","icon":"clock"}}),_vm._v(" "+_vm._s(_vm.dateGroupFormat.title)+"\n                            ")],1)]}}],null,false,1802485439)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.dateGroupFormatOptions),function(option){return _c('v-list-tile',{key:option.value,on:{"click":function($event){return _vm.selectDateFormat(option)}}},[_c('v-list-tile-content',[_vm._v(_vm._s(option.title))])],1)}),1)],1),_vm._v(" "),_c('v-menu',{ref:"dateSelection",attrs:{"fixed":true,"right":true,"close-on-content-click":false,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({},on),[_c('fluro-icon',{attrs:{"library":"far","icon":"calendar","left":""}}),_vm._v(" "+_vm._s(_vm.readableStartDate)+" - "+_vm._s(_vm.readableEndDate)+"\n                            ")],1)]}}],null,false,1427879873)},[_vm._v(" "),_c('v-card',[_c('v-layout',[_c('v-flex',[_c('v-card-text',[_c('label',[_vm._v(" ")]),_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.datePeriodOptions),function(option){return _c('v-list-tile',{key:option.value,on:{"click":function($event){_vm.datePeriod = option;}}},[_vm._v("\n                                            "+_vm._s(option.title)+"\n                                        ")])}),1)],1)],1),_vm._v(" "),_c('v-flex',[_c('v-card-text',{staticClass:"text-sm-center"},[_c('label',[_vm._v("From Date")])]),_vm._v(" "),_c('v-date-picker',{attrs:{"no-title":"","scrollable":""},model:{value:(_vm.startDateString),callback:function ($$v) {_vm.startDateString=$$v;},expression:"startDateString"}})],1),_vm._v(" "),_c('v-flex',[_c('v-card-text',{staticClass:"text-sm-center"},[_c('label',[_vm._v("To Date")])]),_vm._v(" "),_c('v-date-picker',{attrs:{"no-title":"","scrollable":""},model:{value:(_vm.endDateString),callback:function ($$v) {_vm.endDateString=$$v;},expression:"endDateString"}})],1)],1)],1)],1),_vm._v(" "),_c('v-menu',{attrs:{"fixed":true,"right":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0",attrs:{"icon":""}},on),[_c('v-icon',[_vm._v("more_vert")])],1)]}}],null,false,471955300)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":_vm.hideAll}},[_c('v-list-tile-content',[_vm._v("\n                                Hide all Series\n                            ")]),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":"eye-slash","library":"far","right":""}})],1),_vm._v(" "),_c('v-list-tile',{on:{"click":_vm.showAll}},[_c('v-list-tile-content',[_vm._v("\n                                Show all Series\n                            ")]),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":"eye","right":""}})],1),_vm._v(" "),_c('v-list-tile',{on:{"click":_vm.downloadPNG}},[_c('v-list-tile-content',[_vm._v("Download PNG")]),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":"image","library":"fas","right":""}})],1)],1)],1)],1)],1)],1),_vm._v(" "),_c('v-layout',{attrs:{"row":"","wrap":"","fill-height":""}},[_vm._l((_vm.enabledSeries.slice(0, 4)),function(trend){return (trend.end)?[_c('v-flex',{attrs:{"shrink":""}},[_c('statbox',{attrs:{"color":trend.color,"label":trend.title,"start":trend.start,"mean":trend.mean,"end":trend.end}})],1),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-divider',{attrs:{"vertical":""}})],1)]:_vm._e()})],2),_vm._v(" "),_c('div',{staticClass:"chart-wrapper-outer",class:{empty:!_vm.enabledSeries.length}},[_c('div',{staticClass:"chart-wrapper-empty"},[_vm._v("\n            No data\n        ")]),_vm._v(" "),_c('div',{staticClass:"chart-wrapper-inner"},[_c('apexchart',{ref:"chart",attrs:{"height":350,"type":_vm.chartType.value,"options":_vm.chartOptions,"series":_vm.enabledSeries},on:{"dataPointSelection":_vm.markerClick}})],1)]),_vm._v(" "),(_vm.series.length)?[_c('v-data-table',{staticClass:"elevation-0",attrs:{"hide-actions":_vm.series.length <= 10,"headers":_vm.headers,"rows-per-page-items":_vm.perPageOptions,"items":_vm.series},scopedSlots:_vm._u([{key:"items",fn:function(props){return [_c('tr',{class:{inactive:!_vm.seriesIsActive(props.item)}},[_c('td',{on:{"mouseover":function($event){return _vm.showHighlight(props.item)},"mouseleave":function($event){return _vm.hideHighlight()},"click":function($event){return _vm.toggleSeries(props.item, $event.metaKey)}}},[_c('v-btn',{attrs:{"icon":""}},[(_vm.seriesIsActive(props.item))?_c('fluro-icon',{attrs:{"icon":"eye"}}):_vm._e(),_vm._v(" "),(!_vm.seriesIsActive(props.item))?_c('fluro-icon',{attrs:{"icon":"eye-slash","library":"far"}}):_vm._e()],1)],1),_vm._v(" "),_c('td',[_c('fluro-icon',{attrs:{"color":props.item.color,"icon":"circle","library":"fas"}})],1),_vm._v(" "),_c('td',[_vm._v("\n                        "+_vm._s(props.item.title)+"\n                        ")]),_vm._v(" "),_c('td',{staticClass:"text-xs-center"},[_vm._v(_vm._s(props.item.mean))]),_vm._v(" "),_c('td',{staticClass:"text-xs-center"},[_vm._v(_vm._s(props.item.start))]),_vm._v(" "),_c('td',{staticClass:"text-xs-center"},[_vm._v(_vm._s(props.item.end))]),_vm._v(" "),_c('td',[_c('change-indicator',{attrs:{"value":props.item.changedPeriod,"suffix":"%"}})],1),_vm._v(" "),_c('td',[_c('change-indicator',{attrs:{"value":props.item.changedAverage,"suffix":"%"}})],1)])]}}],null,false,1963932089)})]:_vm._e()],2):_vm._e()};
var __vue_staticRenderFns__$Z = [];

  /* style */
  const __vue_inject_styles__$_ = function (inject) {
    if (!inject) return
    inject("data-v-2edf5a26_0", { source: ".border-top[data-v-2edf5a26]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2edf5a26]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2edf5a26]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2edf5a26]{border-left:1px solid rgba(0,0,0,.05)}.chart-widget .chart-header[data-v-2edf5a26]{padding:10px 15px;background:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.chart-widget .chart-header .chart-title[data-v-2edf5a26]{font-weight:500;line-height:36px;font-size:1.2em;display:flex;align-items:center}.chart-widget .chart-header .v-btn[data-v-2edf5a26]{margin:10px}.chart-widget .chart-header .v-btn[data-v-2edf5a26] .v-btn__content{padding:10px 0;height:36px}.chart-widget .chart-wrapper-outer[data-v-2edf5a26]{background:#eee;position:relative;border-bottom:1px solid #ddd}.chart-widget .chart-wrapper-outer .chart-wrapper-empty[data-v-2edf5a26]{display:none;position:absolute;left:0;top:0;right:0;bottom:0;flex:1;text-align:center;color:rgba(0,0,0,.5);justify-content:center;align-items:center}.chart-widget .chart-wrapper-outer .chart-wrapper-inner[data-v-2edf5a26]{background:#fff}.chart-widget .chart-wrapper-outer.empty .chart-wrapper-empty[data-v-2edf5a26]{display:flex}.chart-widget .chart-wrapper-outer.empty .chart-wrapper-inner[data-v-2edf5a26]{opacity:0}.chart-widget[data-v-2edf5a26] tr.inactive td{background:#efefef;color:#999;font-style:italic;text-decoration:line-through;font-size:.8em;padding-top:0;padding-bottom:0}.chart-widget[data-v-2edf5a26] .v-toolbar{height:auto!important}.chart-widget[data-v-2edf5a26] .v-toolbar .v-toolbar__content{height:auto!important;padding:5px 15px}.chart-widget[data-v-2edf5a26] .chart-tooltip{padding:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$_ = "data-v-2edf5a26";
  /* module identifier */
  const __vue_module_identifier__$_ = undefined;
  /* functional template */
  const __vue_is_functional_template__$_ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$Z = normalizeComponent(
    { render: __vue_render__$Z, staticRenderFns: __vue_staticRenderFns__$Z },
    __vue_inject_styles__$_,
    __vue_script__$_,
    __vue_scope_id__$_,
    __vue_is_functional_template__$_,
    __vue_module_identifier__$_,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var currentRawRequest;
var currentPageItemsRequest; /////////////////////////////////

var MAX_ROWS$1 = 100000; //100000;

var MAX_CHUNK_SIZE$1 = 5000;

var script$$ = {
  props: {
    showFooter: {
      type: Boolean
    },
    trackingKey: {
      type: String,
      default: '_id'
    },
    defaultFields: {
      type: Array,

      default() {
        return [];
      }

    },
    grouping: {
      type: Function
    },
    includeArchivedByDefault: {
      type: Boolean
    },
    enableSelection: {
      type: Boolean,
      default: true
    },
    defaultSort: {
      type: String,
      default: 'title'
    },
    defaultSortType: {
      type: String,
      default: 'string'
    },
    defaultSortDirection: {
      type: String,
      default: 'asc'
    },
    clickable: {
      type: Boolean,

      default() {
        return true;
      }

    },
    clicked: {
      type: Function,

      default() {
        // console.log('default')
        return function (item, column) {// console.log('clicked', item, column);
        };
      }

    },
    columns: {
      type: Array,

      default() {
        return [];
      }

    },
    items: {
      type: Array,

      default() {
        return [];
      }

    },
    filterConfig: {
      type: Object,

      default() {
        return {
          operator: 'and',
          filters: []
        };
      }

    },
    initPage: {
      type: [Number, String],
      default: 1
    },
    initSort: {
      type: Object,

      default() {
        return {
          key: this.defaultSort || 'title',
          direction: this.defaultSortDirection || 'asc',
          type: this.defaultSortType || 'string'
        };
      }

    },
    pageSize: {
      type: Number,
      default: 100
    },
    dataSource: {
      type: String
    },
    allDefinitions: {
      type: Boolean
    },
    search: {
      type: String
    },
    startDate: {
      type: Date
    },
    endDate: {
      type: Date
    }
  },

  data() {
    // var initialFilter = JSON.parse(JSON.stringify(this.startFilter));
    // console.log('INITIAL PAGE', this.initPage)
    return {
      // filterConfig:JSON.parse(JSON.stringify(this.filterConfig)), 
      filtered: [],
      refined: [],
      debouncedSearch: this.search,
      perPage: this.pageSize,
      loading: false,
      loadingItems: false,
      currentPage: parseInt(this.initPage),
      previousSelectionIndex: -1,
      sort: JSON.parse(JSON.stringify(this.initSort)),
      rowsLoaded: 0
    };
  },

  computed: {
    footerEnabled() {
      if (this.showFooter) {
        return true;
      }

      if (this.totalPages > 1) {
        return true;
      }
    },

    selectionEnabled() {
      return !(this.enableSelection === false) && this.$selection;
    },

    grouped() {
      var self = this;

      if (self.grouping) {
        return self.grouping(self.page);
      } else {
        return;
      }
    },

    excludeArchived() {
      var self = this;

      if (self.includeArchivedByDefault) {
        return false;
      } ////////////////////////////////////////////////


      var requiresArchivedInResults = lodash.some(self.activeFilterRows, function (row) {
        if (row.key != 'status') {
          return;
        } //Check if archived is one of the values


        var isRelevant = row.value == 'archived' || lodash.includes(row.values, 'archived');

        var isDeceased = row.value == 'deceased' || lodash.includes(row.values, 'deceased'); /////////////////////////////////////////


        switch (row.comparator) {
          case '==':
          case 'startswith':
          case 'endswith':
          case 'like':
          case 'contains':
          case 'in':
            return isRelevant || isDeceased;

          default:
            //If it's does not contain then
            //return back if archived is not an option
            return !isRelevant && !isDeceased;
        }
      }); //// console.log('REQUIRES ARCHIVE??', requiresArchivedInResults);
      /////////////////////////////////////////


      return !requiresArchivedInResults;
    },

    // currentPage: {
    //     get() {
    //         return this._currentPage;
    //     },
    //     set(input) {
    //         this._currentPage = parseInt(input);
    //              //Scroll to top
    //             var topElement = this.$refs.top;
    //             if (topElement) {
    //                 topElement.scrollIntoView({
    //                     // block:'center',
    //                     // behavior:'smooth',
    //                 });
    //             }
    // //     this.$emit('pageChange', this.currentPage);
    // // },
    //     }
    // },
    rowsTotal() {
      return this.rowsLoaded || this.rows.length || MAX_CHUNK_SIZE$1 || MAX_ROWS$1;
    },

    showLoading() {
      return this.loading || this.loadingItems;
    },

    activeFilters() {
      var result = FilterService.activeFilters(this.filterConfig);
      console.log('active filters', result);
      return result;
    },

    activeFilterRows() {
      var result = lodash.filter(this.activeFilters, function (row) {
        return row.comparator && row.comparator.length;
      });

      console.log('active filter rows', result);
      return result;
    },

    activeFilterKeys() {
      var result = FilterService.activeFilterKeys(this.filterConfig);
      console.log('active filter keys', result);
      return result;
    },

    activeFilterValues() {
      var result = FilterService.activeFilterValues(this.filterConfig);
      console.log('active filter values', result);
      return result;
    },

    activeFilterComparators() {
      var result = FilterService.activeFilterComparators(this.filterConfig);
      console.log('active filter comparators', result);
      return result;
    },

    activeFilterOperators() {
      var result = FilterService.activeFilterComparators(this.filterConfig);
      console.log('active operators', result);
      return result;
    },

    rowCheckString() {
      // console.log('RECOMPUTE ROWS')
      var rows = this.rows || [];

      var ids = lodash.map(rows, '_id').join('');

      var keys = lodash.keys(rows[0]);

      return `${ids}${keys}`; // return _.chain(this.rows).map('_id').orderBy(function(id) {
      //     return id;
      // }).join('');
    },

    dateWatchString() {
      if (!this.startDate) {
        return;
      }

      if (!this.endDate) {
        return;
      }

      return String(this.startDate) + String(this.endDate);
    },

    filterCheckString() {
      var filterString = FilterService.getFilterChangeString(this.filterConfig); // console.log('filter check string', filterString);

      return filterString; // console.log('RECOMPUTE FILTER STRING', filterString, this.rows)
      // return `${this.rowCheckString}-${filterString}`;
    },

    isAsync() {
      return this.dataSource && this.dataSource.length;
    },

    previousPageDisabled() {
      return this.currentPage <= 1;
    },

    nextPageDisabled() {
      return this.currentPage == this.totalPages;
    },

    sorted() {
      var self = this;
      var items = this.refined;

      if (!self.sort || !items.length) {
        return items; //defaultSort(items);
      } //////////////////////////////////////////////
      // function defaultSort(items) {
      //     //console.log('DEFAULT SORT!');
      //     return _.chain(items)
      //     .orderBy(function(item) {
      //         //console.log('RELEVANCE?', item)
      //         if(item._relevance) {
      //             var relevanceScore = _.chain(item.relevance).values(item._relevance).sum();
      //             //console.log('Relevance score', relevanceScore);
      //             return relevanceScore;
      //         }
      //         return item.title || item.name || item;
      //     })
      //     .value();
      // }
      // console.log('SORTING NOW');
      //////////////////////////////////////////////


      var sortingKey = self.sort.sortKey;
      var sortingType = self.sort.sortType;
      var sortingDirection = self.sort.sortDirection; //////////////////////////////////////////////

      if (!sortingKey || !sortingKey.length) {
        sortingKey = self.defaultSort; //'title';
      }

      if (!sortingType || !sortingType.length) {
        sortingType = self.defaultSortType; //'string';
      }

      if (!sortingDirection || !sortingDirection.length) {
        sortingDirection = self.defaultSortDirection; //'asc';
      } // console.log('SORTING KEY', self, sortingKey, sortingType, sortingDirection);
      //////////////////////////////////////////////
      // console.log('Sort items by', sortingKey, items);


      items = lodash.orderBy(items, function (item) {
        //Get the value
        var val = lodash.get(item, sortingKey); //If it's an array return the first item in the array


        if (lodash.isArray(val) && val.length) {
          //Use the first item in the array to sort on
          val = val[0];
        } ///////////////////////////////////


        var isNull = val === undefined || val === null; ///////////////////////////////////

        switch (sortingType) {
          case 'boolean':
            if (!val) {
              return 0;
            } else {
              return 1;
            }

          case 'number':
          case 'integer':
          case 'decimal':
          case 'float':
            if (isNull || isNaN(val)) {
              return -9999999999999999999999999999999999;
            }

            if (sortingType == 'integer') {
              return parseInt(val);
            } else {
              return parseFloat(val);
            }

          case 'date':
            if (isNull) {
              return 0;
            }

            var date = new Date(val);
            var timestamp = date.getTime();

            if (isNaN(timestamp)) {
              return 0;
            } else {
              return timestamp;
            }

          default:
            if (lodash.isObject(val)) {
              if (val.title) {
                val = val.title;
              } else {
                if (val.name) {
                  val = val.name;
                }
              }
            }

            return String(val).toLowerCase();
        }
      }); //////////////////////////////////////////////

      if (sortingDirection == 'desc') {
        items.reverse();
      } //////////////////////////////////////////////
      // console.log('Sorted', sortingKey, sortingType, sortingDirection, items);


      return items;
    },

    filteredTotal() {
      return this.refined ? this.refined.length : 0;
    },

    availablePages() {
      var chunk = lodash.chunk(this.sorted, this.perPage);

      return chunk;
    },

    startOffset() {
      return Math.floor((this.currentPage - 1) * this.perPage);
    },

    endOffset() {
      return Math.min(this.startOffset + this.perPage, this.filteredTotal);
    },

    rawPage() {
      // console.log('RAW', this.currentPage, this.totalPages)
      if (this.currentPage > this.totalPages) {
        return lodash.first(this.availablePages);
      } else {
        return this.availablePages[this.currentPage - 1];
      }
    },

    totalPages() {
      return this.availablePages ? this.availablePages.length : 0;
    },

    allSelected() {
      var self = this;

      if (!self.page || !self.page.length) {
        return;
      } //Check if any of the rows are not selected


      var anyNotSelected = lodash.some(self.page, function (item) {
        var notSelected = !self.$selection.isSelected(item);
        return notSelected;
      });

      return !anyNotSelected;
    },

    someSelected() {
      var self = this;

      if (self.allSelected) {
        return true;
      }

      return lodash.some(self.page, function (item) {
        return self.$selection.isSelected(item);
      });
    },

    selectAllIcon() {
      if (this.allSelected) {
        return 'check-square';
      }

      if (this.someSelected) {
        return 'minus-square';
      }

      return 'square';
    }

  },
  asyncComputed: {
    rows: {
      default: [],

      get() {

        var self = this;

        if (!self.isAsync) {
          return Promise.resolve([]);
        } //////////////////////////////////////////


        var fields = ['_id', 'title', 'status'];

        if (self.startDate || self.endDate) {
          fields.push('startDate');
          fields.push('endDate');
        } // rawFields() {
        //     var array = ['_id', 'title', 'status'];
        //     if(this.defaultFields && this.defaultFields.length) {
        //         array = array.concat(this.defaultFields);
        //     }
        //     return array;
        // },
        // fields = fields.concat(this.defaultFields.slice());
        //.concat(['_id', self.defaultSort]);//'title']
        // , '_type', 'definition']; //, 'tags', 'keywords', 'definition', 'realms'];
        // var fields = ['_id', 'title']; //, 'tags', 'keywords', 'definition', 'realms'];
        //////////////////////////////////////
        //We also need the field we are sorting on


        if (self.sort && self.sort.sortKey) {
          fields.push(self.sort.sortKey);
        } //////////////////////////////////////
        // fields = fields.concat(_.chain(self.columns)
        //     .map(function(column) {
        //         if (column.additionalFields && column.additionalFields.length) {
        //             return [].concat(column.additionalFields, column.key)
        //             // console.log('Additional Fields', column.additionalFields)
        //         }
        //         return column.key
        //     })
        //     .flatten()
        //     .uniq()
        //     .compact()
        //     .value());
        ///////////////////////////////////////


        var EXCLUDE_ARCHIVED = self.excludeArchived; //// console.log('Exclude archived is', EXCLUDE_ARCHIVED);
        //////////////////////////////////////////
        //And the fields we are filtering on

        fields = fields.concat(self.activeFilterKeys); // var appendDetailSheets = _.chain(fields)

        self.loadingItems = true;
        self.rowsLoaded = 0; //////////////////////////////////////////

        fields = lodash.chain(fields).compact().uniq().value(); // console.log('FIELDS', fields)
        //////////////////////////////////////////

        return new Promise(function (resolve, reject) {
          var i = 0;
          var offset = 0;
          var memo = []; /////////////////////////////////////////////////

          function checkBatch(lastBatch) {
            //If we reached the end of the page
            var fullChunk = lastBatch.length == MAX_CHUNK_SIZE$1;
            var reachedLimit = memo.length >= MAX_ROWS$1;

            if (fullChunk && !reachedLimit) {
              i++;
              offset = i * MAX_CHUNK_SIZE$1;
              console.log('Loading Chunk', i, offset, '-', offset + MAX_CHUNK_SIZE$1);
              return loadNextBatch();
            } else {
              resolve(memo);
              self.loadingItems = false;
              self.$emit('raw', memo); // console.log('ROWS IS LOADED NOW', _.keys(memo[0]))
            }
          }

          return loadNextBatch(); /////////////////////////////////////////////////
          /////////////////////////////////////////////////
          /////////////////////////////////////////////////
          /////////////////////////////////////////////////
          /////////////////////////////////////////////////

          function loadNextBatch() {
            //Create a cancel token
            currentRawRequest = self.$fluro.api.CancelToken.source();
            var parameters = {
              fields: fields,
              limit: MAX_CHUNK_SIZE$1,
              offset: offset
            }; ///////////////////////////////////////

            if (self.dataSource == '/content/contact') ; ///////////////////////////////////////


            if (EXCLUDE_ARCHIVED) {
              parameters.excludeArchived = true;
            }

            if (self.allDefinitions) {
              parameters.allDefinitions = true;
            } ///////////////////////////////////////
            ///////////////////////////////////////


            var cacheString = lodash.chain(JSON.stringify(parameters)).compact().orderBy(function (s) {
              return s;
            }).value().join('');

            cacheString = `${self.dataSource}-${cacheString}`; ///////////////////////////////////////

            var valueStorageCache = self.$fluro.cache.get('async-table-cache');
            var cachedValue = valueStorageCache.get(cacheString);

            if (cachedValue) {
              // console.log('Loaded Chunk From Cache!!', cachedValue)
              return chunkLoaded(cachedValue);
            } ///////////////////////////////////////


            function chunkLoaded(data) {
              //Add the next chunk
              memo = memo.concat(data);
              self.rowsLoaded += memo.length; //// console.log('added to memo', res.data.length, memo.length);

              return checkBatch(data);
            } ///////////////////////////////////////
            //Load just the IDS from the server and required fields


            return self.$fluro.api.get(self.dataSource, {
              params: parameters,
              cancelToken: currentRawRequest.token
            }).then(function (res) {
              //Store in cache for later
              valueStorageCache.set(cacheString, res.data);
              chunkLoaded(res.data);
            }, function (err) {
              if (self.$fluro.api.axios.isCancel(err)) ; else {
                return reject(err);
              }
            });
          }
        });
      }

    },
    page: {
      default: [],

      get() {
        //////////////////////////////////////


        var self = this;

        if (!self.isAsync) {
          return Promise.resolve(self.rawPage);
        } //////////////////////////////////////
        // var ids = [];
        // var lookup = _.reduce(self.rawPage, function(set, entry) {
        //     var entryID = entry._id;
        //     ids.push(entryID);
        //     set[entry._id] = entry;
        //     return set;
        // }, {});
        //////////////////////////////////////
        // var ids = _.keys(lookup);


        var ids = lodash.map(self.rawPage, '_id');

        if (!ids || !ids.length) {
          self.loading = false;
          return Promise.resolve([]);
        } //////////////////////////////////////


        var fields = ['title', '_type', 'definition']; //////////////////////////////////////

        fields = fields.concat(lodash.chain(self.columns).map(function (column) {
          switch (column.key) {
            case 'firstName':
              return ['firstName', 'preferredName', 'ethnicName'];

            case 'lastName':
              return ['lastName', 'maidenName'];
          } //////////////////////////////////////


          if (column.additionalFields && column.additionalFields.length) {
            return [].concat(column.additionalFields, column.key);
          }

          return column.key;
        }).flatten().uniq().compact().value()); //////////////////////////////////////

        self.loading = true; //////////////////////////////////////

        return new Promise(function (resolve, reject) {
          //Create a cancel token
          currentPageItemsRequest = self.$fluro.api.CancelToken.source(); /////////////////////////////////////////////////

          self.$fluro.api.get('/content/multiple', {
            params: {
              ids: ids,
              select: fields,
              populateAll: true,
              limit: ids.length
            },
            cancelToken: currentPageItemsRequest.token
          }).then(function (res) {
            var lookup = lodash.reduce(res.data, function (set, entry, i) {
              set[entry._id] = entry;
              return set;
            }, {}); //// console.log('Look for ids', ids);


            var pageItems = lodash.chain(ids).map(function (id, i) {
              var entry = lookup[id];

              if (!entry) {
                console.log('No entry for', id);
                return;
              }

              entry._pageIndex = i;
              return entry;
            }).compact().value(); /////////////////////////////////////


            resolve(pageItems); /////////////////////////////////////
            // _.each(res.data, function(fullNode) {
            //     var source = lookup[fullNode._id];
            //     _.assign(source, fullNode);
            //     source._populating = false;
            // });
            // resolve(_.map(self.rawPage);

            self.loading = false;
          }, function (err) {
            if (self.$fluro.api.axios.isCancel(err)) ; else {
              return reject(err);
            }
          });
        }); // return Promise.resolve(self.rawPage);
      }

    }
  },
  filters: {
    numberWithCommas(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

  },
  watch: {
    // refi
    // refilter() {
    //     return rows + filterCheckString,
    // },
    // :'refilter',
    items: 'refilter',
    rows: 'refilter',
    filterCheckString: 'refilter',
    // debouncedSearch:'refine',
    search: lodash.debounce(function (newValue) {
      this.debouncedSearch = newValue;
      this.refine();
    }, 500),
    dateWatchString: lodash.debounce(function (newValue) {
      this.refine();
    }, 500)
  },
  methods: {
    refilter: lodash.debounce(function () {
      console.log('Refilter now'); //Refilter the page

      var self = this;
      var rows = self.isAsync ? self.rows : self.items;

      if (!rows || !rows.length) {
        self.filtered = rows; // console.log('there are no rows')

        return self.refine();
      } ///////////////////////////////////////////////////////////////
      //Check if we have a valid filter


      var validFilters = FilterService.isValidFilter(self.filterConfig);

      if (validFilters) {
        //console.log('has valid filters', rows.length)
        // var filtered = filterGroupMatch(self.filterConfig, rows);
        rows = lodash.filter(rows, function (row) {
          // //console.log('CHECK MATCH FOR ROW', row);
          var match = FilterService.filterGroupMatch(self.filterConfig, null, row); //console.log('MATCH?', match, row);

          return match;
        });
      } // //console.log('no valid filters')
      ///////////////////////////////////////////////////////////////
      // //console.log('ROWS', rows.length);


      self.filtered = rows;
      self.refine();
    }, 100),

    refine() {
      // //console.log('Refine')
      var self = this;
      var rows = self.filtered; //////////////////////////////////////////////////////////

      if (!rows || !rows.length) {
        self.refined = [];
        return;
      } //////////////////////////////////////////////////////////


      var refinedItems = rows; //////////////////////////////////////////////////////////

      if (self.debouncedSearch && self.debouncedSearch.length) {
        var searchKeywords = String(self.debouncedSearch).toLowerCase().trim();
        var searchPieces = searchKeywords.split(' '); ////////////////////////////////////////////////

        refinedItems = lodash.filter(refinedItems, function (item) {
          var itemTitle = String(item.title).trim().toLowerCase();

          var exactMatch = lodash.includes(itemTitle, searchKeywords);

          if (exactMatch) {
            return true;
          } /////////////////////////////////////////////////////
          //Multiword Match


          var match = lodash.every(itemTitle.split(' '), function (partial) {
            return lodash.some(searchPieces, function (word) {
              return lodash.includes(word, partial);
            });
          });

          if (match) {
            return true;
          } /////////////////////////////////////////////////////
          // //Get any of the visible columns
          // var columnWords = _.chain(self.columns)
          // .map(function(column) {
          //     var word = _.get(item, column.key);
          //     return word ? String(word).toLowerCase() || '';
          // })
          // .compact()
          // .value();
          // /////////////////////////////////////////////////////
          // //Check if it matches any of the column keywords
          // if(_.intersection(columnWords, searchPieces).length) {
          //     return true;
          // }
          /////////////////////////////////////////////////////


          return FilterService.matchAnyString(searchKeywords, item);
        });
      } ////////////////////////////////////////////////


      if (self.startDate && self.endDate) {
        var startDate = new Date(self.startDate);
        startDate.setHours(0, 0, 0, 0);
        var endDate = new Date(self.endDate);
        endDate.setHours(0, 0, 0, 0); //////////////////////

        refinedItems = lodash.filter(refinedItems, function (item) {
          var itemStartDate = new Date(item.startDate);
          itemStartDate.setHours(0, 0, 0, 0);
          var itemEndDate = new Date(item.endDate);
          itemEndDate.setHours(0, 0, 0, 0);

          if (itemEndDate < startDate) {
            return;
          }

          if (itemStartDate > endDate) {
            return;
          }

          return true;
        });
      } // //console.log('REFINED DATE', refinedItems.length);
      ////////////////////////////////////////////////


      self.refined = refinedItems; // self.refined = _.filter(rows, function(row) {
      //     var rowTitle = String(row.title).trim().toLowerCase();
      //     var exactMatch = _.includes(rowTitle, searchKeywords);
      //     if (exactMatch) {
      //         return true;
      //     }
      //     var pieces = rowTitle.split(' ');
      //     //// //console.log('PIECES', pieces, searchPieces);
      //     var match = _.every(searchPieces, function(partial) {
      //         return _.some(pieces, function(word) {
      //             return _.includes(word, partial);
      //         })
      //     })
      //     if(match) {
      //         return true;
      //     }
      //     return FilterService.matchAnyString(searchKeywords, row);
      //     // var similar = FilterService.isSimilar(searchKeywords, rowTitle);
      //     // if (similar) {
      //     //     return true;
      //     // }
      // });
    },

    // pageChange() {
    //      //Scroll to top
    //     var topElement = this.$refs.top;
    //     if (topElement) {
    //         topElement.scrollIntoView({
    //             // block:'center',
    //             // behavior:'smooth',
    //         });
    //     }
    //     this.$emit('pageChange', this.currentPage);
    // },
    checkboxClick(item, $event, itemIndex) {
      // console.log('ITEM INDEX', itemIndex, item, $event);
      return this.toggleSelection(item, $event, itemIndex); // //console.log('Checkbox click!');
    },

    toggleSelection(item, $event, itemIndex, isolateOnClick) {
      // var isolateOnClick = true;//false;
      ////////////////////
      //No event data
      if (!$event) {
        if (isolateOnClick) {
          //Set the selection to just this item
          this.$selection.setSelection([item]); //console.log('SET SELECTION', item)

          return;
        } else {
          //Select/Deselect this item
          this.$selection.toggle(item);
          return;
        }
      } ////////////////////
      //They held CTRL/CMD down when they clicked


      if ($event.metaKey) {
        this.previousSelectionIndex = -1;
        return this.$selection.toggle(item);
      } ////////////////////
      //No button was pressed


      if (!$event.shiftKey) {
        //Remember this thing as what we selected
        this.previousSelectionIndex = itemIndex;

        if (isolateOnClick) {
          this.$selection.previousIntent = 'select';
          return this.$selection.setSelection([item]);
        } else {
          return this.$selection.toggle(item);
        }
      } ////////////////////////////////////////////


      if (!itemIndex) {
        //Forget about it
        this.previousSelectionIndex = -1;
      } ////////////////////////////////////////////
      //If there is a previous index


      if (this.previousSelectionIndex != -1) {
        //Find our range
        var start = Math.min(this.previousSelectionIndex, itemIndex);
        var end = Math.max(this.previousSelectionIndex, itemIndex);

        if (itemIndex > this.previousSelectionIndex) {
          end += 1;
        }

        this.previousSelectionIndex = itemIndex;
        var getRange = this.page.slice(start, end);

        switch (this.$selection.previousIntent) {
          case 'deselect':
            return this.$selection.deselectMultiple(getRange);

          default:
            return this.$selection.selectMultiple(getRange);
        }
      }

      this.previousSelectionIndex = itemIndex;
      return this.$selection.toggle(item);
    },

    isActiveSort(key) {
      return this.sort.sortKey == key;
    },

    isSortable(column) {
      if (!column) {
        return;
      }

      var v = !(column.sortable === false);
      return v;
    },

    setSort(sortObject) {
      this.sort = sortObject;
      this.$emit('sort', sortObject);
    },

    toggleSort(column) {
      var self = this;

      if (!self.isSortable(column)) {
        return;
      } // console.log('COLUMN', column);


      if (!column.key || !column.key.length) {
        return;
      } //console.log('TOGGLE SORT', self.sort)
      /////////////////////////


      var sortKey = column.key;
      var sortType = column.sortType || 'string';
      var alreadyActive = self.sort && self.sort.sortKey == sortKey;
      var currentDirection = self.sort.sortDirection;
      var sortDirection = alreadyActive ? currentDirection == 'asc' ? 'desc' : 'asc' : 'asc'; /////////////////////////

      if (!self.isAsync) {
        self.setSort({
          sortKey,
          sortType,
          sortDirection
        });
      } else {
        self.setSort({
          sortKey,
          sortType,
          sortDirection
        });
      } //Change to first page


      self.setPage(1);
    },

    classes(item) {
      var classes = [];

      if (!item) {
        return classes;
      }

      if (this.$selection.isSelected(item)) {
        classes.push('selected');
      } //// console.log('iTEM ISSUE', item)


      classes.push('status-' + item.status);
      return classes;
    },

    setPage(pageNumber) {
      if (this.currentPage == pageNumber) {
        console.log('already at page', pageNumber);
        return;
      }

      this.currentPage = pageNumber; // this.pageChange();

      var topElement = this.$refs.top;

      if (topElement) {
        // console.log('SCROLL INTO VIEW')
        topElement.scrollIntoView({// block:'center',
          // behavior:'smooth',
        });
      }

      this.$emit('page', pageNumber);
    },

    firstPage() {
      this.currentPage = 1;
    },

    lastPage() {
      this.currentPage = this.totalPages;
    },

    nextPage() {
      //console.log(this.currentPage, this.totalPages);
      this.currentPage < this.totalPages ? this.setPage(this.currentPage + 1) : this.setPage(this.totalPages);
    },

    previousPage() {
      this.currentPage > 1 ? this.setPage(this.currentPage - 1) : this.setPage(1);
    },

    selectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      this.$selection.selectMultiple(this.page);
    },

    deselectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      this.$selection.deselectMultiple(this.page);
    },

    selectAll() {
      this.$selection.selectMultiple(this.refined);
    },

    deselectAll() {
      this.$selection.deselectAll();
    },

    toggleSelectAll() {
      if (!this.page || !this.page.length) {
        return;
      } // //console.log('Toggle All', this.page);


      if (this.allSelected) {
        this.$selection.deselectMultiple(this.page);
      } else {
        this.$selection.selectMultiple(this.page);
      }
    }

  },
  components: {
    TableHeaderCheckbox: __vue_component__$h,
    TableRowCheckbox: __vue_component__$i,
    TableCell: __vue_component__$o
  }
};

/* script */
const __vue_script__$$ = script$$;

/* template */
var __vue_render__$_ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-table-wrapper"},[(_vm.showLoading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_vm._e(),_vm._v(" "),(_vm.rows.length && !_vm.sorted.length)?_c('v-container',{staticClass:"flex-center"},[_vm._t("emptytext",[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo results were found matching your criteria\n\t\t\t\t\t\t\t\t\t\t\t\t")])],2):[_c('div',{ref:"scrollableArea",staticClass:"fluro-table-scroll",class:{clickable:_vm.clickable, loading:_vm.showLoading}},[_c('span',{ref:"top"}),_vm._v(" "),_c('table',{staticClass:"fluro-table-main no-select"},[_c('thead',[_c('tr',[(_vm.selectionEnabled)?_c('th',{staticClass:"first shrink checkbox-cell"},[_c('v-menu',{attrs:{"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('div',_vm._g({},on),[_c("table-header-checkbox",{tag:"div",attrs:{"all":_vm.allSelected,"some":_vm.someSelected}})],1)]}}],null,false,3536504858)},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_c('v-list',{attrs:{"dense":""}},[(!_vm.allSelected)?_c('v-list-tile',{on:{"click":function($event){return _vm.selectPage()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSelect this page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1):_vm._e(),_vm._v(" "),(_vm.someSelected)?_c('v-list-tile',{on:{"click":function($event){return _vm.deselectPage()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDeselect this page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1):_vm._e(),_vm._v(" "),(_vm.filteredTotal)?_c('v-list-tile',{on:{"click":function($event){return _vm.selectAll()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSelect all "+_vm._s(_vm.filteredTotal)+" items\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1):_vm._e(),_vm._v(" "),(_vm.$selection.selection.length)?_c('v-list-tile',{on:{"click":function($event){return _vm.deselectAll()}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDeselect all "+_vm._s(_vm.filteredTotal)+" items\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1):_vm._e()],1)],1)],1)],1):_vm._e(),_vm._v(" "),_vm._l((_vm.columns),function(column){return _c('th',{class:[column.classes, {'shrink':column.shrink, sortable:_vm.isSortable(column), 'sorting':_vm.sort.sortKey == column.key, 'text-xs-center':column.align == 'center', 'text-xs-right':column.align =='right'}],on:{"click":function($event){return _vm.toggleSort(column)}}},[(_vm.isActiveSort(column.key))?_c('div',{staticClass:"sort-icon"},[(_vm.sort.sortDirection == 'desc')?_c('fluro-icon',{attrs:{"library":"fas","icon":"caret-down"}}):_vm._e(),_vm._v(" "),(_vm.sort.sortDirection == 'asc')?_c('fluro-icon',{attrs:{"library":"fas","icon":"caret-up"}}):_vm._e()],1):_vm._e(),_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(column.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])}),_vm._v(" "),(_vm.selectionEnabled)?_c('th',{staticClass:"last shrink"}):_vm._e()],2)]),_vm._v(" "),_c('tbody',[(_vm.grouped)?[_vm._l((_vm.grouped),function(group){return [(group.title)?_c('tr',{staticClass:"breaker"},[_c('th'),_vm._v(" "),_c('td',{attrs:{"colspan":1 + _vm.columns.length}},[_vm._v(_vm._s(group.title))])]):_vm._e(),_vm._v(" "),_vm._l((group.items),function(item,key){return _c('tr',{key:item[_vm.trackingKey],class:_vm.classes(item)},[(item._populating)?[_c("table-row-checkbox",{tag:"th"}),_vm._v(" "),_c('td',{attrs:{"colspan":_vm.columns.length},nativeOn:{"click":function($event){return _vm.clicked(item, _vm.column, key)}}},[_vm._v("-")]),_vm._v(" "),_c('th',{staticClass:"shrink"})]:[_c("table-row-checkbox",{tag:"th",staticClass:"first",attrs:{"checked":_vm.$selection.isSelected(item),"value":item},nativeOn:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.checkboxClick(item, $event, item._pageIndex)}}}),_vm._v(" "),_vm._l((_vm.columns),function(column){return _c('table-cell',{class:[column.classes, {'sorting':_vm.sort.sortKey == column.key}],attrs:{"row":item,"column":column},nativeOn:{"click":function($event){return _vm.clicked(item, column, key)}}})}),_vm._v(" "),_c('th',{staticClass:"last shrink"},[_c('div',{staticClass:"action-buttons"},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)])]],2)})]})]:_vm._l((_vm.page),function(item,key){return (!item.hidden)?_c('tr',{key:item[_vm.trackingKey],class:_vm.classes(item)},[(item._populating)?[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th"}):_vm._e(),_vm._v(" "),_c('td',{attrs:{"colspan":_vm.columns.length},nativeOn:{"click":function($event){return _vm.clicked(item, _vm.column, key)}}},[_vm._v("-")]),_vm._v(" "),(_vm.selectionEnabled)?_c('th',{staticClass:"shrink"}):_vm._e()]:[(_vm.selectionEnabled)?_c("table-row-checkbox",{tag:"th",staticClass:"first",attrs:{"checked":_vm.$selection.isSelected(item),"value":item},nativeOn:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.checkboxClick(item, $event, key)}}}):_vm._e(),_vm._v(" "),_vm._l((_vm.columns),function(column){return _c('table-cell',{class:[column.classes, {'sorting':_vm.sort.sortKey == column.key}],attrs:{"row":item,"column":column},nativeOn:{"click":function($event){return _vm.clicked(item, column, key)}}})}),_vm._v(" "),(_vm.selectionEnabled)?_c('th',{staticClass:"last shrink"},[_c('div',{staticClass:"action-buttons"},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)]):_vm._e()]],2):_vm._e()})],2)])]),_vm._v(" "),(_vm.footerEnabled)?_c('div',{staticClass:"footer-stats"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[(!_vm.totalPages)?[_c('v-flex',{staticClass:"text-muted"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo matches\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:[_c('v-flex',{staticClass:"text-muted",attrs:{"xs6":"","align-center":"","d-flex":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm._f("numberWithCommas")(_vm.startOffset + 1))+" to "+_vm._s(_vm._f("numberWithCommas")(_vm.endOffset))+" of "+_vm._s(_vm._f("numberWithCommas")(_vm.filteredTotal))+" matches\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-flex',{staticClass:"text-xs-right",staticStyle:{"white-space":"nowrap"},attrs:{"xs6":"","align-center":"","d-flex":""}},[_c('div',[(_vm.$vuetify.breakpoint.smAndUp)?_c('span',{staticClass:"text-muted"},[_vm._v("Page "+_vm._s(_vm.currentPage)+" of "+_vm._s(_vm.totalPages))]):_vm._e(),_vm._v(" "),_c('span',{staticClass:"ml-3"},[[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.firstPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-left"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.previousPageDisabled,"icon":""},on:{"click":function($event){return _vm.previousPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-left"}})],1)],_vm._v(" "),[_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.nextPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-right"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"disabled":_vm.nextPageDisabled,"icon":""},on:{"click":function($event){return _vm.lastPage()}}},[_c('fluro-icon',{attrs:{"icon":"arrow-to-right"}})],1)]],2)])])]],2)],1):_vm._e()]],2)};
var __vue_staticRenderFns__$_ = [];

  /* style */
  const __vue_inject_styles__$$ = function (inject) {
    if (!inject) return
    inject("data-v-4012e00e_0", { source: ".border-top,.fluro-table-wrapper .footer-stats{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-table-wrapper{position:relative;flex:1;display:flex;flex-direction:column;overflow:hidden;height:100%}.fluro-table-wrapper .v-progress-linear{position:absolute;top:0;left:0;right:0;margin:0;padding:0}.fluro-table-wrapper .thumbnail{background-size:cover;background-position:center;width:50px;height:30px;border-radius:3px;display:block}.fluro-table-wrapper .fluro-table-scroll{position:relative;width:100%;z-index:1;margin:auto;overflow:auto;height:100%;overscroll-behavior-x:none!important;overscroll-behavior-y:none!important;overscroll-behavior:none!important}.fluro-table-wrapper .fluro-table-scroll table{width:100%;margin:auto;border-collapse:separate;border-spacing:0}.fluro-table-wrapper .fluro-table-scroll.loading table{opacity:.5}.fluro-table-wrapper .fluro-table-scroll td,.fluro-table-wrapper .fluro-table-scroll th{padding:8px 5px;border-bottom:1px solid #e8edf1;vertical-align:middle;white-space:nowrap;position:relative}.fluro-table-wrapper .fluro-table-scroll td.shrink,.fluro-table-wrapper .fluro-table-scroll th.shrink{width:1px}.fluro-table-wrapper .fluro-table-scroll th.sorting{background:#f6f6f6!important}.fluro-table-wrapper .fluro-table-scroll .action-buttons{opacity:.3;white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll tr{background:#fff}.fluro-table-wrapper .fluro-table-scroll tr td.first,.fluro-table-wrapper .fluro-table-scroll tr td.last,.fluro-table-wrapper .fluro-table-scroll tr td.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr td.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr th.first,.fluro-table-wrapper .fluro-table-scroll tr th.last,.fluro-table-wrapper .fluro-table-scroll tr th.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr th.sticky-last{background:#fff}.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd){background:#fcfcfc}.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) td.first,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) td.last,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) td.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) td.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.first,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.last,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr:nth-child(odd) th.sticky-last{background:#fcfcfc}.fluro-table-wrapper .fluro-table-scroll tr.status-archived td.first,.fluro-table-wrapper .fluro-table-scroll tr.status-archived td.last,.fluro-table-wrapper .fluro-table-scroll tr.status-archived td.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.status-archived td.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.first,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.last,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.status-archived th.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased td.first,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased td.last,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased td.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased td.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.first,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.last,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.status-deceased th.sticky-last{color:#888;background:#f4f4f4}.fluro-table-wrapper .fluro-table-scroll tr.selected td.first,.fluro-table-wrapper .fluro-table-scroll tr.selected td.last,.fluro-table-wrapper .fluro-table-scroll tr.selected td.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.selected td.sticky-last,.fluro-table-wrapper .fluro-table-scroll tr.selected th.first,.fluro-table-wrapper .fluro-table-scroll tr.selected th.last,.fluro-table-wrapper .fluro-table-scroll tr.selected th.sticky-first,.fluro-table-wrapper .fluro-table-scroll tr.selected th.sticky-last{background-color:#f7f6de!important;color:#846b1f;border-color:#f2eac9!important}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.last,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.sticky-first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover td.sticky-last,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.last,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.sticky-first,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover th.sticky-last{background-color:#f4fafa;color:#055d52}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr:hover .action-buttons{opacity:1}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker{background:rgba(0,0,0,.05)}.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker td,.fluro-table-wrapper .fluro-table-scroll.clickable tbody tr.breaker th{background:0 0!important;color:rgba(0,0,0,.5)!important;text-transform:uppercase;font-size:.8em;font-weight:600;letter-spacing:.03em;padding:4px 5px}.fluro-table-wrapper .fluro-table-scroll thead td,.fluro-table-wrapper .fluro-table-scroll thead th{padding:5px 5px;position:-webkit-sticky;position:sticky;top:0;background:#fff!important;z-index:4;text-align:left;font-size:11px;text-transform:uppercase;letter-spacing:.05em;line-height:20px;white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll thead th{white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll thead th.sortable .sort-icon{position:absolute;right:2px}.fluro-table-wrapper .fluro-table-scroll tfoot{position:-webkit-sticky;position:sticky;bottom:0}.fluro-table-wrapper .fluro-table-scroll tfoot,.fluro-table-wrapper .fluro-table-scroll tfoot td,.fluro-table-wrapper .fluro-table-scroll tfoot th{position:-webkit-sticky;position:sticky;bottom:0;background:#fff;z-index:4}.fluro-table-wrapper .fluro-table-scroll tfoot th{white-space:nowrap}.fluro-table-wrapper .fluro-table-scroll td.first,.fluro-table-wrapper .fluro-table-scroll td.sticky-first,.fluro-table-wrapper .fluro-table-scroll th.first,.fluro-table-wrapper .fluro-table-scroll th.sticky-first{position:-webkit-sticky;position:sticky;left:0;z-index:2}.fluro-table-wrapper .fluro-table-scroll td.last,.fluro-table-wrapper .fluro-table-scroll td.sticky-last,.fluro-table-wrapper .fluro-table-scroll th.last,.fluro-table-wrapper .fluro-table-scroll th.sticky-last{position:-webkit-sticky;position:sticky;right:0;z-index:2;text-align:right}.fluro-table-wrapper .fluro-table-scroll thead td.first,.fluro-table-wrapper .fluro-table-scroll thead td.last,.fluro-table-wrapper .fluro-table-scroll thead td.sticky-first,.fluro-table-wrapper .fluro-table-scroll thead td.sticky-last,.fluro-table-wrapper .fluro-table-scroll thead th.first,.fluro-table-wrapper .fluro-table-scroll thead th.last,.fluro-table-wrapper .fluro-table-scroll thead th.sticky-first,.fluro-table-wrapper .fluro-table-scroll thead th.sticky-last{z-index:5}.fluro-table-wrapper .footer-stats{padding:5px 10px;font-size:.9em}.fluro-table-wrapper .flex-center{flex:1;display:flex;text-align:center;justify-content:center;align-items:center}.fluro-table-wrapper td.checkbox-cell,.fluro-table-wrapper th.checkbox-cell{text-align:center;padding-left:5px!important;padding-right:5px!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$$ = undefined;
  /* module identifier */
  const __vue_module_identifier__$$ = undefined;
  /* functional template */
  const __vue_is_functional_template__$$ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$_ = normalizeComponent(
    { render: __vue_render__$_, staticRenderFns: __vue_staticRenderFns__$_ },
    __vue_inject_styles__$$,
    __vue_script__$$,
    __vue_scope_id__$$,
    __vue_is_functional_template__$$,
    __vue_module_identifier__$$,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
var debouncer;
var script$10 = {
  props: {
    placeholder: {
      type: String,
      default: 'Search by keyword'
    },
    value: {
      type: String,
      default: ''
    },
    debounce: {
      type: Number,
      default: 300
    }
  },

  data() {
    return {
      model: this.value,
      searchFocussed: false
    };
  },

  watch: {
    model() {
      var self = this;

      if (debouncer) {
        clearTimeout(debouncer);
      }

      debouncer = setTimeout(() => self.change(), self.debounce);
    },

    value(value) {
      this.model = value;
    }

  },
  methods: {
    change() {
      this.$emit('input', this.model);
    },

    reset() {
      this.model = '';
      this.$emit('input', '');
    }

  }
};

/* script */
const __vue_script__$10 = script$10;

/* template */
var __vue_render__$$ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"search-input",class:{active:_vm.searchFocussed || _vm.model.length}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.model),expression:"model"}],ref:"input",attrs:{"placeholder":_vm.placeholder},domProps:{"value":(_vm.model)},on:{"focus":function($event){_vm.searchFocussed = true;},"blur":function($event){_vm.searchFocussed = false;},"input":function($event){if($event.target.composing){ return; }_vm.model=$event.target.value;}}}),_vm._v(" "),_c('div',{staticClass:"search-icon",on:{"click":function($event){return _vm.reset()}}},[(_vm.model.length)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"search"}})],1)])};
var __vue_staticRenderFns__$$ = [];

  /* style */
  const __vue_inject_styles__$10 = function (inject) {
    if (!inject) return
    inject("data-v-38831d1e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.search-input{position:relative;border-radius:3px;border:1px solid #ccc;overflow:hidden}.search-input.active{border-color:#2ad4b9}.search-input input{line-height:35px;height:35px;display:block;width:100%;padding:0 45px 0 10px;border:none;background:0 0}.search-input input:focus{outline:0;box-shadow:none}.search-input .search-icon{position:absolute;top:0;right:0;bottom:0;width:35px;height:35px;text-align:center;line-height:35px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$10 = undefined;
  /* module identifier */
  const __vue_module_identifier__$10 = undefined;
  /* functional template */
  const __vue_is_functional_template__$10 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$$ = normalizeComponent(
    { render: __vue_render__$$, staticRenderFns: __vue_staticRenderFns__$$ },
    __vue_inject_styles__$10,
    __vue_script__$10,
    __vue_scope_id__$10,
    __vue_is_functional_template__$10,
    __vue_module_identifier__$10,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$11 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    },
    'status': {
      type: Boolean,

      default() {
        return false;
      }

    }
  }
};

/* script */
const __vue_script__$11 = script$11;

/* template */
var __vue_render__$10 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"first-name-cell"},[_c('span',[_c('strong',[_vm._v(_vm._s(_vm.row.preferredName || _vm.row.firstName))]),_vm._v(" "),(_vm.row.preferredName && _vm.row.preferredName != _vm.row.firstName)?_c('span',{staticClass:"muted"},[_vm._v(" ("+_vm._s(_vm.row.firstName)+")")]):_vm._e(),_vm._v(" "),(_vm.row.ethnicName)?_c('span',{staticClass:"muted"},[_vm._v(" "+_vm._s(_vm.row.ethnicName))]):_vm._e()])])};
var __vue_staticRenderFns__$10 = [];

  /* style */
  const __vue_inject_styles__$11 = function (inject) {
    if (!inject) return
    inject("data-v-347ce9bf_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$11 = undefined;
  /* module identifier */
  const __vue_module_identifier__$11 = undefined;
  /* functional template */
  const __vue_is_functional_template__$11 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$10 = normalizeComponent(
    { render: __vue_render__$10, staticRenderFns: __vue_staticRenderFns__$10 },
    __vue_inject_styles__$11,
    __vue_script__$11,
    __vue_scope_id__$11,
    __vue_is_functional_template__$11,
    __vue_module_identifier__$11,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$12 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    },
    'status': {
      type: Boolean,

      default() {
        return false;
      }

    }
  }
};

/* script */
const __vue_script__$12 = script$12;

/* template */
var __vue_render__$11 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"last-name-cell"},[_c('span',[_c('strong',[_vm._v(_vm._s(_vm.row.lastName))]),_vm._v(" "),(_vm.row.maidenName)?_c('span',{staticClass:"muted"},[_vm._v(" ("+_vm._s(_vm.row.maidenName)+")")]):_vm._e()])])};
var __vue_staticRenderFns__$11 = [];

  /* style */
  const __vue_inject_styles__$12 = function (inject) {
    if (!inject) return
    inject("data-v-39fb5d1a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$12 = undefined;
  /* module identifier */
  const __vue_module_identifier__$12 = undefined;
  /* functional template */
  const __vue_is_functional_template__$12 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$11 = normalizeComponent(
    { render: __vue_render__$11, staticRenderFns: __vue_staticRenderFns__$11 },
    __vue_inject_styles__$12,
    __vue_script__$12,
    __vue_scope_id__$12,
    __vue_is_functional_template__$12,
    __vue_module_identifier__$12,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
var script$13 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$13 = script$13;

/* template */
var __vue_render__$12 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v(_vm._s(_vm._f("formatDate")(_vm.data,'h:mma')))])};
var __vue_staticRenderFns__$12 = [];

  /* style */
  const __vue_inject_styles__$13 = function (inject) {
    if (!inject) return
    inject("data-v-498495aa_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$13 = undefined;
  /* module identifier */
  const __vue_module_identifier__$13 = undefined;
  /* functional template */
  const __vue_is_functional_template__$13 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$12 = normalizeComponent(
    { render: __vue_render__$12, staticRenderFns: __vue_staticRenderFns__$12 },
    __vue_inject_styles__$13,
    __vue_script__$13,
    __vue_scope_id__$13,
    __vue_is_functional_template__$13,
    __vue_module_identifier__$13,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
var script$14 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$14 = script$14;

/* template */
var __vue_render__$13 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.coverUrl(_vm.data, "event", {w:50})) + ")")})})};
var __vue_staticRenderFns__$13 = [];

  /* style */
  const __vue_inject_styles__$14 = undefined;
  /* scoped */
  const __vue_scope_id__$14 = undefined;
  /* module identifier */
  const __vue_module_identifier__$14 = undefined;
  /* functional template */
  const __vue_is_functional_template__$14 = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$13 = normalizeComponent(
    { render: __vue_render__$13, staticRenderFns: __vue_staticRenderFns__$13 },
    __vue_inject_styles__$14,
    __vue_script__$14,
    __vue_scope_id__$14,
    __vue_is_functional_template__$14,
    __vue_module_identifier__$14,
    false,
    undefined,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$15 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$15 = script$15;

/* template */
var __vue_render__$14 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"text-xs-center"},[(_vm.data == 'failed')?_c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"payment-failed",attrs:{"content":"Failed"}},[_c('fluro-icon',{attrs:{"icon":"times"}})],1):(_vm.data == 'success')?_c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"payment-success",attrs:{"content":"Success"}},[_c('fluro-icon',{attrs:{"icon":"check"}})],1):(_vm.data == 'pending')?_c('span',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"payment-pending",attrs:{"content":"Pending"}},[_c('fluro-icon',{attrs:{"icon":"clock"}})],1):(_vm.data == 'refund')?_c('div',{staticClass:"payment-archived"},[_vm._v("\n        Refund\n    ")]):(_vm.data == 'partial_refund')?_c('div',{staticClass:"payment-archived"},[_vm._v("\n        Partial Refund\n    ")]):_c('div',{staticClass:"payment-manual"},[_vm._v("\n        "+_vm._s(_vm.data)+"\n    ")])])};
var __vue_staticRenderFns__$14 = [];

  /* style */
  const __vue_inject_styles__$15 = function (inject) {
    if (!inject) return
    inject("data-v-2de80e40_0", { source: ".border-top[data-v-2de80e40]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2de80e40]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2de80e40]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2de80e40]{border-left:1px solid rgba(0,0,0,.05)}span[data-v-2de80e40]{border-radius:100%;display:inline-block;width:26px;height:26px;line-height:26px;text-align:center}.payment-success[data-v-2de80e40]{color:#51d432}.payment-failed[data-v-2de80e40]{color:#d33131}.payment-archived[data-v-2de80e40],.payment-manual[data-v-2de80e40]{color:rgba(0,0,0,.3)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$15 = "data-v-2de80e40";
  /* module identifier */
  const __vue_module_identifier__$15 = undefined;
  /* functional template */
  const __vue_is_functional_template__$15 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$14 = normalizeComponent(
    { render: __vue_render__$14, staticRenderFns: __vue_staticRenderFns__$14 },
    __vue_inject_styles__$15,
    __vue_script__$15,
    __vue_scope_id__$15,
    __vue_is_functional_template__$15,
    __vue_module_identifier__$15,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$16 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    empty() {
      if (parseInt(this.data) == 0) {
        return true;
      }
    },

    rendered() {
      return this.$fluro.utils.formatCurrency(this.data, this.currency);
    },

    currency() {
      return String(this.row.currency).toLowerCase();
    } // symbol() {
    //     switch(String(this.row.currency).toLowerCase()) {
    //         case 'gbp':
    //             return '£';
    //         break;
    //         default:
    //             return '$';
    //         break;
    //     }
    // }


  }
};

/* script */
const __vue_script__$16 = script$16;

/* template */
var __vue_render__$15 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"text-xs-center",class:{muted:_vm.empty}},[_vm._v("\n    "+_vm._s(_vm.rendered)+"\n    ")])};
var __vue_staticRenderFns__$15 = [];

  /* style */
  const __vue_inject_styles__$16 = function (inject) {
    if (!inject) return
    inject("data-v-f552db84_0", { source: ".border-top[data-v-f552db84]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-f552db84]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-f552db84]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-f552db84]{border-left:1px solid rgba(0,0,0,.05)}.symbol[data-v-f552db84]{opacity:.4}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$16 = "data-v-f552db84";
  /* module identifier */
  const __vue_module_identifier__$16 = undefined;
  /* functional template */
  const __vue_is_functional_template__$16 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$15 = normalizeComponent(
    { render: __vue_render__$15, staticRenderFns: __vue_staticRenderFns__$15 },
    __vue_inject_styles__$16,
    __vue_script__$16,
    __vue_scope_id__$16,
    __vue_is_functional_template__$16,
    __vue_module_identifier__$16,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
var script$17 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$17 = script$17;

/* template */
var __vue_render__$16 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"inline-tags"},[_c('a',{staticClass:"inline-tag",attrs:{"href":("tel:" + _vm.data)}},[_c('fluro-icon',{attrs:{"icon":"phone"}}),_vm._v(" "+_vm._s(_vm.data)+"\n    ")],1)])};
var __vue_staticRenderFns__$16 = [];

  /* style */
  const __vue_inject_styles__$17 = function (inject) {
    if (!inject) return
    inject("data-v-23b5189b_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$17 = undefined;
  /* module identifier */
  const __vue_module_identifier__$17 = undefined;
  /* functional template */
  const __vue_is_functional_template__$17 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$16 = normalizeComponent(
    { render: __vue_render__$16, staticRenderFns: __vue_staticRenderFns__$16 },
    __vue_inject_styles__$17,
    __vue_script__$17,
    __vue_scope_id__$17,
    __vue_is_functional_template__$17,
    __vue_module_identifier__$17,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
var script$18 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$18 = script$18;

/* template */
var __vue_render__$17 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"inline-tags"},[_c('a',{staticClass:"inline-tag",attrs:{"href":("mailto:" + _vm.data)}},[_c('fluro-icon',{attrs:{"icon":"envelope"}}),_vm._v(" "+_vm._s(_vm.data)+"\n    ")],1)])};
var __vue_staticRenderFns__$17 = [];

  /* style */
  const __vue_inject_styles__$18 = function (inject) {
    if (!inject) return
    inject("data-v-19cf738a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$18 = undefined;
  /* module identifier */
  const __vue_module_identifier__$18 = undefined;
  /* functional template */
  const __vue_is_functional_template__$18 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$17 = normalizeComponent(
    { render: __vue_render__$17, staticRenderFns: __vue_staticRenderFns__$17 },
    __vue_inject_styles__$18,
    __vue_script__$18,
    __vue_scope_id__$18,
    __vue_is_functional_template__$18,
    __vue_module_identifier__$18,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$19 = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    computed() {
      return this.data ? this.$fluro.asset.filesize(this.data) : '';
    }

  }
};

/* script */
const __vue_script__$19 = script$19;

/* template */
var __vue_render__$18 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v("\n    "+_vm._s(_vm.computed)+"\n")])};
var __vue_staticRenderFns__$18 = [];

  /* style */
  const __vue_inject_styles__$19 = function (inject) {
    if (!inject) return
    inject("data-v-2bdc9f1d_0", { source: ".border-top[data-v-2bdc9f1d]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2bdc9f1d]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2bdc9f1d]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2bdc9f1d]{border-left:1px solid rgba(0,0,0,.05)}div[data-v-2bdc9f1d]{font-size:.9em;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$19 = "data-v-2bdc9f1d";
  /* module identifier */
  const __vue_module_identifier__$19 = undefined;
  /* functional template */
  const __vue_is_functional_template__$19 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$18 = normalizeComponent(
    { render: __vue_render__$18, staticRenderFns: __vue_staticRenderFns__$18 },
    __vue_inject_styles__$19,
    __vue_script__$19,
    __vue_scope_id__$19,
    __vue_is_functional_template__$19,
    __vue_module_identifier__$19,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$1a = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    duration() {
      if (!this.data || !String(this.data).length) {
        return;
      }

      return this.$fluro.video.hhmmss(this.data);
    }

  }
};

/* script */
const __vue_script__$1a = script$1a;

/* template */
var __vue_render__$19 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v("\n    "+_vm._s(_vm.duration)+"\n    ")])};
var __vue_staticRenderFns__$19 = [];

  /* style */
  const __vue_inject_styles__$1a = function (inject) {
    if (!inject) return
    inject("data-v-3ee71d37_0", { source: ".border-top[data-v-3ee71d37]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-3ee71d37]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-3ee71d37]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-3ee71d37]{border-left:1px solid rgba(0,0,0,.05)}div[data-v-3ee71d37]{font-size:.9em;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1a = "data-v-3ee71d37";
  /* module identifier */
  const __vue_module_identifier__$1a = undefined;
  /* functional template */
  const __vue_is_functional_template__$1a = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$19 = normalizeComponent(
    { render: __vue_render__$19, staticRenderFns: __vue_staticRenderFns__$19 },
    __vue_inject_styles__$1a,
    __vue_script__$1a,
    __vue_scope_id__$1a,
    __vue_is_functional_template__$1a,
    __vue_module_identifier__$1a,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$1b = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    dimensions() {
      return `${this.row.width}x${this.row.height}`;
    }

  }
};

/* script */
const __vue_script__$1b = script$1b;

/* template */
var __vue_render__$1a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v("\n    "+_vm._s(_vm.dimensions)+"\n")])};
var __vue_staticRenderFns__$1a = [];

  /* style */
  const __vue_inject_styles__$1b = function (inject) {
    if (!inject) return
    inject("data-v-39182849_0", { source: ".border-top[data-v-39182849]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-39182849]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-39182849]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-39182849]{border-left:1px solid rgba(0,0,0,.05)}div[data-v-39182849]{font-size:.9em;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1b = "data-v-39182849";
  /* module identifier */
  const __vue_module_identifier__$1b = undefined;
  /* functional template */
  const __vue_is_functional_template__$1b = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1a = normalizeComponent(
    { render: __vue_render__$1a, staticRenderFns: __vue_staticRenderFns__$1a },
    __vue_inject_styles__$1b,
    __vue_script__$1b,
    __vue_scope_id__$1b,
    __vue_is_functional_template__$1b,
    __vue_module_identifier__$1b,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$1c = {
  props: {
    'context': {
      type: String
    },
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$1c = script$1c;

/* template */
var __vue_render__$1b = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.context != 'print')?_c('fluro-avatar',{attrs:{"md":"","id":_vm.data,"type":_vm.row._type}}):_vm._e()};
var __vue_staticRenderFns__$1b = [];

  /* style */
  const __vue_inject_styles__$1c = undefined;
  /* scoped */
  const __vue_scope_id__$1c = undefined;
  /* module identifier */
  const __vue_module_identifier__$1c = undefined;
  /* functional template */
  const __vue_is_functional_template__$1c = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1b = normalizeComponent(
    { render: __vue_render__$1b, staticRenderFns: __vue_staticRenderFns__$1b },
    __vue_inject_styles__$1c,
    __vue_script__$1c,
    __vue_scope_id__$1c,
    __vue_is_functional_template__$1c,
    __vue_module_identifier__$1c,
    false,
    undefined,
    undefined,
    undefined
  );

//
var script$1d = {
  props: {
    'context': {
      type: String
    },
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    multiple() {
      return lodash.isArray(this.data);
    }

  }
};

/* script */
const __vue_script__$1d = script$1d;

/* template */
var __vue_render__$1c = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.context != 'print')?_c('div',[(_vm.multiple)?[_vm._l((_vm.data),function(entry){return [_c('fluro-avatar',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":entry.firstName || entry.title,"md":"","id":entry,"type":"persona"}})]})]:[_c('fluro-avatar',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":_vm.entry.firstName || _vm.entry.title,"md":"","id":_vm.data,"type":"persona"}})]],2):_vm._e()};
var __vue_staticRenderFns__$1c = [];

  /* style */
  const __vue_inject_styles__$1d = undefined;
  /* scoped */
  const __vue_scope_id__$1d = undefined;
  /* module identifier */
  const __vue_module_identifier__$1d = undefined;
  /* functional template */
  const __vue_is_functional_template__$1d = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1c = normalizeComponent(
    { render: __vue_render__$1c, staticRenderFns: __vue_staticRenderFns__$1c },
    __vue_inject_styles__$1d,
    __vue_script__$1d,
    __vue_scope_id__$1d,
    __vue_is_functional_template__$1d,
    __vue_module_identifier__$1d,
    false,
    undefined,
    undefined,
    undefined
  );

//
var script$1e = {
  props: {
    'context': {
      type: String
    },
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    multiple() {
      return lodash.isArray(this.data);
    }

  }
};

/* script */
const __vue_script__$1e = script$1e;

/* template */
var __vue_render__$1d = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.context != 'print')?_c('div',[(_vm.multiple)?[_vm._l((_vm.data),function(entry){return [_c('fluro-avatar',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":entry.firstName || entry.title,"md":"","id":entry,"type":"contact"}})]})]:[(_vm.data)?_c('fluro-avatar',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"md":"","content":_vm.data.firstName || _vm.data.title,"id":_vm.data,"type":"contact"}}):_vm._e()]],2):_vm._e()};
var __vue_staticRenderFns__$1d = [];

  /* style */
  const __vue_inject_styles__$1e = undefined;
  /* scoped */
  const __vue_scope_id__$1e = undefined;
  /* module identifier */
  const __vue_module_identifier__$1e = undefined;
  /* functional template */
  const __vue_is_functional_template__$1e = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1d = normalizeComponent(
    { render: __vue_render__$1d, staticRenderFns: __vue_staticRenderFns__$1d },
    __vue_inject_styles__$1e,
    __vue_script__$1e,
    __vue_scope_id__$1e,
    __vue_is_functional_template__$1e,
    __vue_module_identifier__$1e,
    false,
    undefined,
    undefined,
    undefined
  );

//
var script$1f = {
  components: {
    FluroInfiniteScroll: __vue_component__$S
  },
  props: {
    value: {
      type: Array,
      required: true
    }
  },

  data() {
    return {
      array: this.value
    };
  },

  // mounted() {
  // console.log('THIS', this)
  // },
  computed: {
    massive() {
      return this.array.length > 400;
    },

    entries() {
      var self = this;

      var sorted = lodash.chain(this.array).map(function (entry) {
        entry.date = new Date(entry.date);
        return entry;
      }).orderBy(function (entry) {
        return entry.date * -1;
      }).value(); //////////////////////////////////    


      if (!self.massive) {
        return sorted;
      } //////////////////////////////////    


      return lodash.chain(sorted).reduce(function (set, entry) {
        var groupingKey = `${entry.type || entry._type}-${entry.date}`;
        var existing = set[groupingKey];

        if (!existing) {
          existing = set[groupingKey] = {
            type: entry._type,
            grouped: true,
            entries: [],
            date: entry.date
          };
        }

        existing.entries.push(entry);
        return set;
      }, {}).values().map(function (group) {
        if (group.entries.length < 3) {
          return group.entries;
        }

        return group;
      }).flatten().value();
    },

    months() {
      var self = this;
      return lodash.chain(this.entries).reduce(function (set, entry) {
        // if(entry.grouped && entry.entries.length == 1) {
        //     entry = entry.entries[0];
        // }
        var date = entry.date;
        var key = self.$fluro.date.formatDate(entry.date, 'D MMM YYYY');
        var title = self.$fluro.date.formatDate(entry.date, 'D MMM');
        var existing = set[key];

        if (!existing) {
          existing = set[key] = {
            title,
            key,
            date,
            entries: []
          };
        }

        existing.entries.push(entry);
        return set;
      }, {}).values().orderBy(function (entry) {
        return -entry.date;
      }).reduce(function (set, day) {
        var date = day.date;
        var key = self.$fluro.date.formatDate(day.date, 'MMM YYYY');
        var title = self.$fluro.date.formatDate(day.date, 'MMM');
        var year = self.$fluro.date.formatDate(day.date, 'YYYY');
        var existing = set[key];

        if (!existing) {
          existing = set[key] = {
            title,
            key,
            date,
            year,
            days: []
          };
        }

        existing.days.push(day);
        return set;
      }, {}).values().orderBy(function (entry) {
        return -entry.date;
      }).value();
    },

    years() {
      var self = this;
      return lodash.chain(self.months).reduce(function (set, month) {
        var date = month.date;
        var key = self.$fluro.date.formatDate(month.date, 'YYYY');
        var title = self.$fluro.date.formatDate(month.date, 'YYYY');
        var existing = set[key];

        if (!existing) {
          existing = set[key] = {
            title,
            key,
            date,
            months: []
          };
        }

        existing.months.push(month);
        return set;
      }, {}).values().orderBy(function (entry) {
        return -entry.date;
      }).value();
    }

  }
};

/* script */
const __vue_script__$1f = script$1f;

/* template */
var __vue_render__$1e = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column-body',{attrs:{"scroll-parent":""}},[_c('div',{staticClass:"timeline-wrapper"},[(_vm.massive)?[_c('fluro-infinite-scroll',{attrs:{"perPage":1,"startPage":1,"buffer":2,"items":_vm.months},scopedSlots:_vm._u([{key:"default",fn:function(props){return [_c('div',{staticClass:"year"},_vm._l((props.page),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(month.title)+" "+_vm._s(month.year))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(day.title))]),_vm._v(" "),_c('div',{staticClass:"entries"},[_vm._l((day.entries),function(entry){return _vm._t("card",null,{"entry":entry})})],2)])})],2)}),0)]}}],null,true)})]:[_c('fluro-infinite-scroll',{attrs:{"perPage":1,"startPage":1,"buffer":2,"items":_vm.years},scopedSlots:_vm._u([{key:"default",fn:function(props){return _vm._l((props.page),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(year.title))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(month.title))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(day.title))]),_vm._v(" "),_c('div',{staticClass:"entries"},[_vm._l((day.entries),function(entry){return _vm._t("card",null,{"entry":entry})})],2)])})],2)})],2)})}}],null,true)})]],2)])};
var __vue_staticRenderFns__$1e = [];

  /* style */
  const __vue_inject_styles__$1f = function (inject) {
    if (!inject) return
    inject("data-v-57f63156_0", { source: ".border-top[data-v-57f63156]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-57f63156]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-57f63156]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-57f63156]{border-left:1px solid rgba(0,0,0,.05)}.timeline-wrapper[data-v-57f63156]{padding:25px}.year[data-v-57f63156]{border-left:1px solid rgba(0,0,0,.1)}.year-label[data-v-57f63156]{font-weight:500;text-transform:uppercase;display:block;padding:5px 10px;font-size:1.4em;background:rgba(0,0,0,.1)}.month-label[data-v-57f63156]{font-weight:500;text-transform:uppercase;display:block;padding:5px 10px;font-size:1.2em;margin:10px 0;color:rgba(0,0,0,.8)}.day[data-v-57f63156]{display:flex;margin-top:10px}.day-label[data-v-57f63156]{font-weight:600;font-size:10px;text-transform:uppercase;padding:5px 10px;border-top:1px solid rgba(0,0,0,.1);width:80px;white-space:nowrap;color:rgba(0,0,0,.3)}.entries[data-v-57f63156]{position:relative;top:-10px;background:#fff;box-shadow:0 1px 1px rgba(0,0,0,.1);flex:1;margin-bottom:15px;overflow:hidden}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1f = "data-v-57f63156";
  /* module identifier */
  const __vue_module_identifier__$1f = undefined;
  /* functional template */
  const __vue_is_functional_template__$1f = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1e = normalizeComponent(
    { render: __vue_render__$1e, staticRenderFns: __vue_staticRenderFns__$1e },
    __vue_inject_styles__$1f,
    __vue_script__$1f,
    __vue_scope_id__$1f,
    __vue_is_functional_template__$1f,
    __vue_module_identifier__$1f,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$1g = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  computed: {
    summary() {
      switch (this.item.state) {
        case 'sent':
          return `Sent to ${this.item.email} - ${this.$filters.formatDate(this.item.date, 'h:mma')}`;

        case 'click':
          return `Clicked`;

        case 'open':
          return `Read / Opened`;

        case 'error':
          return `Error sending to ${this.item.email}`;
      }
    }

  }
};

/* script */
const __vue_script__$1g = script$1g;

/* template */
var __vue_render__$1f = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry",on:{"click":function($event){return _vm.$fluro.global.view(_vm.item.mailout, true)}}},[_c('v-layout',[_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-2":""}},[_c('div',{staticClass:"timeline-icon"},[_c('fluro-icon',{attrs:{"icon":"envelope"}})],1)])],1),_vm._v(" "),_c('v-flex',[_c('v-container',{attrs:{"pa-2":""}},[_c('strong',[_vm._v(_vm._s(_vm.item.mailout.subject || _vm.item.mailout.title))]),_vm._v(" "),_c('div',{staticClass:"summary"},[_vm._v(_vm._s(_vm.summary))])])],1)],1)],1)};
var __vue_staticRenderFns__$1f = [];

  /* style */
  const __vue_inject_styles__$1g = function (inject) {
    if (!inject) return
    inject("data-v-042d49c9_0", { source: ".timeline-entry[data-v-042d49c9]{cursor:pointer}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1g = "data-v-042d49c9";
  /* module identifier */
  const __vue_module_identifier__$1g = undefined;
  /* functional template */
  const __vue_is_functional_template__$1g = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1f = normalizeComponent(
    { render: __vue_render__$1f, staticRenderFns: __vue_staticRenderFns__$1f },
    __vue_inject_styles__$1g,
    __vue_script__$1g,
    __vue_scope_id__$1g,
    __vue_is_functional_template__$1g,
    __vue_module_identifier__$1g,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$1h = {
  props: {
    'autoformat': {
      type: Boolean,
      default: true
    },
    'value': {
      type: String,
      default: ''
    },
    'lang': {
      type: String,
      default: 'html'
    },
    'height': {
      default: 300,
      type: Number
    },
    'readonly': {
      type: Boolean
    }
  },

  data() {
    return {
      ready: false,
      editor: null,
      model: this.value,
      beautifier: null
    };
  },

  computed: {
    syntax() {
      switch (this.lang) {
        case 'css':
        case 'sass':
        case 'scss':
          return 'scss';

        case 'js':
          return 'javascript';

        case 'html':
          return 'html';

        default:
          return `${this.lang}`;
      }
    }

  },
  methods: {
    beautify() {
      var self = this;

      if (!self.autoformat) {
        return;
      }

      if (!self.editor) {
        return;
      }

      if (self.beautifier) {
        runBeautify();
      } else {
        return import('js-beautify').then(function (res) {
          self.beautifier = res;
          runBeautify();
        });
      }

      function runBeautify() {
        console.log('Beautify!!!'); //Get the current string

        var input = self.editor.session.getValue() || ''; //Remove leading spaces

        var array = input.split(/\n/);
        array[0] = array[0].trim();
        input = array.join("\n");

        switch (self.syntax) {
          case 'html':
            input = self.beautifier.html(input); //, {extra_liners:'p, br'})

            break;

          case 'json':
          case 'javascript':
            console.log('TESTING', self.beautifier); // input = self.beautifier.js(input);

            break;

          case 'scss':
            input = self.beautifier.css(input);
            break;
        } // console.log('BEAUTIFIED')
        // console.log('Set code editor with new input', input);
        //Change current text to formatted text


        self.editor.session.setValue(input);
      }
    },

    editorInit: function (editor) {
      var self = this;
      self.editor = editor; //             editor.setOptions({
      //     maxLines: Infinity
      // });

      var editorDiv = self.$refs.outer;
      var doc = editor.getSession().getDocument();
      editor.on("change", function () {
        var lineHeight = editor.renderer.lineHeight;
        editorDiv.style.height = lineHeight * doc.getLength() + "px";
        editor.resize();
      }); //     var editor = ace.edit("editor");                   // the editor object
      // var editorDiv = document.getElementById("editor");     // its container
      // var doc = editor.getSession().getDocument();  // a reference to the doc
      ////////////////////////////////////////

      if (self.readonly) {
        editor.setReadOnly(true);
        editor.renderer.setShowGutter(false);
      } else {
        editor.on('blur', self.beautify);
      }

      self.beautify(); ////////////////////////////////////////
      // editor.setOptions({
      //     // autoScrollEditorIntoView: true,
      //     // copyWithEmptySelection: true,
      // });
      // editor.setReadOnly(true);
      // editor.setMode(this.computedSyntax);
      // console.log('Initialize the editor', editor);
      // })
    }
  },

  beforeDestroy() {
    this.editor.off('blur', self.beautify);
  },

  mounted() {
    // import CodeEditor from 'vue2-ace-editor';
    var self = this;
    service.load('vue2-ace-editor', function () {
      return import('vue2-ace-editor');
    }).then(function (imported) {
      self.$options.components.CodeEditor = imported;
      console.log('Loaded code editor');
      Promise.all([import('brace/ext/searchbox'), import('brace/ext/language_tools'), import('brace/mode/html'), import('brace/mode/json'), import('brace/mode/javascript'), import('brace/mode/ejs'), import('brace/mode/scss'), import('brace/theme/tomorrow_night_eighties'), import('brace/snippets/javascript')]).then(function (results) {
        console.log('Loaded code editor extras');
        self.ready = true;
        self.beautify();
      }, function (err) {
        self.ready = true;
        self.beautify();
      });
    });
  },

  components: {// CodeEditor,
  },
  watch: {
    value(value) {

      if (value !== this.model) {
        this.editor.session.setValue(value);
      }
    },

    model(value) {
      // so cursor doesn't jump to start on typing
      if (value != this.model) {
        this.editor.setContent(this.model);
      } // console.log('NEw Code', value)


      this.$emit('input', this.model);
    }

  }
};

/* script */
const __vue_script__$1h = script$1h;

/* template */
var __vue_render__$1g = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('div',{ref:"outer",staticClass:"fluro-code-editor"},[_c('code-editor',{attrs:{"lang":_vm.syntax,"theme":"tomorrow_night_eighties","height":100},on:{"init":_vm.editorInit},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1):_vm._e()};
var __vue_staticRenderFns__$1g = [];

  /* style */
  const __vue_inject_styles__$1h = function (inject) {
    if (!inject) return
    inject("data-v-6fe491f1_0", { source: ".border-top[data-v-6fe491f1]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-6fe491f1]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-6fe491f1]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-6fe491f1]{border-left:1px solid rgba(0,0,0,.05)}.fluro-code-editor[data-v-6fe491f1]{min-height:200px;display:flex;flex-direction:column}.fluro-code-editor>div[data-v-6fe491f1]{flex:1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1h = "data-v-6fe491f1";
  /* module identifier */
  const __vue_module_identifier__$1h = undefined;
  /* functional template */
  const __vue_is_functional_template__$1h = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1g = normalizeComponent(
    { render: __vue_render__$1g, staticRenderFns: __vue_staticRenderFns__$1g },
    __vue_inject_styles__$1h,
    __vue_script__$1h,
    __vue_scope_id__$1h,
    __vue_is_functional_template__$1h,
    __vue_module_identifier__$1h,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroCodeEditor = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$1g
});

//
//
//
//
//
var script$1i = {};

/* script */
const __vue_script__$1i = script$1i;

/* template */
var __vue_render__$1h = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"list-group"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$1h = [];

  /* style */
  const __vue_inject_styles__$1i = function (inject) {
    if (!inject) return
    inject("data-v-295a5874_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.list-group{border:1px solid rgba(0,0,0,.1);border-radius:3px;margin-bottom:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1i = undefined;
  /* module identifier */
  const __vue_module_identifier__$1i = undefined;
  /* functional template */
  const __vue_is_functional_template__$1i = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1h = normalizeComponent(
    { render: __vue_render__$1h, staticRenderFns: __vue_staticRenderFns__$1h },
    __vue_inject_styles__$1i,
    __vue_script__$1i,
    __vue_scope_id__$1i,
    __vue_is_functional_template__$1i,
    __vue_module_identifier__$1i,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$1j = {
  props: {
    'item': {
      type: Object,

      default() {
        return {};
      }

    }
  }
};

/* script */
const __vue_script__$1j = script$1j;

/* template */
var __vue_render__$1i = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-item-image"},[(_vm.item._type == 'image')?[_c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.imageUrl(_vm.item._id, 50)) + ")")})})]:(_vm.item._type == 'event')?[_c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.coverUrl(_vm.item._id, "event", {w:50})) + ")")})})]:(_vm.item._type == 'contact')?[_c('fluro-avatar',{attrs:{"md":"","id":_vm.item._id,"type":_vm.item._type}})]:[_c('div',{staticClass:"icon-avatar"},[_c('fluro-icon',{attrs:{"type":_vm.item._type}})],1)]],2)};
var __vue_staticRenderFns__$1i = [];

  /* style */
  const __vue_inject_styles__$1j = function (inject) {
    if (!inject) return
    inject("data-v-7227534a_0", { source: ".border-top[data-v-7227534a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-7227534a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-7227534a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-7227534a]{border-left:1px solid rgba(0,0,0,.05)}.fluro-item-image[data-v-7227534a]{text-align:center;width:50px;margin:auto}.fluro-item-image .thumbnail[data-v-7227534a]{width:50px;height:50px;display:block;background-color:rgba(0,0,0,.1);background-repeat:no-repeat;background-size:contain;background-position:center center;border-radius:5px}.fluro-item-image .icon-avatar[data-v-7227534a]{width:30px;height:30px;background-color:rgba(0,0,0,.1);text-align:center;line-height:30px;display:inline-block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1j = "data-v-7227534a";
  /* module identifier */
  const __vue_module_identifier__$1j = undefined;
  /* functional template */
  const __vue_is_functional_template__$1j = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1i = normalizeComponent(
    { render: __vue_render__$1i, staticRenderFns: __vue_staticRenderFns__$1i },
    __vue_inject_styles__$1j,
    __vue_script__$1j,
    __vue_scope_id__$1j,
    __vue_is_functional_template__$1j,
    __vue_module_identifier__$1j,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1k = {
  components: {
    FluroItemImage: __vue_component__$1i
  },
  props: {
    to: {
      type: [String, Object]
    },
    item: {
      type: Object
    },
    firstLine: {
      type: String
    },
    selectable: {
      type: Boolean,
      required: false,
      default: false
    },
    isSelected: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    clicked() {
      this.$emit('click', this.item);
    }

  },

  created() {
    if (this.to) {
      this.componentType = 'router-link';
    } else {
      this.componentType = 'div';
    }
  },

  computed: {
    title() {
      var self = this;

      if (!self.item) {
        return;
      }

      return self.item.title;
    },

    renderFirstLine() {
      var self = this;

      if (self.firstLine && self.firstLine.length) {
        return self.firstLine;
      }

      if (!self.item) {
        return;
      } ////////////////////////


      switch (self.item._type) {
        case 'event':
          if (self.item.firstLine && self.item.firstLine.length) {
            return `${self.$fluro.date.readableEventDate(self.item)} - ${self.item.firstLine}`;
          } else {
            return self.$fluro.date.readableEventDate(self.item);
          }

        default:
          if (self.item.firstLine && self.item.firstLine.length) {
            return self.item.firstLine;
          }

          break;
      }
    }

  }
};

/* script */
const __vue_script__$1k = script$1k;

/* template */
var __vue_render__$1j = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.componentType,{tag:"component",staticClass:"list-group-item",class:_vm.isSelected ? 'active selected' : '',attrs:{"tag":"a","to":_vm.to},on:{"click":_vm.clicked}},[_c('div',[(_vm.item)?_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}):_vm._e(),_vm._v(" "),_vm._t("left",[(_vm.item)?_c('fluro-item-image',{attrs:{"item":_vm.item}}):_vm._e()])],2),_vm._v(" "),_c('div',{staticClass:"list-group-item-content"},[_vm._t("default",[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),(_vm.renderFirstLine)?_c('div',{staticClass:"muted sm"},[_vm._v(_vm._s(_vm.renderFirstLine))]):_vm._e()])],2),_vm._v(" "),_c('div',[_vm._t("right")],2),_vm._v(" "),(_vm.selectable)?_c('div',[_c('fluro-icon',{staticClass:"tick-icon",attrs:{"icon":"check"}})],1):_vm._e()])};
var __vue_staticRenderFns__$1j = [];

  /* style */
  const __vue_inject_styles__$1k = function (inject) {
    if (!inject) return
    inject("data-v-63d8a8c0_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.list-group-item{color:inherit;position:relative;padding:7px 10px;background:#fff;border-bottom:1px solid rgba(0,0,0,.1);display:flex;align-items:center;transition:background .3s;transition:color .3s;text-decoration:none}.list-group-item .tick-icon{opacity:0;transition:opacity .3s}.list-group-item:hover{background:#fafafa}.list-group-item:hover .tick-icon{opacity:1}.list-group-item .fluro-item-image{margin-right:10px!important}.list-group-item .list-group-item-content{flex:1}.list-group-item:last-child{border-bottom:none;border-radius-bottom-left:3px;border-radius-bottom-right:3px}.list-group-item:first-child{border-radius-top-left:3px;border-radius-top-right:3px}.list-group-item.inactive{background:#eee;color:rgba(0,0,0,.5)}.list-group-item.selected{background:#2ad4b9;color:#fff}.list-group-item.selected .tick-icon{opacity:1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1k = undefined;
  /* module identifier */
  const __vue_module_identifier__$1k = undefined;
  /* functional template */
  const __vue_is_functional_template__$1k = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1j = normalizeComponent(
    { render: __vue_render__$1j, staticRenderFns: __vue_staticRenderFns__$1j },
    __vue_inject_styles__$1k,
    __vue_script__$1k,
    __vue_scope_id__$1k,
    __vue_is_functional_template__$1k,
    __vue_module_identifier__$1k,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$1l = {
  name: 'fluro-content-render-field',
  components: {
    FluroCodeEditor: __vue_component__$1g,
    ListGroup: __vue_component__$1h,
    ListGroupItem: __vue_component__$1j // FluroContentRender,
    // FluroContentRenderField,

  },

  beforeCreate() {
    var self = this;
    Promise.all([service.load('src/components/FluroContentRender.vue', function () {
      return Promise.resolve().then(function () { return FluroContentRender; });
    }), service.load('src/components/FluroContentRenderField.vue', function () {
      return Promise.resolve().then(function () { return FluroContentRenderField; });
    })]).then(function (results) {
      self.$options.components.FluroContentRender = results[0];
      self.$options.components.FluroContentRenderField = results[1];
      self.ready = true;
    });
  },

  data() {
    return {
      ready: false,
      model: this.value
    };
  },

  watch: {
    value(v) {
      this.model = v;
    }

  },
  computed: {
    className() {
      function replaceAll(target, search, replacement) {
        return target.split(search).join(replacement);
      } // if (this.compact) {
      // if (!this.field.className || !this.field.className.length) {
      // return 'xs6';
      // }
      // } else {


      if (!this.field.className || !this.field.className.length) {
        return 'xs12';
      } // }
      ////////////////////////////////


      var classes = lodash.chain(this.field.className).split(' ').compact().map(function (className) {
        return replaceAll(replaceAll(className, 'col', ''), '-', '').toLowerCase();
      }).value();

      return classes;
    },

    sameLine() {
      return this.field.sameLine || this.field.className == 'row';
    },

    isEmpty() {
      var self = this;

      if (self.multiple) {
        return !self.fieldModel || !self.fieldModel.length;
      } else {
        return !self.fieldModel;
      }
    },

    fieldModel: {
      get() {
        var self = this;
        var value = self.model[self.key];
        var stringValue = String(value).toLowerCase().trim();
        var isTotallyEmpty = value === undefined || value === null || value == [] || stringValue == '';

        if (isTotallyEmpty) {
          return;
        } /////////////////////////////////////////////////////
        //Here is where we clean up in case the data isn't correct


        if (self.maximum == 1) {
          if (lodash.isArray(value) && value.length == 1) {
            value = value[0];
          }
        } //If it's a multiple value field


        if (self.maximum == 0) {
          //but the saved value is just a string
          if (lodash.isString(value)) {
            //Return the string as an array with one value
            value = [value];
          }
        } /////////////////////////////////////////////////////


        switch (self.type) {
          case 'number':
            return Number(value);

          case 'integer':
            return parseInt(value);

          case 'decimal':
            return Number(parseFloat(value).toFixed(2));

          case 'float':
            return parseFloat(value);

          case 'boolean':
            switch (stringValue) {
              case 'true':
              case 'y':
              case 'yes':
              case '1':
                return true;

              case 'false':
              case 'n':
              case 'no':
              case '0':
                return false;

              default:
                return true;
            }

            break;
        }

        return value;
      },

      set() {}

    },

    key() {
      return this.field.key;
    },

    label() {
      return this.field.title;
    },

    asObject() {
      return this.field.asObject;
    },

    fields() {
      return this.field.fields;
    },

    type() {
      return this.field.type;
    },

    multiple() {
      return this.maximum === 0 || this.maximum > 1;
    },

    minimum() {
      return Math.max(parseInt(this.field.minimum), 0);
    },

    maximum() {
      return parseInt(this.field.maximum);
    },

    total() {
      return lodash.get(this.fieldModel, 'length');
    },

    renderer() {
      //Get the widget defined on the data object
      var dataType = this.type;
      var directive = this.field.directive;

      switch (directive) {
        case 'date-select':
          directive = 'datepicker';
          break;

        case 'time-select':
          directive = 'timepicker';
          break;

        case 'datetime-select':
          directive = 'datetimepicker';
          break;

        case 'textarea':
          directive = 'textarea';
          break;

        default:
          switch (dataType) {
            case 'group':
              directive = 'group';
              break;

            case 'email':
              directive = 'email';
              break;

            case 'url':
              directive = 'url';
              break;

            case 'boolean':
              directive = 'checkbox';
              break;

            case 'number':
            case 'integer':
            case 'decimal':
              directive = 'number';
              break;
          }

          break;
      } //Return the basic data type by default


      return directive;
    },

    syntax() {
      return lodash.get(this, 'field.params.syntax');
    }

  },
  methods: {
    defaultActions(object) {
      if (!object) {
        return;
      }

      return true;
    },

    groupTitle(object, index) {
      if (object) {
        if (object.title && object.title.length) {
          return object.title;
        }

        if (object.name && object.name.length) {
          return object.name;
        }
      }

      return `${this.label} ${index + 1}`;
    }

  },

  created() {// if (this.multipleInput) {
    //     switch (this.type) {
    //         case 'reference':
    //             this.results = (this.defaultReferences || []).slice();
    //             break;
    //         default:
    //             this.results = (this.defaultValues || []).slice();
    //             break;
    //     }
    // }
  },

  props: {
    // 'compact': {
    //     type: Boolean,
    // },
    'raw': {
      type: Boolean
    },
    'field': {
      type: Object
    },
    'value': {
      required: true
    }
  }
};

/* script */
const __vue_script__$1l = script$1l;

/* template */
var __vue_render__$1k = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.ready)?_c('div',{staticClass:"fluro-content-render-field"},[(_vm.renderer == 'embedded' && _vm.raw)?[(!_vm.multiple)?[_c('fluro-panel',[_c('fluro-panel-title',{staticClass:"border-bottom"},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.field.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('fluro-panel-body',[_c('fluro-content-render',{attrs:{"raw":_vm.raw,"fields":_vm.fields},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)],1)]:_vm._e(),_vm._v(" "),(_vm.multiple)?[_vm._l((_vm.fieldModel),function(object,index){return [_c('fluro-panel',[_c('fluro-panel-title',{staticClass:"border-bottom"},[_c('h5',{attrs:{"title":""}},[_vm._v(_vm._s(_vm.groupTitle(object, index)))])]),_vm._v(" "),_c('fluro-panel-body',[_c('fluro-content-render',{attrs:{"raw":_vm.raw,"fields":_vm.fields},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})],1)],1)]})]:_vm._e()]:(_vm.renderer == 'group')?[(_vm.asObject)?[(!_vm.multiple)?[_c('fluro-content-render',{attrs:{"raw":_vm.raw,"fields":_vm.fields},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})]:_vm._e(),_vm._v(" "),(_vm.multiple)?[_vm._l((_vm.fieldModel),function(object,index){return [_c('v-card',{staticClass:"panel"},[_c('div',{staticClass:"panel-title"},[_c('h5',{attrs:{"title":""}},[_vm._v(_vm._s(_vm.groupTitle(object, index)))])]),_vm._v(" "),_c('v-card-text',{staticClass:"panel-body"},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('fluro-content-render',{attrs:{"raw":_vm.raw,"fields":_vm.fields},model:{value:(_vm.fieldModel[index]),callback:function ($$v) {_vm.$set(_vm.fieldModel, index, $$v);},expression:"fieldModel[index]"}})],1)],1)],1)]})]:_vm._e()]:[(_vm.sameLine)?[_c('v-layout',{attrs:{"row":"","wrap":""}},[_vm._l((_vm.fields),function(subField){return [_c('fluro-content-render-field',{staticClass:"flex",attrs:{"raw":_vm.raw,"field":subField},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]})],2)]:[_c('v-layout',{attrs:{"row":"","wrap":""}},[_vm._l((_vm.fields),function(subField){return [_c('fluro-content-render-field',{attrs:{"raw":_vm.raw,"field":subField},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]})],2)]]]:[(_vm.isEmpty)?void 0:(_vm.type == 'reference')?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),(!_vm.multiple)?[_c('list-group',[_c('list-group-item',{attrs:{"item":_vm.fieldModel},on:{"click":function($event){return _vm.$fluro.global.view(_vm.fieldModel, true)}},scopedSlots:_vm._u([{key:"right",fn:function(){return [_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([_vm.fieldModel])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]},proxy:true}],null,false,100277901)})],1)]:_vm._e(),_vm._v(" "),(_vm.multiple)?[_c('list-group',_vm._l((_vm.fieldModel),function(object,index){return _c('list-group-item',{attrs:{"item":object},on:{"click":function($event){return _vm.$fluro.global.view(object, true)}},scopedSlots:_vm._u([{key:"right",fn:function(){return [_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([object])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]},proxy:true}],null,true)})}),1)]:_vm._e()],2)]:(_vm.renderer == 'wysiwyg')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return _c('div',{domProps:{"innerHTML":_vm._s(_vm.fieldModel[key])}})})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('div',{domProps:{"innerHTML":_vm._s(_vm.fieldModel)}})])]:_vm._e()]:(_vm.renderer == 'custom')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return [_c('div',{domProps:{"innerHTML":_vm._s(entry)}})]})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('div',{domProps:{"innerHTML":_vm._s(_vm.fieldModel)}})])]:_vm._e()]:(_vm.renderer == 'signature')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return [_c('img',{staticClass:"signature-image",attrs:{"src":_vm.fieldModel}})]})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('img',{staticClass:"signature-image",attrs:{"src":_vm.fieldModel}})])]:_vm._e()]:(_vm.renderer == 'code')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return [_c('fluro-code-editor',{attrs:{"lang":_vm.syntax,"readonly":true,"height":200},model:{value:(_vm.fieldModel[key]),callback:function ($$v) {_vm.$set(_vm.fieldModel, key, $$v);},expression:"fieldModel[key]"}})]})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('fluro-code-editor',{attrs:{"lang":_vm.syntax,"readonly":true,"height":200},model:{value:(_vm.fieldModel),callback:function ($$v) {_vm.fieldModel=$$v;},expression:"fieldModel"}})],1)]:_vm._e()]:(_vm.renderer == 'url')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return [_c('a',{attrs:{"target":"_blank","href":entry}},[_vm._v(_vm._s(entry))])]})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('a',{attrs:{"target":"_blank","href":_vm.fieldModel}},[_vm._v(_vm._s(_vm.fieldModel))])])]:_vm._e()]:(_vm.renderer == 'email')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return [_c('a',{attrs:{"target":"_blank","href":"mailto:" + entry}},[_vm._v(_vm._s(entry))])]})],2)]:_vm._e(),_vm._v(" "),(!_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('a',{attrs:{"target":"_blank","href":"mailto:" + _vm.fieldModel}},[_vm._v(_vm._s(_vm.fieldModel))])])]:_vm._e()]:[(_vm.type == 'date')?[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return _c('div',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm._f("formatDate")(entry,'h:mma dddd D MMM YYYY'))+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])})],2)]:[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('div',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm._f("formatDate")(_vm.fieldModel,'h:mma dddd D MMM YYYY'))+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])])]]:[(_vm.multiple)?[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_vm._l((_vm.fieldModel),function(entry,key){return _c('div',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(entry)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])})],2)]:[_c('div',{staticClass:"field-group"},[_c('label',[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),_c('div',[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.fieldModel)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])])]]]]],2):_vm._e()};
var __vue_staticRenderFns__$1k = [];

  /* style */
  const __vue_inject_styles__$1l = function (inject) {
    if (!inject) return
    inject("data-v-73ece914_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-content-render-field .signature-image{width:100%;height:auto;border:5px solid #eee}.fluro-content-render-field .field-group{display:block;margin-bottom:1.5em}.fluro-content-render-field .field-group label{display:block;font-weight:700;margin-bottom:.3em;text-transform:uppercase;letter-spacing:.05em;font-size:.8em}.fluro-content-render-field .panel{margin-bottom:1em;border:1px solid rgba(0,0,0,.15)!important;border-radius:4px;box-shadow:none!important}.fluro-content-render-field .panel .panel-title{padding:1em;background:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1l = undefined;
  /* module identifier */
  const __vue_module_identifier__$1l = undefined;
  /* functional template */
  const __vue_is_functional_template__$1l = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1k = normalizeComponent(
    { render: __vue_render__$1k, staticRenderFns: __vue_staticRenderFns__$1k },
    __vue_inject_styles__$1l,
    __vue_script__$1l,
    __vue_scope_id__$1l,
    __vue_is_functional_template__$1l,
    __vue_module_identifier__$1l,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroContentRenderField = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$1k
});

//

var script$1m = {
  name: 'fluro-content-render',
  props: {
    'fields': {
      type: Array
    },
    'value': {
      type: Object
    },
    'raw': {
      type: Boolean
    }
  },
  watch: {
    value(v) {
      this.model = v;
    }

  },

  data() {
    return {
      model: this.value
    };
  },

  components: {
    FluroContentRenderField: __vue_component__$1k
  }
};

/* script */
const __vue_script__$1m = script$1m;

/* template */
var __vue_render__$1l = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-content-render"},[_vm._l((_vm.fields),function(field){return [_c('fluro-content-render-field',{attrs:{"raw":_vm.raw,"field":field},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]})],2)};
var __vue_staticRenderFns__$1l = [];

  /* style */
  const __vue_inject_styles__$1m = function (inject) {
    if (!inject) return
    inject("data-v-7537235a_0", { source: ".border-top[data-v-7537235a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-7537235a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-7537235a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-7537235a]{border-left:1px solid rgba(0,0,0,.05)}.fluro-content-render[data-v-7537235a]{flex:1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1m = "data-v-7537235a";
  /* module identifier */
  const __vue_module_identifier__$1m = undefined;
  /* functional template */
  const __vue_is_functional_template__$1m = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1l = normalizeComponent(
    { render: __vue_render__$1l, staticRenderFns: __vue_staticRenderFns__$1l },
    __vue_inject_styles__$1m,
    __vue_script__$1m,
    __vue_scope_id__$1m,
    __vue_is_functional_template__$1m,
    __vue_module_identifier__$1m,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroContentRender = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$1l
});

//
var script$1n = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroContentRender: __vue_component__$1l,
    FluroAvatar: __vue_component__$4,
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    definedFields() {
      return this.item.fullDefinition.fields;
    },

    author() {
      if (this.item.author && this.item.author.name) {
        return this.item.author.name;
      }

      if (this.item.managedAuthor && this.item.managedAuthor.title) {
        return this.item.managedAuthor.title;
      }

      return 'Someone';
    },

    definitionTitle() {
      return this.$fluro.types.readable(this.item.definition, false, 'post');
    },

    title() {
      if (!this.item.author && !this.managedAuthor && this.item.title) {
        return this.item.title;
      }

      return `${this.author} posted a ${this.definitionTitle}`;
    },

    datestring() {
      return `${this.$filters.formatDate(this.item.created, 'h:mma')} - ${this.$filters.formatDate(this.item.created, 'dddd D MMM YYYY')} - ${this.$filters.timeago(this.item.created)} `;
    } //     summary() {
    //         switch (this.item.state) {
    //             case 'sent':
    //                 return `Sent to ${this.item.email} - ${this.$filters.formatDate(this.item.date, 'hh:mma')}`;
    //                 break;
    //             case 'click':
    //                 return `Clicked`;
    //                 break;
    //             case 'open':
    //                 return `Read / Opened`;
    //                 break;
    //             case 'error':
    //                 return `Error sending to ${this.item.email}`;
    //                 break;
    //             default:
    //                 break;
    //         }
    //     }


  }
};

/* script */
const __vue_script__$1n = script$1n;

/* template */
var __vue_render__$1m = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry timeline-post"},[_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-2":""}},[(_vm.item.author)?_c('fluro-avatar',{attrs:{"md":"","id":_vm.item.author,"type":"user"}}):(_vm.item.managedAuthor)?_c('fluro-avatar',{attrs:{"md":"","id":_vm.item.managedAuthor,"type":"persona"}}):_c('div',{staticClass:"timeline-icon"},[_c('fluro-icon',{attrs:{"type":"post"}})],1)],1)],1),_vm._v(" "),_c('v-flex',[_c('v-container',{staticClass:"border-bottom",attrs:{"pa-2":""}},[_c('v-layout',[_c('v-flex',[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"datestring"},[_vm._v(_vm._s(_vm.datestring))])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"icon":"","small":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([_vm.item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"icon":"","small":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$fluro.global.edit(_vm.item, true)}}},[_c('fluro-icon',{attrs:{"icon":"pencil"}})],1)],1)],1)],1),_vm._v(" "),_c('v-container',{attrs:{"pa-2":""}},[_c('fluro-content-render',{attrs:{"fields":_vm.definedFields},model:{value:(_vm.item.data),callback:function ($$v) {_vm.$set(_vm.item, "data", $$v);},expression:"item.data"}})],1)],1)],1)],1)};
var __vue_staticRenderFns__$1m = [];

  /* style */
  const __vue_inject_styles__$1n = function (inject) {
    if (!inject) return
    inject("data-v-e2fedcce_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.datestring{font-size:.8em;opacity:.5}.timeline-post .fluro-content-render-field{font-size:.9em;width:50%;float:left}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1n = undefined;
  /* module identifier */
  const __vue_module_identifier__$1n = undefined;
  /* functional template */
  const __vue_is_functional_template__$1n = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1m = normalizeComponent(
    { render: __vue_render__$1m, staticRenderFns: __vue_staticRenderFns__$1m },
    __vue_inject_styles__$1n,
    __vue_script__$1n,
    __vue_scope_id__$1n,
    __vue_is_functional_template__$1n,
    __vue_module_identifier__$1n,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1o = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroContentRender: __vue_component__$1l,
    FluroAvatar: __vue_component__$4,
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    definedFields() {
      return this.item.fullDefinition.fields;
    },

    author() {
      if (this.item.author && this.item.author.name) {
        return this.item.author.name;
      }

      if (this.item.managedAuthor && this.item.managedAuthor.title) {
        return this.item.managedAuthor.title;
      }

      return 'Someone';
    },

    definitionTitle() {
      return this.$fluro.types.readable(this.item.definition, false, 'post');
    },

    title() {
      return `Submitted a ${this.definitionTitle} form`;
    },

    datestring() {
      return `${this.$filters.formatDate(this.item.created, 'h:mma')} - ${this.$filters.formatDate(this.item.created, 'dddd D MMM YYYY')} - ${this.$filters.timeago(this.item.created)} `;
    } //     summary() {
    //         switch (this.item.state) {
    //             case 'sent':
    //                 return `Sent to ${this.item.email} - ${this.$filters.formatDate(this.item.date, 'hh:mma')}`;
    //                 break;
    //             case 'click':
    //                 return `Clicked`;
    //                 break;
    //             case 'open':
    //                 return `Read / Opened`;
    //                 break;
    //             case 'error':
    //                 return `Error sending to ${this.item.email}`;
    //                 break;
    //             default:
    //                 break;
    //         }
    //     }


  }
};

/* script */
const __vue_script__$1o = script$1o;

/* template */
var __vue_render__$1n = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry",on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$fluro.global.view(_vm.item, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-2":""}},[_c('div',{staticClass:"timeline-icon"},[_c('fluro-icon',{attrs:{"type":"interaction"}})],1)])],1),_vm._v(" "),_c('v-flex',[_c('v-container',{attrs:{"pa-2":""}},[_c('v-layout',[_c('v-flex',[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"datestring"},[_vm._v(_vm._s(_vm.datestring))])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"icon":"","small":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$actions.open([_vm.item])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1),_vm._v(" "),_c('v-btn',{staticClass:"ma-0",attrs:{"icon":"","small":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.$fluro.global.edit(_vm.item, true)}}},[_c('fluro-icon',{attrs:{"icon":"pencil"}})],1)],1)],1)],1)],1)],1)],1)};
var __vue_staticRenderFns__$1n = [];

  /* style */
  const __vue_inject_styles__$1o = function (inject) {
    if (!inject) return
    inject("data-v-00b07618_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.datestring{font-size:.8em;opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1o = undefined;
  /* module identifier */
  const __vue_module_identifier__$1o = undefined;
  /* functional template */
  const __vue_is_functional_template__$1o = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1n = normalizeComponent(
    { render: __vue_render__$1n, staticRenderFns: __vue_staticRenderFns__$1n },
    __vue_inject_styles__$1o,
    __vue_script__$1o,
    __vue_scope_id__$1o,
    __vue_is_functional_template__$1o,
    __vue_module_identifier__$1o,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1p = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    checkinTime() {
      return this.$filters.formatDate(this.item.event.startDate, 'h:mma');
    },

    eventTitle() {
      return this.item.event.title;
    },

    title() {
      return `Checked in to ${this.eventTitle}`;
    }

  }
};

/* script */
const __vue_script__$1p = script$1p;

/* template */
var __vue_render__$1o = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"checkin-timeline-entry border-top",on:{"click":function($event){return _vm.$fluro.global.edit(_vm.item.event, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}),_vm._v(" "),_c('span',{staticClass:"muted"},[_vm._v(" Checked in to "),_c('strong',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$fluro.global.view(_vm.item.event, true)}}},[_vm._v(_vm._s(_vm.eventTitle))]),_vm._v(" - "+_vm._s(_vm.checkinTime)+" ")])],1)};
var __vue_staticRenderFns__$1o = [];

  /* style */
  const __vue_inject_styles__$1p = function (inject) {
    if (!inject) return
    inject("data-v-8eca9854_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.checkin-timeline-entry{padding:10px;font-style:italic;font-size:.8em}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1p = undefined;
  /* module identifier */
  const __vue_module_identifier__$1p = undefined;
  /* functional template */
  const __vue_is_functional_template__$1p = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1o = normalizeComponent(
    { render: __vue_render__$1o, staticRenderFns: __vue_staticRenderFns__$1o },
    __vue_inject_styles__$1p,
    __vue_script__$1p,
    __vue_scope_id__$1p,
    __vue_is_functional_template__$1p,
    __vue_module_identifier__$1p,
    false,
    createInjector,
    undefined,
    undefined
  );

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var script$1q = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    author() {
      var item = this.item;

      if (item.user && item.user._id) {
        return _objectSpread2$1({
          title: item.user.name,
          type: 'user'
        }, item.user);
      }

      if (item.managedUser && item.managedUser._id) {
        return _objectSpread2$1({
          type: 'persona'
        }, item.managedUser);
      }
    }

  }
};

/* script */
const __vue_script__$1q = script$1q;

/* template */
var __vue_render__$1p = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"log-timeline-entry border-top"},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[(_vm.author)?[_vm._v(_vm._s(_vm.author.title)+" -")]:_vm._e(),_vm._v(" "+_vm._s(_vm.item.message)+" "),_c('em',{staticClass:"muted"},[_vm._v("- "+_vm._s(_vm._f("formatDate")(_vm.item.date,'h:mma'))+" ("+_vm._s(_vm._f("timeago")(_vm.item.date))+")")])],2),_vm._v(" "),(_vm.author)?_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-0":"","pl-2":""}},[_c('fluro-avatar',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":_vm.author.title,"id":_vm.author._id,"type":_vm.author.type}})],1)],1):_vm._e()],1)],1)};
var __vue_staticRenderFns__$1p = [];

  /* style */
  const __vue_inject_styles__$1q = function (inject) {
    if (!inject) return
    inject("data-v-588c5aac_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.log-timeline-entry{padding:10px;font-style:italic;font-size:.8em;color:rgba(0,0,0,.5)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1q = undefined;
  /* module identifier */
  const __vue_module_identifier__$1q = undefined;
  /* functional template */
  const __vue_is_functional_template__$1q = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1p = normalizeComponent(
    { render: __vue_render__$1p, staticRenderFns: __vue_staticRenderFns__$1p },
    __vue_inject_styles__$1q,
    __vue_script__$1q,
    __vue_scope_id__$1q,
    __vue_is_functional_template__$1q,
    __vue_module_identifier__$1q,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1r = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    rosterIcon() {
      switch (this.item.confirmationStatus) {
        case 'unknown':
          return 'question';

        case 'confirmed':
          return 'check';

        case 'declined':
          return 'times';
      }
    },

    summary() {
      return `${this.event.title} - ${this.datestring}`;
    },

    datestring() {
      return this.$fluro.date.readableEventDate(this.event);
    },

    roster() {
      return this.item.roster;
    },

    event() {
      return this.roster.event;
    },

    position() {
      return this.item.title;
    },

    title() {
      switch (this.item.confirmationStatus) {
        case 'unknown':
          return `Rostered as ${this.position}`;

        case 'declined':
          return `Marked unavailable for ${this.position}`;

        case 'confirmed':
          return `Confirmed as ${this.position}`;
      }
    } // time() {
    //     return this.$filters.formatDate(this.event.startDate, 'h:mma');
    // },


  }
};

/* script */
const __vue_script__$1r = script$1r;

/* template */
var __vue_render__$1q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry border-top",on:{"click":function($event){return _vm.$fluro.global.edit(_vm.item, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-2":""}},[_c('div',{staticClass:"timeline-icon"},[_c('fluro-icon',{attrs:{"library":"fas","icon":_vm.rosterIcon}})],1)])],1),_vm._v(" "),_c('v-flex',[_c('v-container',{attrs:{"pa-2":""}},[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"summary",on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$fluro.global.edit(_vm.event, true)}}},[_c('strong',[_vm._v(_vm._s(_vm.event.title))]),_vm._v(" - "+_vm._s(_vm.datestring))])])],1)],1)],1)};
var __vue_staticRenderFns__$1q = [];

  /* style */
  const __vue_inject_styles__$1r = function (inject) {
    if (!inject) return
    inject("data-v-eacb3fe2_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.checkin-timeline-entry{padding:10px;font-style:italic;font-size:.8em}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1r = undefined;
  /* module identifier */
  const __vue_module_identifier__$1r = undefined;
  /* functional template */
  const __vue_is_functional_template__$1r = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1q = normalizeComponent(
    { render: __vue_render__$1q, staticRenderFns: __vue_staticRenderFns__$1q },
    __vue_inject_styles__$1r,
    __vue_script__$1r,
    __vue_scope_id__$1r,
    __vue_is_functional_template__$1r,
    __vue_module_identifier__$1r,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1s = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroRealmBar: __vue_component__$g
  },
  computed: {}
};

/* script */
const __vue_script__$1s = script$1s;

/* template */
var __vue_render__$1r = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry border-top",on:{"click":function($event){return _vm.$fluro.global.json(_vm.item)}}},[_c('v-layout',[_c('v-flex',{attrs:{"shrink":""}},[_c('v-container',{attrs:{"pa-2":""}},[_c('div',{staticClass:"timeline-icon"},[_c('fluro-icon',{attrs:{"library":"far","icon":"mobile-alt"}})],1)])],1),_vm._v(" "),_c('v-flex',[_c('v-container',{attrs:{"pa-2":""}},[_c('strong',[_vm._v("SMS Message")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.message))]),_vm._v(" "),_c('div',{staticClass:"summary"},[_vm._v("To: "),_c('strong',[_vm._v(_vm._s(_vm.item.number))]),_vm._v(" - From: "),_c('strong',[_vm._v(_vm._s(_vm.item.senderName))]),_vm._v(" - "+_vm._s(_vm._f("formatDate")(_vm.item.date,'h:mma')))])])],1)],1)],1)};
var __vue_staticRenderFns__$1r = [];

  /* style */
  const __vue_inject_styles__$1s = function (inject) {
    if (!inject) return
    inject("data-v-83a8b55a_0", { source: ".border-top[data-v-83a8b55a]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-83a8b55a]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-83a8b55a]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-83a8b55a]{border-left:1px solid rgba(0,0,0,.05)}.timeline-entry[data-v-83a8b55a]{cursor:pointer}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1s = "data-v-83a8b55a";
  /* module identifier */
  const __vue_module_identifier__$1s = undefined;
  /* functional template */
  const __vue_is_functional_template__$1s = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1r = normalizeComponent(
    { render: __vue_render__$1r, staticRenderFns: __vue_staticRenderFns__$1r },
    __vue_inject_styles__$1s,
    __vue_script__$1s,
    __vue_scope_id__$1s,
    __vue_is_functional_template__$1s,
    __vue_module_identifier__$1s,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1t = {
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  components: {
    FluroRealmBar: __vue_component__$g
  },
  computed: {
    links() {
      var self = this;

      switch (self.type) {
        case 'assignment':
          return lodash.chain(self.item.entries).map(function (entry) {
            return lodash.get(entry, 'roster.event');
          }).compact().uniqBy(function (event) {
            return event._id;
          }).value();
      }
    },

    type() {
      return this.item.type;
    },

    realms() {
      return lodash.chain(this.item.entries).map('realms').flatten().uniq().compact().value();
    },

    title() {
      var self = this;

      switch (self.item.type) {
        case 'assignment':
          var assignments = lodash.chain(self.item.entries).map(function (entry) {
            return entry.title;
          }).compact().uniq().value().join(', ');

          return `Rostered as ${assignments}`;
      }
    },

    icon() {
      var self = this;

      switch (self.item.type) {
        case 'assignment':
          return 'calendar';

        default:
          return self.$fluro.types.icon(self.item.type);
      }
    }

  }
};

/* script */
const __vue_script__$1t = script$1t;

/* template */
var __vue_render__$1s = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"timeline-entry border-top"},[_c('fluro-realm-bar',{attrs:{"realm":_vm.realms}}),_vm._v(" "),_c('pre',[_vm._v(_vm._s(_vm.item))])],1)};
var __vue_staticRenderFns__$1s = [];

  /* style */
  const __vue_inject_styles__$1t = function (inject) {
    if (!inject) return
    inject("data-v-105cf63e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1t = undefined;
  /* module identifier */
  const __vue_module_identifier__$1t = undefined;
  /* functional template */
  const __vue_is_functional_template__$1t = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1s = normalizeComponent(
    { render: __vue_render__$1s, staticRenderFns: __vue_staticRenderFns__$1s },
    __vue_inject_styles__$1t,
    __vue_script__$1t,
    __vue_scope_id__$1t,
    __vue_is_functional_template__$1t,
    __vue_module_identifier__$1t,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1u = {
  props: {
    items: {
      type: Array
    },
    value: {
      type: Object
    }
  },
  components: {
    FluroTimeline: __vue_component__$1e,
    MailoutCard: __vue_component__$1f,
    PostCard: __vue_component__$1m,
    InteractionCard: __vue_component__$1n,
    CheckinCard: __vue_component__$1o,
    LogCard: __vue_component__$1p,
    RosterCard: __vue_component__$1q,
    TextMessageCard: __vue_component__$1r,
    GroupedCard: __vue_component__$1s
  },

  data() {
    return {
      loading: false,
      model: this.value
    };
  },

  asyncComputed: {
    array: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.model);

        if (!contactID) {
          self.loading = false;
        }

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/contact/${contactID}/timeline`).then(function (res) {
            resolve(res.data);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1u = script$1u;

/* template */
var __vue_render__$1t = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-timeline"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('fluro-timeline',{scopedSlots:_vm._u([{key:"card",fn:function(ref){
var entry = ref.entry;
return [(entry.grouped)?_vm._l((entry.entries),function(log){return _c('log-card',{key:log._id,attrs:{"item":log}})}):(!entry._type)?[_c('log-card',{attrs:{"item":entry}})]:[(entry._type == 'mailout')?[_c('mailout-card',{attrs:{"item":entry}})]:(entry._type == 'post')?[_c('post-card',{attrs:{"item":entry}})]:(entry._type == 'interaction')?[_c('interaction-card',{attrs:{"item":entry}})]:(entry._type == 'checkin')?[_c('checkin-card',{attrs:{"item":entry}})]:(entry._type == 'assignment')?[_c('roster-card',{attrs:{"item":entry}})]:(entry._type == 'sms')?[_c('text-message-card',{attrs:{"item":entry}})]:[_c('div',{staticClass:"timeline-card"},[_c('pre',[_vm._v(_vm._s(entry))])])]]]}}]),model:{value:(_vm.array),callback:function ($$v) {_vm.array=$$v;},expression:"array"}})]],2)};
var __vue_staticRenderFns__$1t = [];

  /* style */
  const __vue_inject_styles__$1u = function (inject) {
    if (!inject) return
    inject("data-v-525fe5e6_0", { source: ".border-top,.timeline-entry{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.contact-timeline .timeline-wrapper{max-width:960px;margin:auto}.log-message{font-size:.8em;opacity:.5;padding:5px;font-style:italic}.timeline-entry{padding:5px;position:relative;overflow:hidden;text-overflow:ellipsis}.timeline-entry .summary{font-size:.8em;opacity:.5}.timeline-icon{text-align:center;width:34px;line-height:34px;height:34px;background:rgba(0,0,0,.1);border-radius:100%;display:block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1u = undefined;
  /* module identifier */
  const __vue_module_identifier__$1u = undefined;
  /* functional template */
  const __vue_is_functional_template__$1u = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1t = normalizeComponent(
    { render: __vue_render__$1t, staticRenderFns: __vue_staticRenderFns__$1t },
    __vue_inject_styles__$1u,
    __vue_script__$1u,
    __vue_scope_id__$1u,
    __vue_is_functional_template__$1u,
    __vue_module_identifier__$1u,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1v = {
  props: {
    options: {
      type: Object
    }
  },
  components: {
    FluroRealmSelect: __vue_component__$t,
    FluroContentForm: __vue_component__$H
  },
  mixins: [FluroModalMixin],

  data() {
    return {
      loading: true,
      dataModel: {
        data: {// parent: this.options.item,
        }
      },
      serverErrors: '',
      errorMessages: [],
      thread: [],
      state: 'ready'
    };
  },

  asyncComputed: {
    definition: {
      default: null,

      get() {
        var self = this;
        var definition = self.options.definition;
        var definitionName = definition ? definition.definitionName : self.options.definitionName;
        self.loading = true;
        return new Promise(function (resolve, reject) {
          return self.$fluro.types.get(definitionName).then(function (def) {
            resolve(def.definition); // console.log('GOT THE DEFINITION', def)

            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          });
        });
      }

    }
  },
  computed: {
    summary() {
      return this.items.length != 1 ? `${this.items.length} items` : this.items[0].title;
    },

    // definition() {
    //     return this.options.definition;
    // },
    items() {
      var self = this;
      var items = self.options.items || [self.options.item];
      return lodash.compact(items);
    },

    hasErrors() {
      // console.log('Has Errors?', this.errorMessages)
      return this.errorMessages.length ? true : false;
    }

  },
  methods: {
    validate() {
      this.errorMessages = lodash.get(this.$refs, 'form.errorMessages');
    },

    clear() {
      this.reset();
    },

    reset() {
      var self = this; //Reset the model
      // Vue.set(self.model, 'data', {});

      self.$set(self, 'dataModel', {});
      self.state = 'ready';
      self.$emit('reset');
    },

    submit() {
      var self = this;
      self.validate();

      if (self.errorMessages && self.errorMessages.length) {
        return;
      }

      self.state = 'processing'; ///////////////////////////////////////////////////////////

      if (self.items.length == 1) {
        console.log('submit to one item', self.items);
        return submitItem(self.items[0], submissionComplete);
      } else {
        console.log('Submit to multiple', self.items);
        return async.mapLimit(self.items, 3, submitItem, multipleComplete);
      } ///////////////////////////////////////////////////////////


      function submitItem(item, next) {
        var submission = JSON.parse(JSON.stringify(self.dataModel));
        submission.parent = self.$fluro.utils.getStringID(item);
        console.log('SUBMIT POST AGAINST', submission.parent); //Create the post

        return self.$fluro.content.submitPost(submission.parent, self.definition.definitionName, submission).then(function (result) {
          return next(null, result);
        }).catch(next);
      } ///////////////////////////////////////////////////////////


      function multipleComplete(err, results) {
        if (err) {
          //Dispatch an error
          self.$fluro.error(err);
          self.state = 'error';
          self.$emit('error', err);
          self.serverErrors = self.$fluro.utils.errorMessage(err);
          return;
        }

        self.$fluro.notify(`${self.definition.title} for ${results.length} items were saved successfully`, {
          type: 'success'
        }); // self.$fluro.resetCache();

        self.close(results);
      } ///////////////////////////////////////////////////////////


      function submissionComplete(err, res) {
        if (err) {
          //Dispatch an error
          self.$fluro.error(err);
          self.state = 'error';
          self.$emit('error', err);
          self.serverErrors = self.$fluro.utils.errorMessage(err);
          return;
        }

        self.$fluro.notify(`${self.definition.title} for ${self.items[0].title} was saved successfully`, {
          type: 'success'
        }); // self.$fluro.resetCache();

        self.close(res);
      }
    }

  }
};

/* script */
const __vue_script__$1v = script$1v;

/* template */
var __vue_render__$1u = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{staticClass:"add-post-modal",attrs:{"disabled":_vm.state == 'processing'},on:{"submit":function($event){$event.preventDefault();return _vm.submit($event)}}},[(_vm.loading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_c('flex-column',[_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":"post"},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('h3',[_vm._v("New "+_vm._s(_vm.definition.title)+" "),_c('span',{staticClass:"muted"},[_vm._v("// "+_vm._s(_vm.summary))])])]},proxy:true}])})],1),_vm._v(" "),_c('flex-column-body',[_c('v-container',[_c('fluro-content-form',{ref:"form",attrs:{"fields":_vm.definition.fields},on:{"errorMessages":_vm.validate},model:{value:(_vm.dataModel.data),callback:function ($$v) {_vm.$set(_vm.dataModel, "data", $$v);},expression:"dataModel.data"}}),_vm._v(" "),_c('fluro-realm-select',{attrs:{"type":"event","definition":_vm.dataModel.definition},model:{value:(_vm.dataModel.realms),callback:function ($$v) {_vm.$set(_vm.dataModel, "realms", $$v);},expression:"dataModel.realms"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"pa-2"},[_c('div',{staticClass:"actions"},[(_vm.state == 'error')?[_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n                            "+_vm._s(_vm.serverErrors)+"\n                        ")])]:[(_vm.hasErrors)?_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n                            Please check the following issues before submitting\n                            "),_vm._l((_vm.errorMessages),function(error){return _c('div',[_c('strong',[_vm._v(_vm._s(error.title))]),_vm._v(": "+_vm._s(error.messages[0])+"\n                            ")])})],2):_vm._e()]],2),_vm._v(" "),_c('v-layout',[(_vm.options.skip)?[_c('v-btn',{on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                            Skip\n                        ")])]:[_c('v-btn',{on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                            Cancel\n                        ")])],_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",attrs:{"loading":_vm.state == 'processing',"disabled":_vm.hasErrors,"type":"submit","color":"primary"}},[_vm._v("\n                        Submit\n                    ")])],2)],1)],1)],1)],1)};
var __vue_staticRenderFns__$1u = [];

  /* style */
  const __vue_inject_styles__$1v = function (inject) {
    if (!inject) return
    inject("data-v-0dcb50d0_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.add-post-modal{display:flex;flex:1;max-height:80vh;min-width:300px;max-width:750px;width:100%}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1v = undefined;
  /* module identifier */
  const __vue_module_identifier__$1v = undefined;
  /* functional template */
  const __vue_is_functional_template__$1v = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1u = normalizeComponent(
    { render: __vue_render__$1u, staticRenderFns: __vue_staticRenderFns__$1u },
    __vue_inject_styles__$1v,
    __vue_script__$1v,
    __vue_scope_id__$1v,
    __vue_is_functional_template__$1v,
    __vue_module_identifier__$1v,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1w = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {
    PostCard: __vue_component__$1m,
    AddPost: __vue_component__$1u
  },

  data() {
    return {
      loading: false
    };
  },

  methods: {
    create(definition) {
      var self = this;
      var options = {
        definition,
        item: self.contact
      }; ///////////////////////////

      var promise = self.$fluro.modal({
        component: __vue_component__$1u,
        options
      }).then(function () {
        self.$fluro.resetCache();
      });
    } // create(postType) {
    //     var self = this;
    //     self.$fluro.global.create = function() {
    //     }
    // }


  },
  asyncComputed: {
    postTypes: {
      default: [],

      get() {
        var self = this;
        return new Promise(function (resolve, reject) {
          self.$fluro.types.subTypes('post').then(function (res) {
            var filtered = lodash.filter(res, function (postType) {
              var isCorrectType = lodash.chain(postType).get('data.postParentTypes').includes('contact').value();

              if (!isCorrectType) {
                return;
              }

              var canSubmit = self.$fluro.access.can('submit', postType.definitionName, 'post');
              var canCreate = self.$fluro.access.can('create', postType.definitionName, 'post');
              return canSubmit || canCreate;
            });

            resolve(filtered);
          }).catch(reject);
        });
      }

    },
    items: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        }

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/info/posts?contact=${contactID}`).then(function (res) {
            resolve(res.data);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1w = script$1w;

/* template */
var __vue_render__$1v = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-post-thread"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-header',[_c('v-container',{staticClass:"border-bottom text-xs-center",staticStyle:{"background":"#fff"},attrs:{"fluid":""}},_vm._l((_vm.postTypes),function(postType){return _c('v-btn',{attrs:{"small":""},on:{"click":function($event){return _vm.create(postType)}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd "+_vm._s(postType.title)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1)}),1)],1),_vm._v(" "),_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('v-container',_vm._l((_vm.items),function(post){return _c('div',{staticClass:"card"},[_c('post-card',{attrs:{"item":post}})],1)}),0)],1)]],2)};
var __vue_staticRenderFns__$1v = [];

  /* style */
  const __vue_inject_styles__$1w = function (inject) {
    if (!inject) return
    inject("data-v-ab467e36_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.card{background:#fff;border-radius:5px;margin-bottom:10px;overflow:hidden}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1w = undefined;
  /* module identifier */
  const __vue_module_identifier__$1w = undefined;
  /* functional template */
  const __vue_is_functional_template__$1w = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1v = normalizeComponent(
    { render: __vue_render__$1v, staticRenderFns: __vue_staticRenderFns__$1v },
    __vue_inject_styles__$1w,
    __vue_script__$1w,
    __vue_scope_id__$1w,
    __vue_is_functional_template__$1w,
    __vue_module_identifier__$1w,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1x = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {
    FluroContentRender: __vue_component__$1l
  },

  data() {
    return {
      loading: false
    };
  },

  methods: {
    edit(sheet) {
      var self = this;
      self.$fluro.global.edit(sheet, true).then(function (response) {
        console.log('RESPONSE!', response, sheet);
        self.$set(sheet, 'data', response.data);
      });
    },

    create(definition) {
      var self = this;
      var options = {
        definition,
        item: self.contact
      }; ///////////////////////////

      var promise = self.$fluro.modal({
        component: AddPost,
        options
      }).then(function () {
        self.$fluro.resetCache();
      });
    }

  },
  computed: {
    orderedSheets() {
      return lodash.chain(this.items).orderBy(function (sheet) {
        //TODO order by weight
        switch (sheet.status) {
          case 'archived':
            return 1000;

          case 'active':
            return -1000;
        }

        return 0;
      }).value();
    }

  },
  asyncComputed: {
    items: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        }

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/contact/details/${contactID}`).then(function (res) {
            resolve(res.data);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1x = script$1x;

/* template */
var __vue_render__$1w = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-detail-list"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('v-container',{attrs:{"fluid":""}},_vm._l((_vm.orderedSheets),function(sheet){return _c('fluro-panel',{key:sheet._id,staticClass:"sheet-panel",class:sheet.status,attrs:{"fluid":""}},[_c('fluro-panel-title',[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{attrs:{"shrink":""}},[_c('fluro-realm-dots',{attrs:{"realms":sheet.realms}})],1),_vm._v(" "),_c('v-flex',[_c('strong',[_vm._v(_vm._s(sheet.fullDefinition.title)+" "),(sheet.status == 'archived')?_c('span',[_vm._v("(Archived)")]):_vm._e()])]),_vm._v(" "),(_vm.$fluro.access.canEditItem(sheet))?_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","icon":"","content":"Edit"},on:{"click":function($event){return _vm.edit(sheet)}}},[_c('fluro-icon',{attrs:{"icon":"pencil"}})],1)],1):_vm._e(),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"small":"","icon":"","content":"Actions"},on:{"click":function($event){return _vm.$actions.open([sheet])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)],1)],1),_vm._v(" "),(sheet.status != 'archived')?_c('fluro-panel-body',[_c('fluro-content-render',{attrs:{"fields":sheet.fullDefinition.fields},model:{value:(sheet.data),callback:function ($$v) {_vm.$set(sheet, "data", $$v);},expression:"sheet.data"}})],1):_vm._e()],1)}),1)],1)]],2)};
var __vue_staticRenderFns__$1w = [];

  /* style */
  const __vue_inject_styles__$1x = function (inject) {
    if (!inject) return
    inject("data-v-0c5d633c_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.sheet-panel.archived{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1x = undefined;
  /* module identifier */
  const __vue_module_identifier__$1x = undefined;
  /* functional template */
  const __vue_is_functional_template__$1x = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1w = normalizeComponent(
    { render: __vue_render__$1w, staticRenderFns: __vue_staticRenderFns__$1w },
    __vue_inject_styles__$1x,
    __vue_script__$1x,
    __vue_scope_id__$1x,
    __vue_is_functional_template__$1x,
    __vue_module_identifier__$1x,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1y = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {
    MailoutCard: __vue_component__$1f,
    TextMessageCard: __vue_component__$1r
  },

  data() {
    return {
      loading: false
    };
  },

  computed: {
    timeline() {
      var self = this;
      var array = [];
      array = lodash.chain(array.concat(self.sms, self.emails)).orderBy(function (entry) {
        return new Date(entry.date);
      }).reverse().value();
      return self.$fluro.date.timeline(array, 'date');
    }

  },
  asyncComputed: {
    sms: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        }

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/contact/${contactID}/sms`).then(function (res) {
            var mapped = lodash.map(res.data, function (entry) {
              entry._type = 'sms';
              return entry;
            });

            resolve(mapped);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    },
    emails: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        }

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/info/correspondence?contact=${contactID}`).then(function (res) {
            var mapped = lodash.map(res.data, function (entry) {
              entry._type = 'mailout';
              return entry;
            });

            resolve(mapped);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1y = script$1y;

/* template */
var __vue_render__$1x = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-message-list"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('div',{staticClass:"timeline"},_vm._l((_vm.timeline),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(_vm._f("formatDate")(year.date,'YYYY')))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(_vm._f("formatDate")(month.date,'MMM')))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(_vm._f("formatDate")(day.date,'ddd D')))]),_vm._v(" "),_c('div',{staticClass:"entries"},_vm._l((day.items),function(entry){return _c('div',{key:entry._id},[(entry._type == 'mailout')?_c('mailout-card',{attrs:{"item":entry}}):_vm._e(),_vm._v(" "),(entry._type == 'sms')?_c('text-message-card',{attrs:{"item":entry}}):_vm._e()],1)}),0)])})],2)})],2)}),0)])]],2)};
var __vue_staticRenderFns__$1x = [];

  /* style */
  const __vue_inject_styles__$1y = function (inject) {
    if (!inject) return
    inject("data-v-d50c7638_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1y = undefined;
  /* module identifier */
  const __vue_module_identifier__$1y = undefined;
  /* functional template */
  const __vue_is_functional_template__$1y = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1x = normalizeComponent(
    { render: __vue_render__$1x, staticRenderFns: __vue_staticRenderFns__$1x },
    __vue_inject_styles__$1y,
    __vue_script__$1y,
    __vue_scope_id__$1y,
    __vue_is_functional_template__$1y,
    __vue_module_identifier__$1y,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1z = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {},

  data() {
    return {
      loading: false
    };
  },

  computed: {
    timeline() {
      var self = this;
      return self.$fluro.date.timeline(self.items, 'created');
    }

  },
  asyncComputed: {
    items: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        } /////////////////////////////////////


        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/info/transactions?contact=${contactID}`).then(function (res) {
            var mapped = lodash.map(res.data, function (entry) {
              entry.formattedAmount = self.$fluro.utils.formatCurrency(entry.amount, entry.currency);
              return entry;
            });

            resolve(mapped);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1z = script$1z;

/* template */
var __vue_render__$1y = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-transaction-list"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('div',{staticClass:"timeline"},_vm._l((_vm.timeline),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(_vm._f("formatDate")(year.date,'YYYY')))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(_vm._f("formatDate")(month.date,'MMM')))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(_vm._f("formatDate")(day.date,'ddd D')))]),_vm._v(" "),_c('div',{staticClass:"entries"},_vm._l((day.items),function(entry){return _c('div',{key:entry._id,staticClass:"entry",on:{"click":function($event){return _vm.$fluro.global.view(entry, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":entry.realms}}),_vm._v(" "),_c('v-layout',[_c('v-flex',[_c('strong',[_vm._v(_vm._s(entry.title))]),_vm._v(" "),_c('div',[_vm._v(_vm._s(entry.formattedAmount))]),_vm._v(" "),_c('div',{staticClass:"text-muted sm"},[_vm._v("\n                                                "+_vm._s(entry.module)+" - "+_vm._s(entry.paymentStatus)+" - "+_vm._s(_vm._f("formatDate")(entry.created,'dddd D MMM YYYY'))+" ("+_vm._s(_vm._f("timeago")(entry.created))+")\n                                            ")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{attrs:{"icon":"","small":""},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$actions.open([entry])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)],1)],1)}),0)])})],2)})],2)}),0)])]],2)};
var __vue_staticRenderFns__$1y = [];

  /* style */
  const __vue_inject_styles__$1z = function (inject) {
    if (!inject) return
    inject("data-v-e7c7d55e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1z = undefined;
  /* module identifier */
  const __vue_module_identifier__$1z = undefined;
  /* functional template */
  const __vue_is_functional_template__$1z = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1y = normalizeComponent(
    { render: __vue_render__$1y, staticRenderFns: __vue_staticRenderFns__$1y },
    __vue_inject_styles__$1z,
    __vue_script__$1z,
    __vue_scope_id__$1z,
    __vue_is_functional_template__$1z,
    __vue_module_identifier__$1z,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1A = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {},

  data() {
    return {
      loading: false
    };
  },

  computed: {
    timeline() {
      var self = this;
      return self.$fluro.date.timeline(self.items, 'created');
    }

  },
  asyncComputed: {
    items: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        } /////////////////////////////////////


        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/info/interactions?contact=${contactID}`).then(function (res) {
            var mapped = lodash.map(res.data, function (entry) {
              // entry.formattedAmount = self.$fluro.utils.formatCurrency(entry.amount, entry.currency);
              return entry;
            });

            resolve(mapped);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1A = script$1A;

/* template */
var __vue_render__$1z = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-transaction-list"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('div',{staticClass:"timeline"},_vm._l((_vm.timeline),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(_vm._f("formatDate")(year.date,'YYYY')))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(_vm._f("formatDate")(month.date,'MMM')))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(_vm._f("formatDate")(day.date,'ddd D')))]),_vm._v(" "),_c('div',{staticClass:"entries"},_vm._l((day.items),function(entry){return _c('div',{key:entry._id,staticClass:"entry",on:{"click":function($event){return _vm.$fluro.global.view(entry, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":entry.realms}}),_vm._v(" "),_c('v-layout',[_c('v-flex',[_c('strong',[_vm._v(_vm._s(entry.title))]),_vm._v(" "),_c('div',{staticClass:"text-muted sm"},[_vm._v("\n                                                "+_vm._s(_vm._f("formatDate")(entry.created,'dddd D MMM YYYY'))+" ("+_vm._s(_vm._f("timeago")(entry.created))+")\n                                            ")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{attrs:{"icon":"","small":""},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$actions.open([entry])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)],1)],1)}),0)])})],2)})],2)}),0)])]],2)};
var __vue_staticRenderFns__$1z = [];

  /* style */
  const __vue_inject_styles__$1A = function (inject) {
    if (!inject) return
    inject("data-v-0476d67e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1A = undefined;
  /* module identifier */
  const __vue_module_identifier__$1A = undefined;
  /* functional template */
  const __vue_is_functional_template__$1A = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1z = normalizeComponent(
    { render: __vue_render__$1z, staticRenderFns: __vue_staticRenderFns__$1z },
    __vue_inject_styles__$1A,
    __vue_script__$1A,
    __vue_scope_id__$1A,
    __vue_is_functional_template__$1A,
    __vue_module_identifier__$1A,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1B = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {},

  data() {
    return {
      loading: false
    };
  },

  computed: {
    timeline() {
      var self = this;
      return self.$fluro.date.timeline(self.items, 'event.startDate');
    }

  },
  asyncComputed: {
    items: {
      default: [],

      get() {
        var self = this;
        self.loading = true;
        var contactID = self.$fluro.utils.getStringID(self.contact);

        if (!contactID) {
          self.loading = false;
        } /////////////////////////////////////


        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/info/checkins?contact=${contactID}`).then(function (res) {
            var mapped = lodash.map(res.data, function (entry) {
              // entry.formattedAmount = self.$fluro.utils.formatCurrency(entry.amount, entry.currency);
              return entry;
            });

            resolve(mapped);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          }); // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
        });
      }

    }
  }
};

/* script */
const __vue_script__$1B = script$1B;

/* template */
var __vue_render__$1A = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-checkin-list"},[(_vm.loading)?[_c('fluro-page-preloader',{attrs:{"contain":""}})]:[_c('flex-column-body',{staticStyle:{"background":"#eee"}},[_c('div',{staticClass:"timeline"},_vm._l((_vm.timeline),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(_vm._f("formatDate")(year.date,'YYYY')))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(_vm._f("formatDate")(month.date,'MMM')))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(_vm._f("formatDate")(day.date,'ddd D')))]),_vm._v(" "),_c('div',{staticClass:"entries"},_vm._l((day.items),function(entry){return _c('div',{key:entry._id,staticClass:"entry",on:{"click":function($event){return _vm.$fluro.global.view(entry, true)}}},[_c('fluro-realm-bar',{attrs:{"realm":entry.realms}}),_vm._v(" "),_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"thumbnail",style:({backgroundImage:("url(" + (_vm.$fluro.asset.coverUrl(entry.event._id, "event", {w:50})) + ")")})})]),_vm._v(" "),_c('v-flex',[_c('div',[_c('strong',[_vm._v(_vm._s(entry.event.title))]),_vm._v(" "),_c('div',[_c('strong',{staticClass:"sm"},[_vm._v(_vm._s(_vm._f("readableEventDate")(entry.event)))])]),_vm._v(" "),_c('div',{staticClass:"sm text-muted"},[_vm._v(_vm._s(_vm._f("definitionTitle")((entry.event.definition ? entry.event.definition : 'event')))+"  "+_vm._s(entry.event.firstLine))])])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{attrs:{"icon":"","small":""},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.$actions.open([entry])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)],1)],1)}),0)])})],2)})],2)}),0)])]],2)};
var __vue_staticRenderFns__$1A = [];

  /* style */
  const __vue_inject_styles__$1B = function (inject) {
    if (!inject) return
    inject("data-v-4c42f512_0", { source: ".border-top[data-v-4c42f512]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-4c42f512]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-4c42f512]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-4c42f512]{border-left:1px solid rgba(0,0,0,.05)}.thumbnail[data-v-4c42f512]{width:50px;height:50px;background-size:contain;background-position:center center;background-repeat:no-repeat;display:block;border-radius:4px;margin-right:10px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1B = "data-v-4c42f512";
  /* module identifier */
  const __vue_module_identifier__$1B = undefined;
  /* functional template */
  const __vue_is_functional_template__$1B = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1A = normalizeComponent(
    { render: __vue_render__$1A, staticRenderFns: __vue_staticRenderFns__$1A },
    __vue_inject_styles__$1B,
    __vue_script__$1B,
    __vue_scope_id__$1B,
    __vue_is_functional_template__$1B,
    __vue_module_identifier__$1B,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1C = {
  props: {
    'value': {
      type: Object,
      required: true
    }
  },

  data() {
    return {
      actionIndexes: {},
      model: this.value,
      loading: true,
      newGroups: [],
      teams: []
    };
  },

  created() {
    console.log('RELOAD TEAMS');
    this.reloadTeams();
  },

  methods: {
    canLeave(group) {
      var self = this;
      var definition = group.definition;
      var canLeaveGroupsOfThisType = this.$fluro.access.can('leave', definition, 'team');
      return canLeaveGroupsOfThisType || self.$fluro.access.canEditItem(group);
    },

    canAdd(definition) {
      var canAddGroupsOfThisType = this.$fluro.access.can('join', definition, 'team');
      var canEditGroupsOfThisType = this.$fluro.access.can('edit', definition, 'team');
      return canAddGroupsOfThisType || canEditGroupsOfThisType;
    },

    leave(team) {
      var self = this; //Get the ids from the teams

      var teamID = self.$fluro.utils.getStringID(team);
      self.loading = true; //////////////////////////////////

      var promise = self.$batch.run({
        operation: 'remove from team',
        ids: [self.contactID],
        teams: [teamID]
      }).then(function (res) {
        var index = lodash.findIndex(self.teams, {
          _id: teamID
        });

        self.teams.splice(index, 1);
        self.loading = false;
      }).catch(function (err) {
        console.log('TEAMS ERR', err);
        self.reloadTeams();
      });
    },

    select(type) {
      var self = this; //Ugly hack, but it's gotta be done unfortunately

      var SelectionManager = Vue.extend(__vue_component__$E);
      var instance = new SelectionManager({
        propsData: {
          minimum: 0,
          maximum: 0
        }
      }); // var isBasicType = self.$fluro.types.isBasicType(type);

      var promise = self.$fluro.modal({
        component: __vue_component__$C,
        options: {
          allDefinitions: false,
          //isBasicType,
          selector: instance,
          //Vue(FluroSelector),
          type,
          minimum: 0,
          maximum: 0
        }
      }).then(function (items) {
        if (!items || !items.length) {
          return;
        }

        self.loading = true; //Get the ids from the teams

        var teamIDs = self.$fluro.utils.arrayIDs(items); //////////////////////////////////

        var promise = self.$batch.run({
          operation: 'add to team',
          ids: [self.contactID],
          teams: teamIDs
        }).then(function (res) {
          console.log('TEAMS ADDED', res); // self.teams = self.teams.concat(items);
          // self.loading = false;

          self.reloadTeams();
        }).catch(function (err) {
          console.log('TEAMS ERR', err);
          self.reloadTeams();
        });
      });
    },

    reloadTeams() {
      var self = this;
      self.loading = true;
      self.$fluro.api.get(`/contact/${self.contactID}/teams`).then(function (res) {
        self.teams = res.data;
        self.loading = false;
      }).catch(function (err) {
        self.loading = false;
      });
    }

  },
  components: {
    ListGroup: __vue_component__$1h,
    ListGroupItem: __vue_component__$1j,
    // FluroContentSelectButton,
    FluroContentSelectModal: __vue_component__$C
  },
  computed: {
    contactID() {
      return this.$fluro.utils.getStringID(this.model);
    },

    teamGroups() {
      var self = this; ////////////////////////////////////////////////////

      var allSets = lodash.reduce(self.teamDefinitions, function (set, definition) {
        set[definition.definitionName] = {
          title: definition.plural,
          teams: [],
          key: definition.definitionName
        };
        return set;
      }, {
        team: {
          title: 'Groups and Teams',
          teams: [],
          key: 'team'
        }
      }); ////////////////////////////////////////////////////


      return lodash.chain(self.teams).reduce(function (set, team) {
        var teamType = team.definition || 'team';
        var existingGroup = set[teamType];

        if (!existingGroup) {
          existingGroup = set[teamType] = {
            title: self.$fluro.types.readable(teamType, true),
            teams: []
          };
        }

        existingGroup.teams.push(team);
        return set;
      }, allSets).values().orderBy(function (set) {
        return set.teams.length;
      }).reverse().value();
    }

  },
  asyncComputed: {
    teamDefinitions: {
      default: [],

      get() {
        var self = this;
        return self.$fluro.types.subTypes('team');
      }

    }
  }
};

/* script */
const __vue_script__$1C = script$1C;

/* template */
var __vue_render__$1B = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.loading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_vm._l((_vm.teamGroups),function(group){return _c('v-input',{staticClass:"no-flex"},[_c('v-label',[_vm._v(_vm._s(group.title))]),_vm._v(" "),_c('list-group',[_vm._l((group.teams),function(team){return [_c('list-group-item',{attrs:{"item":team,"firstLine":_vm._f("comma")(team.positions)},scopedSlots:_vm._u([{key:"right",fn:function(){return [_c('v-menu',{attrs:{"left":true,"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"ma-0",attrs:{"icon":"","small":"","flat":""}},on),[(_vm.actionIndexes[team._id])?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]}}],null,true),model:{value:(_vm.actionIndexes[team._id]),callback:function ($$v) {_vm.$set(_vm.actionIndexes, team._id, $$v);},expression:"actionIndexes[team._id]"}},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){return _vm.$actions.open([team])}}},[_c('v-list-tile-content',[_vm._v("Actions")])],1),_vm._v(" "),(_vm.canLeave(team))?_c('v-list-tile',{on:{"click":function($event){return _vm.leave(team)}}},[_c('v-list-tile-content',[_vm._v("Remove "+_vm._s(_vm.model.firstName)+" from group")])],1):_vm._e()],1)],1)]},proxy:true}],null,true)})]})],2),_vm._v(" "),(_vm.canAdd(group.key))?[_c('v-btn',{staticClass:"ml-0",attrs:{"small":"","color":"primary"},on:{"click":function($event){return _vm.select(group.key)}}},[_vm._v("\n                    Add "+_vm._s(group.title)+"\n                    "),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1)]:_vm._e()],2)})],2)};
var __vue_staticRenderFns__$1B = [];

  /* style */
  const __vue_inject_styles__$1C = function (inject) {
    if (!inject) return
    inject("data-v-876aacb4_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1C = undefined;
  /* module identifier */
  const __vue_module_identifier__$1C = undefined;
  /* functional template */
  const __vue_is_functional_template__$1C = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1B = normalizeComponent(
    { render: __vue_render__$1B, staticRenderFns: __vue_staticRenderFns__$1B },
    __vue_inject_styles__$1C,
    __vue_script__$1C,
    __vue_scope_id__$1C,
    __vue_is_functional_template__$1C,
    __vue_module_identifier__$1C,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1D = {
  props: {
    contact: {
      type: Object
    }
  },
  components: {
    ContactGroupManager: __vue_component__$1B
  }
  /**
  data() {
      return {
          loading: false,
      }
  },
  methods: {
      edit(sheet) {
           var self = this;
           self.$fluro.global.edit(sheet, true)
              .then(function(response) {
                  console.log('RESPONSE!', response, sheet)
                  self.$set(sheet, 'data', response.data);
              })
      },
      create(definition) {
           var self = this;
          var options = {
              definition,
              item: self.contact,
          }
           ///////////////////////////
           var promise = self.$fluro.modal({
                  component: AddPost,
                  options,
              })
              .then(function() {
                  self.$fluro.resetCache();
              });
        },
  },
  computed: {
       teamGroups() {
           var self = this;
           ////////////////////////////////////////////////////
           var allSets = _.reduce(self.teamDefinitions, function(set, definition) {
              set[definition.definitionName] = {
                  title: definition.plural,
                  teams: [],
                  key: definition.definitionName,
              }
               return set;
          }, {
              team: {
                  title: 'Groups and Teams',
                  teams: [],
                  key: 'team',
              }
          })
           ////////////////////////////////////////////////////
           return _.chain(self.items)
              .reduce(function(set, team) {
                   var teamType = team.definition || 'team';
                  var existingGroup = set[teamType];
                  if (!existingGroup) {
                      existingGroup = set[teamType] = {
                          title: self.$fluro.types.readable(teamType, true),
                          teams: [],
                      }
                  }
                   existingGroup.teams.push(team);
                   return set;
              }, allSets)
              .values()
              .orderBy(function(set) {
                  return set.teams.length;
              })
              .reverse()
              .value();
      },
    },
  asyncComputed: {
       teamDefinitions: {
          default: [],
          get() {
              var self = this;
              return self.$fluro.types.subTypes('team')
          }
      },
      items: {
          default: [],
          get() {
                 var self = this;
              self.loading = true;
               var contactID = self.$fluro.utils.getStringID(self.contact);
              if (!contactID) {
                  Promise.resolve([])
                  self.loading = false;
              }
               return new Promise(function(resolve, reject) {
                   self.$fluro.api.get(`/contact/${contactID}/teams`).then(function(res) {
                          resolve(res.data);
                          self.loading = false;
                      })
                      .catch(function(err) {
                          reject(err);
                          self.loading = false;
                       });
                  // https://api.staging.fluro.io/info/checkins?contact=592e50389d9129595a75cc4e
              })
          }
      }
  }
  /**/

};

/* script */
const __vue_script__$1D = script$1D;

/* template */
var __vue_render__$1C = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"contact-team-list"},[_c('flex-column-body',[_c('v-container',{attrs:{"fluid":""}},[_c('contact-group-manager',{model:{value:(_vm.contact),callback:function ($$v) {_vm.contact=$$v;},expression:"contact"}})],1)],1)],1)};
var __vue_staticRenderFns__$1C = [];

  /* style */
  const __vue_inject_styles__$1D = function (inject) {
    if (!inject) return
    inject("data-v-7966892d_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.sheet-panel.archived{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1D = undefined;
  /* module identifier */
  const __vue_module_identifier__$1D = undefined;
  /* functional template */
  const __vue_is_functional_template__$1D = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1C = normalizeComponent(
    { render: __vue_render__$1C, staticRenderFns: __vue_staticRenderFns__$1C },
    __vue_inject_styles__$1D,
    __vue_script__$1D,
    __vue_scope_id__$1D,
    __vue_is_functional_template__$1D,
    __vue_module_identifier__$1D,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$1E = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    icon() {
      if (this.data == 'public') {
        return 'lock-open';
      } else {
        return 'lock';
      }
    },

    library() {
      if (this.data == 'public') {
        return 'far';
      } else {
        return 'fas';
      }
    }

  }
};

/* script */
const __vue_script__$1E = script$1E;

/* template */
var __vue_render__$1D = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"cell",class:_vm.data},[_c('fluro-icon',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":_vm.data,"library":_vm.library,"icon":_vm.icon}})],1)};
var __vue_staticRenderFns__$1D = [];

  /* style */
  const __vue_inject_styles__$1E = function (inject) {
    if (!inject) return
    inject("data-v-769087c5_0", { source: ".border-top[data-v-769087c5]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-769087c5]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-769087c5]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-769087c5]{border-left:1px solid rgba(0,0,0,.05)}.cell[data-v-769087c5]{font-size:.9em;text-align:center}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1E = "data-v-769087c5";
  /* module identifier */
  const __vue_module_identifier__$1E = undefined;
  /* functional template */
  const __vue_is_functional_template__$1E = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1D = normalizeComponent(
    { render: __vue_render__$1D, staticRenderFns: __vue_staticRenderFns__$1D },
    __vue_inject_styles__$1E,
    __vue_script__$1E,
    __vue_scope_id__$1E,
    __vue_is_functional_template__$1E,
    __vue_module_identifier__$1E,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$1F = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  }
};

/* script */
const __vue_script__$1F = script$1F;

/* template */
var __vue_render__$1E = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('pre',[_vm._v(_vm._s(_vm.data))])])};
var __vue_staticRenderFns__$1E = [];

  /* style */
  const __vue_inject_styles__$1F = function (inject) {
    if (!inject) return
    inject("data-v-de76038e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1F = undefined;
  /* module identifier */
  const __vue_module_identifier__$1F = undefined;
  /* functional template */
  const __vue_is_functional_template__$1F = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1E = normalizeComponent(
    { render: __vue_render__$1E, staticRenderFns: __vue_staticRenderFns__$1E },
    __vue_inject_styles__$1F,
    __vue_script__$1F,
    __vue_scope_id__$1F,
    __vue_is_functional_template__$1F,
    __vue_module_identifier__$1F,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1G = {
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  computed: {
    booleanTrue() {
      if (lodash.isString(this.data)) {
        switch (String(this.data).toLowerCase()) {
          case 'true':
          case 'y':
          case 'yes':
            return true;

          case 'false':
          case 'null':
          case 'undefined':
          case 'n':
          case 'no':
          case '':
            return;
        }

        return;
      }

      return this.data ? true : false;
    }

  }
};

/* script */
const __vue_script__$1G = script$1G;

/* template */
var __vue_render__$1F = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"boolean-cell text-xs-center",class:{'true':_vm.booleanTrue, 'false':!_vm.booleanTrue}},[(_vm.booleanTrue)?_c('fluro-icon',{attrs:{"library":"fas","icon":"check-circle"}}):_c('fluro-icon',{attrs:{"library":"far","icon":"times"}})],1)};
var __vue_staticRenderFns__$1F = [];

  /* style */
  const __vue_inject_styles__$1G = function (inject) {
    if (!inject) return
    inject("data-v-3de3d567_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1G = undefined;
  /* module identifier */
  const __vue_module_identifier__$1G = undefined;
  /* functional template */
  const __vue_is_functional_template__$1G = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1F = normalizeComponent(
    { render: __vue_render__$1F, staticRenderFns: __vue_staticRenderFns__$1F },
    __vue_inject_styles__$1G,
    __vue_script__$1G,
    __vue_scope_id__$1G,
    __vue_is_functional_template__$1G,
    __vue_module_identifier__$1G,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1H = {
  props: {
    inactive: {
      type: Boolean
    },
    on: {
      type: String,
      default: 'On'
    },
    off: {
      type: String,
      default: 'Off'
    }
  },

  data() {
    return {
      isInactive: this.inactive
    };
  },

  watch: {
    inactive(v) {
      this.isInactive = v;
    }

  },
  computed: {
    filtered() {
      return lodash.chain(this.realms).filter(function (realm) {
        if (realm._discriminatorType) {
          return;
        }

        return true;
      }).orderBy(function (realm) {
        return realm.title;
      }).value();
    } // colouredRealms() {
    //     var coloured = _.filter(this.filtered, 'bgColor');
    //     if(!coloured.length) {
    //         return this.filtered.slice(0,1);
    //     }
    // }


  }
};

/* script */
const __vue_script__$1H = script$1H;

/* template */
var __vue_render__$1G = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"toggle-item",class:{inactive:_vm.isInactive}},[_c('div',{staticClass:"toggle-item-content"},[_vm._t("default")],2),_vm._v(" "),_c('div',{staticClass:"toggle-switch"},[_c('span',{staticClass:"on"},[_vm._v(_vm._s(_vm.on))]),_vm._v(" "),_c('span',{staticClass:"off"},[_vm._v(_vm._s(_vm.off))])])])};
var __vue_staticRenderFns__$1G = [];

  /* style */
  const __vue_inject_styles__$1H = function (inject) {
    if (!inject) return
    inject("data-v-35452638_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.toggle-items{border:1px solid rgba(0,0,0,.1);border-radius:3px}.toggle-item{font-size:.9em;padding:10px;background:#fff;border-bottom:1px solid rgba(0,0,0,.1);cursor:pointer;display:flex}.toggle-item .toggle-item-content{flex:1}.toggle-item:hover{background:#fafafa}.toggle-item:last-child{border-bottom:none;border-radius-bottom-left:3px;border-radius-bottom-right:3px}.toggle-item:first-child{border-radius-top-left:3px;border-radius-top-right:3px}.toggle-item .toggle-switch{flex:none;background:#e2e7ee;border-radius:50px;height:23px;line-height:23px;min-width:50px;position:relative;display:block;overflow:hidden;text-align:center;letter-spacing:.03em;font-size:.8em;font-weight:600;text-transform:uppercase;box-shadow:inset 0 2px 3px rgba(0,0,0,.2);font-style:normal;border-bottom:1px solid rgba(255,255,255,.5)}.toggle-item .toggle-switch .off{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:50px;transform:translateX(-100%);transition:all .5s;pointer-events:none;opacity:.5}.toggle-item .toggle-switch .on{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:50px;background:#4cc650;color:#fff;transform:translateX(0);transition:all .5s;pointer-events:none;box-shadow:inset 0 4px 5px rgba(0,0,0,.1)}.toggle-item.inactive{font-style:italic;color:rgba(0,0,0,.3);background:rgba(0,0,0,.05)}.toggle-item.inactive .toggle-switch .off{transform:translateX(0)}.toggle-item.inactive .toggle-switch .on{transform:translateX(100%)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1H = undefined;
  /* module identifier */
  const __vue_module_identifier__$1H = undefined;
  /* functional template */
  const __vue_is_functional_template__$1H = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1G = normalizeComponent(
    { render: __vue_render__$1G, staticRenderFns: __vue_staticRenderFns__$1G },
    __vue_inject_styles__$1H,
    __vue_script__$1H,
    __vue_scope_id__$1H,
    __vue_is_functional_template__$1H,
    __vue_module_identifier__$1H,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1I = {
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin],

  data() {
    return {};
  },

  computed: {
    title() {
      return this.options.title;
    },

    description() {
      return this.options.description;
    },

    actions() {
      return this.options.options;
    }

  },
  asyncComputed: {},
  methods: {
    select(option) {
      // console.log('SELECTED OPTION FROM DIALOG', option);
      var self = this;
      self.close(option); //If there is a callback registered
      //then fire the callback

      if (option.action) {
        option.action();
      }
    } // act() {
    //     var self = this;
    //     //Run a batch
    //     var promise = self.$batch.run({
    //         operation: 'remove tag',
    //         ids: self.ids,
    //         tags: self.$fluro.utils.arrayIDs(self.selectedTags),
    //     });
    //     //Close the modal with the promise
    //     return self.close(promise)
    // },


  }
};

/* script */
const __vue_script__$1I = script$1I;

/* template */
var __vue_render__$1H = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-options-dialog"},[(_vm.title || _vm.description)?_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',[(_vm.title)?_c('h3',[_vm._v(_vm._s(_vm.title))]):_vm._e(),_vm._v(" "),(_vm.description)?_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm.description))]):_vm._e()])],1):_vm._e(),_vm._v(" "),_c('flex-column-body',[_c('v-container',{staticStyle:{"background":"#fafafa"}},[_vm._l((_vm.actions),function(action){return [(action.description)?_c('div',{staticClass:"detail-button",on:{"click":function($event){return _vm.select(action)}}},[_c('h5',[_c('v-layout',[_c('v-flex',[_vm._v("\n                            "+_vm._s(action.title)+"\n                        ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{staticClass:"text-xs-right",attrs:{"shrink":""}},[_c('fluro-icon',{attrs:{"icon":"angle-right"}})],1)],1)],1),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(action.description))])]):_c('v-btn',{attrs:{"block":"","color":"primary"},on:{"click":function($event){return _vm.select(action)}}},[_vm._v("\n                    "+_vm._s(action.title)+"\n                ")])]})],2)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"py-1 px-2"},[_c('v-btn',{attrs:{"block":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                Cancel\n            ")])],1)],1)],1)};
var __vue_staticRenderFns__$1H = [];

  /* style */
  const __vue_inject_styles__$1I = function (inject) {
    if (!inject) return
    inject("data-v-5207245e_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-options-dialog{min-width:300px;text-align:center}.fluro-options-dialog .detail-button{border:1px solid #ddd;background:#fff;padding:10px;border-radius:3px;text-align:left;margin-bottom:2px;cursor:pointer}.fluro-options-dialog .detail-button:hover{background:#fafafa;border-color:#2ad4b9}.fluro-options-dialog .v-list__tile__title{font-size:.9em;font-weight:500}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1I = undefined;
  /* module identifier */
  const __vue_module_identifier__$1I = undefined;
  /* functional template */
  const __vue_is_functional_template__$1I = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1H = normalizeComponent(
    { render: __vue_render__$1H, staticRenderFns: __vue_staticRenderFns__$1H },
    __vue_inject_styles__$1I,
    __vue_script__$1I,
    __vue_scope_id__$1I,
    __vue_is_functional_template__$1I,
    __vue_module_identifier__$1I,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1J = {
  components: {
    FluroContentForm: __vue_component__$H
  },
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin],

  data() {
    return {
      model: this.options.model || {}
    };
  },

  computed: {
    title() {
      return this.options.title;
    }

  },
  methods: {
    done() {
      return this.close(this.model);
    }

  }
};

/* script */
const __vue_script__$1J = script$1J;

/* template */
var __vue_render__$1I = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-prompt-dialog"},[_c('form',{on:{"submit":function($event){$event.preventDefault();$event.stopPropagation();return _vm.done($event)}}},[(_vm.title)?_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',{attrs:{"pa-2":""}},[(_vm.title)?_c('h3',[_vm._v(_vm._s(_vm.title))]):_vm._e()])],1):_vm._e(),_vm._v(" "),_c('flex-column-body',[_c('v-container',{attrs:{"pa-2":""}},[_c('fluro-content-form',{attrs:{"fields":_vm.options.fields},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"pa-2":""}},[_c('constrain',{attrs:{"xs":""}},[_c('v-layout',[_c('v-btn',{attrs:{"block":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                        Cancel\n                    ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"block":"","type":"submit","color":"primary"}},[_vm._v("\n                        Continue\n                    ")])],1)],1)],1)],1)],1)])};
var __vue_staticRenderFns__$1I = [];

  /* style */
  const __vue_inject_styles__$1J = function (inject) {
    if (!inject) return
    inject("data-v-0b7aa146_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-prompt-dialog{min-width:300px;text-align:center}.fluro-prompt-dialog .v-list__tile__title{font-size:.9em;font-weight:500}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1J = undefined;
  /* module identifier */
  const __vue_module_identifier__$1J = undefined;
  /* functional template */
  const __vue_is_functional_template__$1J = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1I = normalizeComponent(
    { render: __vue_render__$1I, staticRenderFns: __vue_staticRenderFns__$1I },
    __vue_inject_styles__$1J,
    __vue_script__$1J,
    __vue_scope_id__$1J,
    __vue_is_functional_template__$1J,
    __vue_module_identifier__$1J,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1K = {
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin, Layout],

  data() {
    return {};
  },

  computed: {
    confirmColor() {
      return this.options.confirmColor ? this.options.confirmColor : 'success';
    },

    confirmText() {
      return this.options.confirmText ? this.options.confirmText : 'Confirm';
    },

    title() {
      return this.options.title;
    },

    description() {
      return this.options.description;
    }

  }
};

/* script */
const __vue_script__$1K = script$1K;

/* template */
var __vue_render__$1J = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-confirm-dialog"},[(_vm.title || _vm.description)?_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',[_c('constrain',{attrs:{"xs":""}},[(_vm.title)?_c('h3',[_vm._v(_vm._s(_vm.title))]):_vm._e(),_vm._v(" "),(_vm.description)?_c('div',{staticClass:"muted"},[_vm._v(_vm._s(_vm.description))]):_vm._e()])],1)],1):_vm._e(),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"pa-2"},[_c('constrain',{attrs:{"xs":""}},[_c('v-layout',[(!_vm.options.noCancel)?[_c('v-btn',{attrs:{"block":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                        Cancel\n                    ")]),_vm._v(" "),_c('v-spacer')]:_vm._e(),_vm._v(" "),_c('v-btn',{attrs:{"block":"","color":_vm.confirmColor},on:{"click":function($event){return _vm.close()}}},[_vm._v("\n                        "+_vm._s(_vm.confirmText)+"\n                    ")])],2)],1)],1)],1)],1)};
var __vue_staticRenderFns__$1J = [];

  /* style */
  const __vue_inject_styles__$1K = function (inject) {
    if (!inject) return
    inject("data-v-79ce58b6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-confirm-dialog{text-align:center}@media (min-width:768px){.fluro-confirm-dialog{width:100%;min-width:500px}}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1K = undefined;
  /* module identifier */
  const __vue_module_identifier__$1K = undefined;
  /* functional template */
  const __vue_is_functional_template__$1K = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1J = normalizeComponent(
    { render: __vue_render__$1J, staticRenderFns: __vue_staticRenderFns__$1J },
    __vue_inject_styles__$1K,
    __vue_script__$1K,
    __vue_scope_id__$1K,
    __vue_is_functional_template__$1K,
    __vue_module_identifier__$1K,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1L = {
  components: {
    FluroRealmBar: __vue_component__$g
  },
  props: {
    'draggable': {
      default: false,
      type: Boolean
    },
    'to': {
      type: Object
    },
    'href': {
      type: String
    },
    'target': {
      type: String
    },
    'item': [String, Object],
    'model': {
      type: String,
      default: 'node'
    },
    'actions': {
      type: [Array, Boolean],
      default: function () {
        return [];
      }
    },
    'defaultActions': {
      type: Boolean
    }
  },

  data() {
    return {
      actionsOpen: false,
      availableActions: this.actions
    };
  },

  created() {
    var self = this; //Get any actions pushed in as props

    var actions = self.actions || []; /////////////////////////////////////
    //Get the item we are looking at

    var item = self.item; /////////////////////////////////////
    //Check if we can edit this thing

    var canEdit = self.$fluro.access.canEditItem(item);
    var canView = self.$fluro.access.canViewItem(item);
    var canDelete = self.$fluro.access.canDeleteItem(item); /////////////////////////////////////

    if (self.defaultActions && self.actions !== false) {
      //If we can edit this thing
      if (canEdit) {
        actions.push({
          title: 'Edit',
          click: function () {
            //Fire
            if (self.$fluro.global.edit) {
              self.$fluro.global.edit(item);
            }
          }
        });
      } /////////////////////////////////////


      if (canView) {
        actions.push({
          title: 'View',
          click: function () {
            //Fire
            if (self.$fluro.global.view) {
              self.$fluro.global.view(item);
            }
          }
        }); ///////////////////////////////////////

        switch (item._type) {
          case 'image':
            var url = self.$fluro.asset.getUrl(item);
            actions.push({
              title: 'View Image',
              click: function () {
                if (process.browser) {
                  window.open(url);
                }
              }
            });
            break;

          case 'video':
            var url = self.$fluro.asset.imageUrl(item);
            actions.push({
              title: 'Watch Video',
              click: function () {
                if (process.browser) {
                  window.open(url);
                }
              }
            });
            break;

          case 'audio':
            var url = self.$fluro.asset.getUrl(item);
            actions.push({
              title: 'Listen',
              click: function () {
                if (process.browser) {
                  window.open(url);
                }
              }
            });
            break;
        }

        if (item.assetType == 'upload') {
          var url = self.$fluro.asset.downloadUrl(item);
          actions.push({
            title: 'Download',
            click: function () {
              if (process.browser) {
                window.open(url);
              }
            }
          });
        }
      } /////////////////////////////////////


      if (canDelete) {
        actions.push({
          title: 'Delete',
          click: function () {
            //Fire
            if (self.$fluro.global.delete) {
              self.$fluro.global.delete(item);
            }
          }
        });
      } /////////////////////////////////////


      self.availableActions = actions;
    }
  },

  computed: {
    primaryRealm() {
      return lodash.chain(this.item).get('realms').filter(function (realm) {
        return realm.bgColor;
      }).last().value();
    },

    foregroundColor() {
      return this.primaryRealm ? this.primaryRealm.color : null;
    },

    backgroundColor() {
      return this.primaryRealm ? this.primaryRealm.bgColor : null;
    },

    actionsEnabled() {
      if (this.actions === false) {
        return false;
      }

      return this.availableActions.length;
    },

    linkType() {
      if (this.to) {
        return 'router-link';
      }

      if (this.href) {
        return 'a';
      }

      return 'div';
    },

    realmStyle() {
      var realm = lodash.chain(this.item).get('realms').compact().filter(function (realm) {
        return realm.bgColor;
      }).last().value();

      if (realm) {
        return {
          backgroundColor: realm.bgColor
        };
      }
    },

    icon() {
      return this.$fluro.types.icon(this.type);
    },

    type() {
      return lodash.get(this, 'item._type');
    },

    definition() {
      return lodash.get(this, 'item.definition') || this.type;
    },

    title() {
      return lodash.get(this, 'item.title');
    },

    firstLine() {
      return lodash.get(this, 'item.firstLine');
    },

    subtitle() {
      var self = this;
      var item = this.item;
      var pieces = []; ////////////////////////////////

      switch (item._type) {
        case 'contact':
          return '';

        case 'event':
          pieces.push(self.$fluro.date.readableEventDate(item));

          if (item.rooms) {
            pieces.push(item.rooms.join(', '));
          }

          break;

        default:
          pieces.push(this.firstLine);
          break;
      } // console.log('PIECES', pieces, this);
      ////////////////////////////////


      return lodash.compact(pieces).join('. ');
    }

  }
};

/* script */
const __vue_script__$1L = script$1L;

/* template */
var __vue_render__$1K = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-list-item"},[_c('fluro-realm-bar',{attrs:{"realm":_vm.item.realms}}),_vm._v(" "),_c('div',{staticClass:"item-icon",class:_vm.item._type},[(_vm.item._type == 'persona')?[_c('fluro-avatar',{attrs:{"id":_vm.item._id,"type":"persona"}})]:(_vm.item._type == 'contact')?[_c('fluro-avatar',{attrs:{"id":_vm.item._id,"type":"contact"}})]:(_vm.item._type == 'image')?[_c('fluro-image',{attrs:{"item":_vm.item,"spinner":true,"width":40,"height":40}})]:[_c('fluro-icon',{attrs:{"type":_vm.item._type}})]],2),_vm._v(" "),_c(_vm.linkType,{tag:"component",staticClass:"item-text",attrs:{"to":_vm.to,"target":_vm.target,"href":_vm.href}},[_c('div',[_c('div',{staticClass:"item-title"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"item-subtitle"},[_vm._v(_vm._s(_vm.subtitle))])])]),_vm._v(" "),_vm._t("actions",[(_vm.actionsEnabled)?_c('div',{staticClass:"item-actions",class:{active:_vm.actionsOpen}},[_c('v-menu',{attrs:{"left":true,"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"icon":"","flat":""}},on),[(_vm.actionsOpen)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"ellipsis-v"}})],1)]}}],null,false,2747980089),model:{value:(_vm.actionsOpen),callback:function ($$v) {_vm.actionsOpen=$$v;},expression:"actionsOpen"}},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.availableActions),function(action){return _c('v-list-tile',{on:{"click":action.click}},[_c('v-list-tile-content',[_vm._v(_vm._s(action.title))])],1)}),1)],1)],1):_vm._e()])],2)};
var __vue_staticRenderFns__$1K = [];

  /* style */
  const __vue_inject_styles__$1L = function (inject) {
    if (!inject) return
    inject("data-v-c4be6a9e_0", { source: ".border-top[data-v-c4be6a9e]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-c4be6a9e]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-c4be6a9e]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-c4be6a9e]{border-left:1px solid rgba(0,0,0,.05)}.fluro-list-item[data-v-c4be6a9e]{display:flex;overflow:hidden;position:relative;background:#fff;user-select:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none}.fluro-list-item .item-actions[data-v-c4be6a9e]{opacity:0}.fluro-list-item .item-actions.active[data-v-c4be6a9e]{opacity:1}.fluro-list-item:hover .item-actions[data-v-c4be6a9e]{opacity:1}@media (max-width:768px){.fluro-list-item .item-actions[data-v-c4be6a9e]{opacity:1}}.fluro-list-item[data-v-c4be6a9e]:last-of-type{border-bottom:none}.fluro-list-item.bordered[data-v-c4be6a9e],.fluro-list-item[bordered][data-v-c4be6a9e]{border-top:1px solid rgba(0,0,0,.1);border-left:1px solid rgba(0,0,0,.1);border-right:1px solid rgba(0,0,0,.1)}.fluro-list-item.bordered[data-v-c4be6a9e]:first-of-type,.fluro-list-item[bordered][data-v-c4be6a9e]:first-of-type{border-top-left-radius:3px;border-top-right-radius:3px}.fluro-list-item.bordered[data-v-c4be6a9e]:last-of-type,.fluro-list-item[bordered][data-v-c4be6a9e]:last-of-type{border-bottom-left-radius:3px;border-bottom-right-radius:3px;border-bottom:1px solid rgba(0,0,0,.1)}.fluro-list-item .realm-bar[data-v-c4be6a9e]{width:5px;position:absolute;left:0;top:0;bottom:0}.fluro-list-item .handle[data-v-c4be6a9e]{flex:none;display:flex;align-items:center;justify-content:center;padding:0 5px;text-align:center;line-height:50px;opacity:.3}.fluro-list-item .handle[data-v-c4be6a9e]:hover{opacity:1}.fluro-list-item .item-icon[data-v-c4be6a9e]{flex:none;text-align:center;padding:5px;width:50px;display:flex;justify-content:center;align-items:center}.fluro-list-item .item-icon.image[data-v-c4be6a9e]{padding:0 10px}.fluro-list-item .item-text[data-v-c4be6a9e]{flex:1;align-items:center;padding:8px 15px;color:inherit;display:flex;text-decoration:none}.fluro-list-item .item-text .item-subtitle[data-v-c4be6a9e]{font-size:.8em;opacity:.5}.fluro-list-item .item-actions[data-v-c4be6a9e]{flex:none;padding:5px;display:flex;align-items:center}.fluro-list-item .item-actions .v-btn[data-v-c4be6a9e]{margin:0}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1L = "data-v-c4be6a9e";
  /* module identifier */
  const __vue_module_identifier__$1L = undefined;
  /* functional template */
  const __vue_is_functional_template__$1L = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1K = normalizeComponent(
    { render: __vue_render__$1K, staticRenderFns: __vue_staticRenderFns__$1K },
    __vue_inject_styles__$1L,
    __vue_script__$1L,
    __vue_scope_id__$1L,
    __vue_is_functional_template__$1L,
    __vue_module_identifier__$1L,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1M = {
  props: {
    options: {
      type: Object
    }
  },
  components: {
    FluroTabset: __vue_component__$c,
    FluroTab: __vue_component__$b
  },
  mixins: [FluroModalMixin],

  data() {
    return {
      selector: this.options.selector
    };
  } // methods: {
  //     isSelected(item) {
  //         return this.selector.isSelected(item);
  //     },
  //     toggleRealm(item) {
  //         return this.selector.toggleRealm(item);
  //     },
  // },
  // computed: {
  //     title() {
  //         var self = this;
  //         var plural = 'Realms';
  //         if(self.tree.length == 1) {
  //             plural  = self.tree[0].plural;
  //         } 
  //         return `Select ${plural}`;
  //     },
  //     selection() {
  //         return this.selector.selection;
  //     },
  //     tree() {
  //         return this.selector.tree;
  //     },
  //     loading() {
  //         return this.selector.loading;
  //     },
  //     ids() {
  //         return this.$fluro.utils.arrayIDs(this.options.items);
  //     },
  // },


};

/* script */
const __vue_script__$1M = script$1M;

/* template */
var __vue_render__$1L = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div')};
var __vue_staticRenderFns__$1L = [];

  /* style */
  const __vue_inject_styles__$1M = function (inject) {
    if (!inject) return
    inject("data-v-7a58334d_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1M = undefined;
  /* module identifier */
  const __vue_module_identifier__$1M = undefined;
  /* functional template */
  const __vue_is_functional_template__$1M = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1L = normalizeComponent(
    { render: __vue_render__$1L, staticRenderFns: __vue_staticRenderFns__$1L },
    __vue_inject_styles__$1M,
    __vue_script__$1M,
    __vue_scope_id__$1M,
    __vue_is_functional_template__$1M,
    __vue_module_identifier__$1M,
    false,
    createInjector,
    undefined,
    undefined
  );

//

var script$1N = {
  asyncComputed: {
    tagDefinitions: {
      default: [],

      get() {
        var self = this;
        return self.$fluro.types.subTypes('tag');
      }

    }
  },
  computed: {
    tagGroups() {
      var self = this; ////////////////////////////////////////////////////

      var allSets = lodash.reduce(self.tagDefinitions, function (set, definition) {
        set[definition.definitionName] = {
          title: definition.title,
          tags: [],
          key: definition.definitionName
        };
        return set;
      }, {
        tag: {
          title: 'Tags',
          tags: [],
          key: 'tag'
        }
      }); ////////////////////////////////////////////////////


      return lodash.chain(this.model).reduce(function (set, tag) {
        var tagType = tag.definition || 'tag';
        var existingGroup = set[tagType];

        if (!existingGroup) {
          existingGroup = set[tagType] = {
            title: self.$fluro.types.readable(tagType, true),
            tags: []
          };
        }

        existingGroup.tags.push(tag);
        return set;
      }, allSets).values().value();
    }

  },
  methods: {
    removeTag(tag) {
      var self = this;
      var index = self.model.indexOf(tag);
      self.model.splice(index, 1);
      console.log('Remove', index);
    }

  },
  components: {
    FluroContentSelectButton: __vue_component__$F // FluroRealmSelectItem,
    // FluroRealmDots,

  },
  props: {
    small: {
      type: Boolean
    },
    block: {
      type: Boolean
    },
    'value': {
      type: Array,
      default: function () {
        return [];
      }
    }
  },

  data() {
    return {
      loading: true,
      model: this.value
    };
  },

  watch: {
    'model': function (val) {
      this.$emit('input', val);
    }
  }
};

/* script */
const __vue_script__$1N = script$1N;

/* template */
var __vue_render__$1M = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tag-select"},[_c('v-menu',{attrs:{"close-on-content-click":false,"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"pill mx-0",attrs:{"small":_vm.small,"block":_vm.block}},on),[_vm._v("\n                "+_vm._s(_vm.model.length ? _vm.model.length : null)),_c('fluro-icon',{attrs:{"right":_vm.model.length > 0,"type":"tag"}})],1)]}}])},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_c('v-container',{staticStyle:{"max-width":"320px"}},_vm._l((_vm.tagGroups),function(group){return _c('v-input',{staticClass:"no-flex"},[_c('v-label',[_vm._v(_vm._s(group.title))]),_vm._v(" "),_c('div',{staticClass:"inline-tags"},_vm._l((group.tags),function(tag){return _c('span',{staticClass:"inline-tag",on:{"click":function($event){return _vm.removeTag(tag)}}},[_vm._v("\n                            "+_vm._s(tag.title)+"\n                            "),_c('fluro-icon',{staticClass:"off",attrs:{"right":"","icon":"tag"}}),_vm._v(" "),_c('fluro-icon',{staticClass:"on",attrs:{"right":"","icon":"times"}})],1)}),0),_vm._v(" "),_c('fluro-content-select-button',{attrs:{"block":"","type":group.key},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)}),1)],1)],1)],1)};
var __vue_staticRenderFns__$1M = [];

  /* style */
  const __vue_inject_styles__$1N = function (inject) {
    if (!inject) return
    inject("data-v-ec35530c_0", { source: ".border-top[data-v-ec35530c]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-ec35530c]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-ec35530c]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-ec35530c]{border-left:1px solid rgba(0,0,0,.05)}.inline-tag[data-v-ec35530c]{cursor:pointer}.inline-tag .on[data-v-ec35530c]{display:none}.inline-tag .off[data-v-ec35530c]{display:inline-block}.inline-tag:hover .off[data-v-ec35530c]{display:none}.inline-tag:hover .on[data-v-ec35530c]{display:inline-block}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1N = "data-v-ec35530c";
  /* module identifier */
  const __vue_module_identifier__$1N = undefined;
  /* functional template */
  const __vue_is_functional_template__$1N = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1M = normalizeComponent(
    { render: __vue_render__$1M, staticRenderFns: __vue_staticRenderFns__$1M },
    __vue_inject_styles__$1N,
    __vue_script__$1N,
    __vue_scope_id__$1N,
    __vue_is_functional_template__$1N,
    __vue_module_identifier__$1N,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
var script$1O = {
  props: {
    'value': {
      type: String
    },
    'text': {
      type: String
    }
  }
};

/* script */
const __vue_script__$1O = script$1O;

/* template */
var __vue_render__$1N = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"status-label",class:_vm.value},[_vm._v(_vm._s(_vm.text || _vm.value))])};
var __vue_staticRenderFns__$1N = [];

  /* style */
  const __vue_inject_styles__$1O = function (inject) {
    if (!inject) return
    inject("data-v-4f1714ba_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.status-label{display:inline-block;text-transform:uppercase;font-weight:600;letter-spacing:.05em;font-size:.6em;padding:2px 5px;line-height:inherit;border-radius:50px;margin:0 2px 2px 2px;background:rgba(0,0,0,.01);color:rgba(0,0,0,.1)}.status-label.draft,.status-label.sandbox,.status-label.scheduled,.status-label.trial,.status-label.warning,.status-label.yellow{background:#fff3b9!important;color:#f0974e!important}.status-label.active,.status-label.click,.status-label.green,.status-label.live,.status-label.open,.status-label.ready,.status-label.success{background:rgba(81,212,50,.2)!important;color:#51d432!important}.status-label.danger,.status-label.red{background:rgba(187,0,16,.2)!important;color:#bb0010!important}.status-label.archived,.status-label.sent,.status-label.unsubscribe{background:rgba(0,0,0,.05)!important;color:rgba(0,0,0,.3)!important}.status-label[right]{float:right}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1O = undefined;
  /* module identifier */
  const __vue_module_identifier__$1O = undefined;
  /* functional template */
  const __vue_is_functional_template__$1O = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1N = normalizeComponent(
    { render: __vue_render__$1N, staticRenderFns: __vue_staticRenderFns__$1N },
    __vue_inject_styles__$1O,
    __vue_script__$1O,
    __vue_scope_id__$1O,
    __vue_is_functional_template__$1O,
    __vue_module_identifier__$1O,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1P = {
  components: {
    FluroStatusLabel: __vue_component__$1N
  },
  props: {
    'value': {
      type: String,

      default() {
        return 'active';
      }

    },
    'type': {
      type: String
    }
  },

  data() {
    return {
      status: this.value
    };
  },

  methods: {
    setStatus(value) {
      this.status = value;
      this.$emit('input', value);
    }

  },
  computed: {
    options() {
      var self = this;
      var array = [];

      switch (self.type) {
        case 'purchase':
          array.push('active');
          array.push('cancelled');
          array.push('expired');
          break;

        case 'account':
          array.push('active');
          array.push('cancelled');
          array.push('onhold');
          array.push('exempt');
          array.push('trial');
          break;

        case 'plan':
          array.push('active');
          array.push('draft');
          array.push('archived');
          array.push('template');
          break;

        default:
          array.push('active');
          array.push('draft');
          array.push('archived');
          break;
      }

      return array;
    }

  }
};

/* script */
const __vue_script__$1P = script$1P;

/* template */
var __vue_render__$1O = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-menu',{attrs:{"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('div',_vm._g({staticClass:"fluro-status-select"},on),[_c('fluro-status-label',{attrs:{"value":_vm.value}})],1)]}}])},[_vm._v(" "),_c('v-card',{attrs:{"tile":""}},[_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.options),function(option){return _c('v-list-tile',{on:{"click":function($event){return _vm.setStatus(option)}}},[_c('v-list-tile-content',[_c('v-list-tile-title',[_vm._v("\n                        "+_vm._s(option)+"\n                    ")])],1)],1)}),1)],1)],1)};
var __vue_staticRenderFns__$1O = [];

  /* style */
  const __vue_inject_styles__$1P = function (inject) {
    if (!inject) return
    inject("data-v-45af1430_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-status-select{display:inline-block;width:100px;height:25px;line-height:25px;margin:0 10px;vertical-align:middle}.fluro-status-select .status-label{margin:0;border-radius:3px;display:block;text-align:center;padding:0;font-size:11px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1P = undefined;
  /* module identifier */
  const __vue_module_identifier__$1P = undefined;
  /* functional template */
  const __vue_is_functional_template__$1P = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1O = normalizeComponent(
    { render: __vue_render__$1O, staticRenderFns: __vue_staticRenderFns__$1O },
    __vue_inject_styles__$1P,
    __vue_script__$1P,
    __vue_scope_id__$1P,
    __vue_is_functional_template__$1P,
    __vue_module_identifier__$1P,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$1Q = {
  props: {
    item: {
      type: [Object, String],
      required: true
    }
  },

  data() {
    return {
      loading: false
    };
  },

  computed: {
    itemID() {
      return this.$fluro.utils.getStringID(this.item);
    },

    dates() {
      // console.log('Get dates')
      return this.$fluro.date.timeline(this.log, 'created');
    }

  },
  asyncComputed: {
    log: {
      default: [],

      get() {
        var self = this;
        self.loading = true; // console.log('load changelog')

        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/log?item=${self.itemID}`).then(function (res) {
            // console.log('Got change log', res.data)
            resolve(res.data);
            self.loading = false;
          }).catch(reject);
        });
      }

    }
  }
};

/* script */
const __vue_script__$1Q = script$1Q;

/* template */
var __vue_render__$1P = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"log-viewer",staticStyle:{"background":"#fff"}},[_c('flex-column-header',[_c('v-container',{staticClass:"border-bottom",attrs:{"pa-1":""}},[_c('strong',[_vm._v("Historical Change Log")])])],1),_vm._v(" "),_c('flex-column-body',[(_vm.loading)?_c('v-container',{staticClass:"text-xs-center"},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1):_c('div',{staticClass:"timeline"},_vm._l((_vm.dates),function(year){return _c('div',{staticClass:"year"},[_c('div',{staticClass:"year-label"},[_vm._v(_vm._s(_vm._f("formatDate")(year.date,'YYYY')))]),_vm._v(" "),_vm._l((year.months),function(month){return _c('div',{staticClass:"month"},[_c('div',{staticClass:"month-label"},[_vm._v(_vm._s(_vm._f("formatDate")(month.date,'MMM')))]),_vm._v(" "),_vm._l((month.days),function(day){return _c('div',{staticClass:"day"},[_c('div',{staticClass:"day-label"},[_vm._v(_vm._s(_vm._f("formatDate")(day.date,'ddd D')))]),_vm._v(" "),_c('div',{staticClass:"entries"},_vm._l((day.items),function(entry){return _c('div',{key:entry._id,staticClass:"entry",on:{"click":function($event){return _vm.$fluro.global.json(entry.data, {title:entry.message, depth:5})}}},[_c('v-layout',[_c('v-flex',{staticClass:"pr-1",attrs:{"shrink":""}},[(entry.managedUser)?_c('fluro-avatar',{attrs:{"id":entry.managedUser,"type":"persona"}}):_vm._e(),_vm._v(" "),(entry.user)?_c('fluro-avatar',{attrs:{"id":entry.user,"type":"user"}}):_vm._e()],1),_vm._v(" "),_c('v-flex',[_c('strong',[_vm._v(_vm._s(entry.message))]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(entry.key)+" - "+_vm._s(entry.managedUser ? entry.managedUser.title : ''))])]),_vm._v(" "),_c('v-flex',{staticClass:"sm muted",attrs:{"shrink":""}},[_vm._v("\n                                        "+_vm._s(_vm._f("formatDate")(entry.created,'h:mma'))+"\n                                    ")])],1)],1)}),0)])})],2)})],2)}),0)],1)],1)};
var __vue_staticRenderFns__$1P = [];

  /* style */
  const __vue_inject_styles__$1Q = function (inject) {
    if (!inject) return
    inject("data-v-3c8fc5cf_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.log-viewer{max-width:500px;max-height:70vh}.log-viewer .timeline{background:#f4f4f4;padding-right:10px}.log-viewer .timeline .year{border-left:1px solid rgba(0,0,0,.1)}.log-viewer .timeline .year-label{font-weight:500;text-transform:uppercase;display:block;padding:5px 10px;font-size:1.4em;background:rgba(0,0,0,.1)}.log-viewer .timeline .month{border-top:1px solid rgba(0,0,0,.1)}.log-viewer .timeline .month-label{font-weight:500;text-transform:uppercase;display:block;padding:1px 10px;font-size:15px;margin:10px 0;color:rgba(0,0,0,.8)}.log-viewer .timeline .day{display:flex;margin-top:10px}.log-viewer .timeline .day-label{font-weight:600;font-size:10px;text-transform:uppercase;padding:5px 10px;border-top:1px solid rgba(0,0,0,.1);width:60px;white-space:nowrap;color:rgba(0,0,0,.3)}.log-viewer .timeline .entries{position:relative;top:-10px;background:#fff;box-shadow:0 1px 1px rgba(0,0,0,.1);flex:1;margin-bottom:15px}.log-viewer .timeline .entry{padding:8px;font-size:11px;background:#fff;border-top:1px solid rgba(0,0,0,.1);min-width:320px;cursor:pointer}.log-viewer .timeline .entry:hover{background:#fafafa}.log-viewer .timeline .entry:first-child{border-top:none}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1Q = undefined;
  /* module identifier */
  const __vue_module_identifier__$1Q = undefined;
  /* functional template */
  const __vue_is_functional_template__$1Q = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1P = normalizeComponent(
    { render: __vue_render__$1P, staticRenderFns: __vue_staticRenderFns__$1P },
    __vue_inject_styles__$1Q,
    __vue_script__$1Q,
    __vue_scope_id__$1Q,
    __vue_is_functional_template__$1Q,
    __vue_module_identifier__$1Q,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1R = {
  props: {
    embedded: {
      type: Boolean
    },
    disableCacheClearOnSave: {
      type: Boolean,

      default() {
        return true;
      }

    },
    context: {
      type: String,
      default: 'create'
    },
    'type': {
      type: String,
      required: true
    },
    'value': {
      type: Object,
      default: function () {
        return {
          realms: [],
          tags: []
        };
      }
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    }
  },

  data() {
    return {
      cacheClearRequired: false,
      file: null,
      model: JSON.parse(JSON.stringify(this.value)),
      serverErrors: '',
      errorMessages: [],
      result: null,
      state: 'ready',
      tagSearch: '',
      loading: true
    };
  },

  created() {
    // this.reset(true);
    var self = this;

    if (self.model && !self.model.data) {
      self.$set(self.model, 'data', {});
    }
  },

  mounted() {
    // console.log('MOUNTED');
    var self = this;
    self.addListeners();
  },

  activated() {
    // console.log('ACTIVATED')
    var self = this;
    self.addListeners();
  },

  deactivated() {
    // console.log('DEACTIVATED')
    var self = this;
    self.removeListeners();
  },

  beforeDestroy() {
    // console.log('DESTROYED')
    var self = this;
    self.removeListeners();
  },

  methods: {
    copyToClipboard(string) {
      var self = this;
      let inputField = this.$refs.clipboard;
      inputField.value = string;
      inputField.setAttribute('type', 'text'); // 不是 hidden 才能複製

      inputField.select();

      try {
        var successful = document.execCommand('copy');
        var msg = successful ? 'successful' : 'unsuccessful'; // alert('Testing code was copied ' + msg);

        self.$fluro.notify('Copied to clipboard');
      } catch (err) {} // alert('Oops, unable to copy');
      // self.$fluro.error({message:'Unable to copy to clipboard'});

      /* unselect the range */


      inputField.setAttribute('type', 'hidden');

      if (process.browser) {
        window.getSelection().removeAllRanges();
      }
    },

    addListeners() {
      // console.log('ADD LISTENERS')
      var self = this;

      if (process.browser) {
        document.addEventListener("keydown", self.keypress, false);
      }
    },

    removeListeners() {
      // console.log('REMOVE LISTENERS')
      var self = this;

      if (process.browser) {
        document.removeEventListener("keydown", self.keypress);
      }
    },

    keypress(e) {
      var self = this;

      if (e.keyCode == 83 && (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)) {
        e.preventDefault();
        self.submit();
      }
    },

    editSuccess(result) {
      var self = this; //Reload the terminology!

      if (result.data._type == 'definition') {
        console.log('Reload glossary');
        self.$fluro.global.reloadTerminology();
      }

      self.state = 'ready';
      self.cacheClearRequired = true;

      if (!self.disableCacheClearOnSave) {
        self.$fluro.resetCache();
      } // self.reset(true);


      self.$emit('success', result.data); // console.log('RESULT WAS', result);
      //Print a success message to the screen

      self.$fluro.notify(`${result.data.title} was updated successfully`);
    },

    editFailed(err) {
      var self = this; // console.log('ERROR MESSAGE HAPPENED')
      //Dispatch an error

      var humanMessage = self.$fluro.utils.errorMessage(err);
      self.$fluro.error(err);
      self.serverErrors = humanMessage;
      self.state = 'error';
      self.$emit('error', err);
    },

    createSuccess(result) {
      var self = this;
      console.log('CREATE SUCCESS', result); //Reload the terminology!

      if (result.data._type == 'definition') {
        console.log('Reload glossary');
        self.$fluro.global.reloadTerminology();
      }

      self.cacheClearRequired = true;
      console.log('CREATE CLEAR?', self.cacheClearRequired, self.disableCacheClearOnSave);

      if (!self.disableCacheClearOnSave) {
        self.$fluro.resetCache();
      }

      self.reset(true);
      self.$emit('success', result.data); // console.log('RESULT WAS', result);
      //Print a success message to the screen

      self.$fluro.notify(`${result.data.title} was created successfully`);
    },

    createFailed(err) {
      var self = this;
      console.log('ERROR MESAGE HAPPEND'); //Dispatch an error

      var humanMessage = self.$fluro.utils.errorMessage(err);
      self.$fluro.error(err);
      self.serverErrors = humanMessage;
      self.state = 'error';
      self.$emit('error', err);
    },

    fileChanged(file) {
      console.log('FILE CHANGE HEARD', file);
      this.file = file;
    },

    updateModel() {
      this.$emit('input', this.model);
    },

    cancel() {
      this.$emit('cancel');
    },

    touch() {
      lodash.each(this.formFields, function (component) {
        component.touch();
      });
    },

    validate() {
      var form = this.$refs.form;

      if (!form) {
        return [];
      }

      this.errorMessages = form.errorMessages || [];
    },

    validateAllFields() {
      var form = this.$refs.form;
      form.touch();
      this.validate();
    },

    reset(suppressEvent) {
      console.log('RESET');
      var self = this; /////////////////////////////////

      self.model = {
        realms: [],
        tags: []
      }; /////////////////////////////////

      if (self.$refs.form) {
        self.$refs.form.reset();
      }

      self.result = null;
      self.state = 'ready';

      if (!suppressEvent) {
        self.$emit('reset');
      }
    },

    preprocessCreateData(data) {
      var self = this; //////////////////////////////////

      switch (self.typeName) {
        case 'process':
          //If it's a card and the card has no title
          if (!data.title || !data.title.length) {
            //But the card refers to an item
            if (data.item && data.item.title && data.item.title.length) {
              //Use the items title for the card title
              data.title = data.item.title;
            }
          }

          break;
      } //////////////////////////////////


      return data;
    },

    isValidDate(d) {
      return d instanceof Date && !isNaN(d);
    },

    autosave() {
      var self = this;

      if (self.state == 'processing') {
        return;
      }

      console.log('AUTOSAVE');
      self.submitUpdate().then(function (res) {
        self.state = 'ready';
      }).catch(function (err) {
        self.state = 'ready';
      });
    },

    submitUpdate() {
      var self = this;
      self.state = 'processing';
      var requestData = Object.assign({}, self.model);
      delete requestData.__v;
      var definedType = requestData.definition || self.definitionName || self.typeName;
      return self.$fluro.api.put(`/content/${definedType}/${requestData._id}`, requestData);
    },

    submit() {
      var self = this;
      self.validateAllFields();

      if (self.hasErrors) {
        console.log('WE HAVE ERRORS', self.errorMessages); // self.$notify()
        //Gotta finish the stuff first!

        return;
      }

      self.state = 'processing'; /////////////////////////////////

      var requestData = Object.assign({}, self.model);
      delete requestData.__v;
      var definedType = requestData.definition || self.definitionName || self.typeName; // requestData.realms = self.realms;
      // requestData.tags = self.tags;
      /////////////////////////////////

      var context = self.context;

      if (requestData._id) {
        context = 'edit';
      }

      if (self.typeName == 'attendance' && (!requestData.title || !requestData.title.length)) {
        requestData.title = `${requestData.event.title} headcount`;
      }

      console.log('SENDING TO SERVER', context, self.model);

      switch (context) {
        case 'edit':
          self.submitUpdate().then(self.editSuccess).catch(self.editFailed);
          break;

        default:
          //Preprocess our create request
          requestData = self.preprocessCreateData(requestData);

          if (self.uploadForSave) {
            var file = self.file;

            if (!file) {
              // console.log('SELF UPDATE CREATE', requestData);
              self.$fluro.notify(`Please select a file to upload`);
              self.state = 'ready';
              return;
            }

            var REPLACEMENT_UPLOAD_URL = '/file/upload'; //If the file is uploaded with an external integration

            if (requestData.externalIntegration) {
              var externalIntegrationID = requestData.externalIntegration;

              if (externalIntegrationID._id) {
                externalIntegrationID = externalIntegrationID._id;
              }

              REPLACEMENT_UPLOAD_URL = `/file/integration/upload/${externalIntegrationID}`;
            } /////////////////////////////////////////////
            //Change the state to uploading


            file.state = 'uploading'; //Create a new form object

            var formData = new FormData();
            formData.append('json', JSON.stringify(requestData));
            formData.append('file', file.file, file.name);
            var body = formData;
            var requestConfig = {
              headers: {
                'Content-Type': 'multipart/form-data'
              } // onUploadProgress: progressEvent => {
              //     let percentCompleted = Math.floor((progressEvent.loaded * 100) / progressEvent.total);
              //     // do whatever you like with the percentage complete
              //     // maybe dispatch an action that will update a progress bar or something
              //     file.progress = percentCompleted;
              //     file.bytesLoaded = progressEvent.loaded;
              //     file.bytesTotal = progressEvent.total;
              //     ///////////////////////////////////////////////////
              //     //Update the bytes loaded from all the files in the array
              //     self.bytesLoaded = _.reduce(self.files, function(set, file) {
              //         if (file.state == 'complete') {
              //             set += file.size || file.bytesTotal || 0;
              //         } else {
              //             set += file.bytesLoaded || 0;
              //         }
              //         return set;
              //     }, 0)
              //     ///////////////////////////////////////////////////
              //     self.$forceUpdate();
              // }

            }; //////////////////////////////////////////////////////////////
            //Create a new item

            return self.$fluro.api.post(REPLACEMENT_UPLOAD_URL, body, requestConfig).then(self.createSuccess).catch(self.createFailed);
          } //////////////////////////////////////////////////////////////


          if (definedType == 'family') {
            //Create a new item
            self.$fluro.api.post(`/family`, requestData).then(self.createSuccess).catch(self.createFailed);
          } else {
            //Create a new item
            self.$fluro.api.post(`/content/${definedType}`, requestData).then(self.createSuccess).catch(self.createFailed);
          }

          break;
      }
    }

  },
  computed: {
    canChangeStatus() {
      switch (this.typeName) {
        case 'persona':
        case 'realm':
        case 'transaction':
          break;

        default:
          return true;
      }
    },

    // changeString() {
    //     return JSON.stringify(this.model);
    // },
    showFooter() {
      return !this.hideFooter;
    },

    hideFooter() {
      var self = this;
      return self.typeName == 'definition';
    },

    summary() {
      var self = this;

      switch (self.typeName) {
        case 'event':
          return self.$fluro.date.readableEventDate(self.model);

        case 'plan':
          var hasEvent = lodash.get(self.model, 'event.title');

          var planStartDate = lodash.get(self.model, 'startDate'); ///////////////////////////////////////


          var readableStartDate;

          if (hasEvent) {
            readableStartDate = self.$fluro.date.readableEventDate(self.model.event);
            return readableStartDate ? `${readableStartDate} - ${self.model.event.title}` : undefined;
          } else if (planStartDate) {
            readableStartDate = self.$fluro.date.formatDate(planStartDate, 'h:mm ddd D MMM');
            return readableStartDate ? readableStartDate : undefined;
          }

          break;
      }
    },

    clickTitleEdit() {
      var self = this;

      switch (self.typeName) {
        case 'contact':
          return false;

        default:
          return true;
      }
    },

    uploadForSave() {
      var self = this;
      return !self.model._id && self.model.assetType == 'upload';
    },

    saveText() {
      var self = this;

      if (self.uploadForSave) {
        return 'Upload';
      } else {
        return 'Save';
      }
    },

    enableAutomationDates() {
      switch (this.config.type.definitionName) {
        case 'article':
        case 'asset':
        case 'audio':
        case 'video':
        case 'image':
        case 'code':
        case 'collection':
        case 'team':
        case 'post':
        case 'product':
        case 'event':
          return true;
      }
    },

    publishDateHint() {
      if (this.model.publishDate && this.isValidDate(this.model.publishDate)) {
        return `Change status to 'active' ${this.$filters.timeago(this.model.publishDate)}`;
      }
    },

    archiveDateHint() {
      if (this.model.archiveDate && this.isValidDate(this.model.archiveDate)) {
        return `Change status to 'archived' ${this.$filters.timeago(this.model.archiveDate)}`;
      }
    },

    extraFields() {
      var fields = {};
      fields.inheritable = {
        title: 'Inheritable',
        description: 'Allow child accounts to reference and use this content',
        minimum: 0,
        maximum: 1,
        type: 'boolean',
        key: 'inheritable',
        expressions: {
          hide() {
            switch (this.typeName) {
              case 'contact':
              case 'family':
                return true;
            }
          }

        } // directive: 'datetimepicker',

      };
      fields.slug = {
        title: 'Slug / Readable ID',
        description: 'A readable id that can be used for website urls and paths',
        minimum: 0,
        maximum: 1,
        type: 'string',
        key: 'slug',
        expressions: {
          hide() {
            switch (this.typeName) {
              case 'contact':
              case 'family':
                return true;
            }
          }

        } // directive: 'datetimepicker',

      };
      fields.archiveDate = {
        // title: `Archive Date`,
        minimum: 0,
        maximum: 1,
        type: 'date',
        key: 'archiveDate',
        directive: 'datetimepicker'
      };
      fields.publishDate = {
        // title: `Publish Date`,
        minimum: 0,
        maximum: 1,
        type: 'date',
        key: 'publishDate',
        directive: 'datetimepicker'
      };
      fields.createdDate = {
        title: `Creation Date`,
        minimum: 0,
        maximum: 1,
        type: 'date',
        key: 'created',
        directive: 'datetimepicker'
      };
      return fields;
    },

    showLoading() {
      return !this.config || this.loading || !this.component;
    },

    title() {
      if (this.model.title) {
        return this.model.title;
      }

      return 'New';
    },

    definition() {
      return this.config.definition;
    },

    typeConfig() {
      if (!this.config) {
        return;
      }

      return this.config.type;
    },

    definitionTitle() {
      return this.definition ? this.definition.title : this.typeConfig.title;
    },

    typeName() {
      if (!this.typeConfig) {
        return;
      }

      return this.typeConfig.definitionName;
    },

    definitionName() {
      return this.definition ? this.definition.definitionName : ''; //this.typeConfig.definitionName;
    },

    hasErrors() {
      return this.errorMessages.length ? true : false;
    }

  },
  components: {
    // Contact,
    FluroTagSelect: __vue_component__$1M,
    FluroRealmSelect: __vue_component__$t,
    FluroStatusSelect: __vue_component__$1O,
    FluroInlineEdit: __vue_component__$L,
    FluroContentFormField: __vue_component__$G,
    Changelog: __vue_component__$1P
  },
  asyncComputed: {
    component: {
      default: null,

      get() {
        var self = this;

        if (!self.typeName) {
          return Promise.resolve();
        }

        switch (self.typeName) {
          case 'academic':
            return service.load('src/components/content/edit/panels/academic.vue', function () {
              return import('./academic-42e9c019.js');
            });

          case 'application':
            return service.load('src/components/content/edit/panels/application.vue', function () {
              return import('./application-92d53507.js');
            });

          case 'article':
            return service.load('src/components/content/edit/panels/article.vue', function () {
              return import('./article-98cd3537.js');
            });

          case 'asset':
            return service.load('src/components/content/edit/panels/asset.vue', function () {
              return import('./asset-4af48cba.js');
            });

          case 'attendance':
            return service.load('src/components/content/edit/panels/attendance.vue', function () {
              return import('./attendance-39489159.js');
            });

          case 'audio':
            return service.load('src/components/content/edit/panels/audio.vue', function () {
              return import('./audio-e0d76c4b.js');
            });

          case 'capability':
            return service.load('src/components/content/edit/panels/capability.vue', function () {
              return import('./capability-41483a12.js');
            });

          case 'checkin':
            return service.load('src/components/content/edit/panels/checkin.vue', function () {
              return import('./checkin-685d64a1.js');
            });

          case 'code':
            return service.load('src/components/content/edit/panels/code.vue', function () {
              return import('./code-29dea7a4.js');
            });

          case 'collection':
            return service.load('src/components/content/edit/panels/collection.vue', function () {
              return import('./collection-f276f735.js');
            });

          case 'component':
            return service.load('src/components/content/edit/panels/component.vue', function () {
              return import('./component-4244ef27.js');
            });

          case 'contact':
            return service.load('src/components/content/edit/panels/contact.vue', function () {
              return import('./contact-03e7e33e.js');
            });

          case 'contactdetail':
            return service.load('src/components/content/edit/panels/contactdetail.vue', function () {
              return import('./contactdetail-ef568c2a.js');
            });

          case 'definition':
            return service.load('src/components/content/edit/panels/definition.vue', function () {
              return import('./definition-7a7f0916.js');
            });

          case 'event':
            return service.load('src/components/content/edit/panels/event.vue', function () {
              return import('./event-27e485da.js');
            });

          case 'eventtrack':
            return service.load('src/components/content/edit/panels/eventtrack.vue', function () {
              return import('./eventtrack-90273ca9.js');
            });

          case 'family':
            return service.load('src/components/content/edit/panels/family.vue', function () {
              return import('./family-8813da07.js');
            });

          case 'image':
            return service.load('src/components/content/edit/panels/image.vue', function () {
              return import('./image-04e370d1.js');
            });

          case 'integration':
            return service.load('src/components/content/edit/panels/integration.vue', function () {
              return import('./integration-5b1422b5.js');
            });

          case 'location':
            return service.load('src/components/content/edit/panels/location.vue', function () {
              return import('./location-49bed3f9.js');
            });

          case 'mailout':
            return service.load('src/components/content/edit/panels/mailout.vue', function () {
              return import('./mailout-ea600d66.js');
            });

          case 'persona':
            return service.load('src/components/content/edit/panels/persona.vue', function () {
              return import('./persona-08c68d91.js');
            });

          case 'plan':
            return service.load('src/components/content/edit/panels/plan.vue', function () {
              return import('./plan-2eea2d04.js');
            });

          case 'policy':
            return service.load('src/components/content/edit/panels/policy.vue', function () {
              return import('./policy-56b2e920.js');
            });

          case 'post':
            return service.load('src/components/content/edit/panels/post.vue', function () {
              return import('./post-87e0298f.js');
            });

          case 'process':
            return service.load('src/components/content/edit/panels/process.vue', function () {
              return import('./process-48873111.js');
            });

          case 'query':
            return service.load('src/components/content/edit/panels/query.vue', function () {
              return import('./query-9893ca58.js');
            });

          case 'realm':
            return service.load('src/components/content/edit/panels/realm.vue', function () {
              return import('./realm-2df46f11.js');
            });

          case 'role':
            return service.load('src/components/content/edit/panels/role.vue', function () {
              return import('./role-ad5480f5.js');
            });

          case 'roster':
            return service.load('src/components/content/edit/panels/roster.vue', function () {
              return import('./roster-2c164f4d.js');
            });

          case 'tag':
            return service.load('src/components/content/edit/panels/tag.vue', function () {
              return import('./tag-10db5c86.js');
            });

          case 'team':
            return service.load('src/components/content/edit/panels/team.vue', function () {
              return import('./team-cba84577.js');
            });

          case 'ticket':
            return service.load('src/components/content/edit/panels/ticket.vue', function () {
              return import('./ticket-4d667ebd.js');
            });

          case 'timetrigger':
            return service.load('src/components/content/edit/panels/timetrigger.vue', function () {
              return import('./timetrigger-c80f0f33.js');
            });

          case 'video':
            return service.load('src/components/content/edit/panels/video.vue', function () {
              return import('./video-5e36a6ee.js');
            });
        }

        return Promise.resolve();
      }

    },
    config: {
      default: null,

      get() {
        var self = this; // console.log('TYPE IS', self.type);
        //////////////////////////////////////////////

        if (!self.type || !self.type.length) {
          console.log('NO CONFIG LOADED'); // self.loading = false;

          return Promise.reject({});
        }

        self.loading = true; //////////////////////////////////////////////

        return new Promise(function (resolve, reject) {
          var promise = self.$fluro.api.get(`/defined/type/${self.type}`);
          promise.then(function (res) {
            // console.log('RESO', res);
            resolve(res.data); // console.log('CONFIG LOADED', res.data);

            self.loading = false;
          });
          promise.catch(function (err) {
            self.$fluro.error(err); // // console.log('ERROR', err.response);
            // if (err.response.status === 404) {
            //     console.log('RESOLVE THE 404')
            //     return resolve(null);
            // }

            return reject(err);
          });
        }); // .then(function(res) {
        //     console.log('RESI', res);
        // })
        // .catch(function(err) {
        //     console.log('ERRESI', err);
        // })
      }

    }
  },
  watch: {
    // 'changeString': _.debounce(function(newModel, oldModel) {
    //     if (!oldModel) {
    //         console.log('no old model')
    //         return;
    //     }
    //     console.log('MODEL SAVED', oldModel)
    //     this.autosave();
    // }, 1000),
    value() {
      this.model = this.value; //JSON.parse(JSON.stringify(this.value));
    } // 'model': {
    //     handler: function(val, oldVal) {
    //         // console.log('MODEL CHANGED', val);
    //         this.$emit('input', val);
    //     },
    //     deep: true,
    // }


  }
};

/* script */
const __vue_script__$1R = script$1R;

/* template */
var __vue_render__$1Q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"content-edit"},[(_vm.showLoading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):[_c('form',{staticClass:"flex-column",attrs:{"disabled":_vm.state == 'processing'},on:{"submit":function($event){$event.preventDefault();}}},[(_vm.$vuetify.breakpoint.smAndUp)?_c('flex-column-header',[(_vm.state == 'error')?[_c('v-alert',{staticStyle:{"margin":"0"},attrs:{"value":true,"type":"error"},nativeOn:{"click":function($event){$event.preventDefault();_vm.state = 'ready';}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.serverErrors)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:_vm._e()],2):_vm._e(),_vm._v(" "),_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":_vm.typeName},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('fluro-inline-edit',{attrs:{"enabled":_vm.clickTitleEdit},scopedSlots:_vm._u([{key:"default",fn:function(){return [_c('h3',[_vm._v(_vm._s(_vm.title)+" "),_c('span',{staticClass:"small text-muted"},[_vm._v(_vm._s(_vm.definitionTitle))])]),_vm._v(" "),(_vm.summary)?_c('v-label',[_vm._v(_vm._s(_vm.summary))]):_vm._e()]},proxy:true},{key:"edit",fn:function(ref){
var props = ref.props;
var blur = ref.blur;
var focus = ref.focus;
return [_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.title),expression:"model.title"}],attrs:{"block":""},domProps:{"value":(_vm.model.title)},on:{"focus":function($event){return focus($event)},"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return blur($event)},"blur":blur,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.model, "title", $event.target.value);}}})]}}])})]},proxy:true},{key:"right",fn:function(){return [(_vm.typeName != 'realm')?_c('fluro-realm-select',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"content":("Select where this " + _vm.definitionTitle + " should be stored"),"type":_vm.typeName,"definition":_vm.definitionName},model:{value:(_vm.model.realms),callback:function ($$v) {_vm.$set(_vm.model, "realms", $$v);},expression:"model.realms"}}):_vm._e(),_vm._v(" "),(_vm.typeName != 'tag')?_c('fluro-tag-select',{staticClass:"mx-0 ml-2",model:{value:(_vm.model.tags),callback:function ($$v) {_vm.$set(_vm.model, "tags", $$v);},expression:"model.tags"}}):_vm._e(),_vm._v(" "),(_vm.model._id)?_c('v-btn',{staticClass:"mx-0 ml-2",on:{"click":function($event){return _vm.$actions.open([_vm.model])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1):_vm._e(),_vm._v(" "),(!_vm.embedded)?_c('v-btn',{staticClass:"mx-0 ml-2",on:{"click":_vm.cancel}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e(),_vm._v(" "),_c('v-btn',{staticClass:"mx-0 ml-2",attrs:{"loading":_vm.state == 'processing',"disabled":_vm.hasErrors,"color":"primary"},on:{"click":_vm.submit}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.saveText)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]},proxy:true}])})],1),_vm._v(" "),(_vm.component)?_c(_vm.component,{ref:"form",tag:"component",attrs:{"context":_vm.context,"type":_vm.typeConfig,"config":_vm.config,"definition":_vm.definition},on:{"errorMessages":_vm.validate,"input":_vm.updateModel,"file":_vm.fileChanged},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}):_vm._e(),_vm._v(" "),(_vm.showFooter)?[(_vm.$vuetify.breakpoint.xsOnly)?[_c('flex-column-footer',[(_vm.state == 'error')?[_c('v-alert',{staticStyle:{"margin":"0"},attrs:{"value":true,"type":"error"},nativeOn:{"click":function($event){$event.preventDefault();_vm.state = 'ready';}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.serverErrors)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])]:_vm._e()],2),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"py-0":"","px-1":""}},[_c('fluro-realm-select',{attrs:{"block":"","type":_vm.typeName,"definition":_vm.definitionName},model:{value:(_vm.model.realms),callback:function ($$v) {_vm.$set(_vm.model, "realms", $$v);},expression:"model.realms"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"py-0":"","px-1":""}},[_c('v-layout',[_c('v-flex',[_c('v-btn',{attrs:{"block":""},on:{"click":_vm.cancel}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',[_c('v-btn',{staticClass:"mr-0",attrs:{"block":"","loading":_vm.state == 'processing',"disabled":_vm.hasErrors,"color":"primary"},on:{"click":_vm.submit}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.saveText)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],1)],1)],1)],1)]:[_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"fluid":"","pa-1":""}},[_c('v-layout',{attrs:{"row":"","align-center":""}},[(_vm.model._id)?[_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"close-on-content-click":false,"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"my-0",attrs:{"content":"Metadata Options","small":"","icon":"","flat":""}},on),[_c('fluro-icon',{attrs:{"library":"fas","icon":"info"}})],1)]}}],null,false,2964907650)},[_vm._v(" "),_c('v-container',{staticStyle:{"background":"#fff"},attrs:{"pa-2":"","grid-list-xl":""}},[_c('fluro-content-form-field',{attrs:{"field":_vm.extraFields.inheritable},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('fluro-content-form-field',{attrs:{"field":_vm.extraFields.slug},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1),_vm._v(" "),_c('v-container',{staticClass:"white-background",attrs:{"pa-2":""}},[(_vm.model._id)?[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Fluro ID"}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"small":"","block":"","content":"Click to copy to clipboard"},on:{"click":function($event){return _vm.copyToClipboard(_vm.model._id)}}},[_vm._v(_vm._s(_vm.model._id))])],1)]:_vm._e(),_vm._v(" "),(_vm.model._external)?[_c('v-input',{staticClass:"no-flex",attrs:{"label":"External ID"}},[_c('v-btn',{directives:[{name:"tippy",rawName:"v-tippy"}],attrs:{"small":"","block":"","content":"Click to copy to clipboard"},on:{"click":function($event){return _vm.copyToClipboard(_vm.model._external)}}},[_vm._v(_vm._s(_vm.model._external))])],1)]:_vm._e(),_vm._v(" "),[_c('v-btn',{attrs:{"block":"","small":""},on:{"click":function($event){return _vm.$fluro.global.json(_vm.model)}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView JSON\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('fluro-icon',{attrs:{"right":"","icon":"brackets-curly"}})],1)],_vm._v(" "),_c('input',{ref:"clipboard",attrs:{"type":"hidden"}})],2)],1)],1)]:_vm._e(),_vm._v(" "),(_vm.enableAutomationDates)?[_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"close-on-content-click":false,"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"my-0",attrs:{"content":"Publish/Archive Dates","small":"","icon":"","flat":""}},on),[_c('fluro-icon',{attrs:{"icon":"clock"}})],1)]}}],null,false,672650455)},[_vm._v(" "),_c('v-container',{staticStyle:{"background":"#fff"},attrs:{"grid-list-xl":""}},[_c('v-layout',[_c('v-flex',[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Publish Date","persistent-hint":true,"hint":_vm.publishDateHint}},[_c('fluro-content-form-field',{attrs:{"field":_vm.extraFields.publishDate},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1),_vm._v(" "),_c('v-flex',[_c('v-input',{staticClass:"no-flex",attrs:{"label":"Archive Date","persistent-hint":true,"hint":_vm.archiveDateHint}},[_c('fluro-content-form-field',{attrs:{"field":_vm.extraFields.archiveDate},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1),_vm._v(" "),_c('v-flex',[_c('fluro-content-form-field',{attrs:{"field":_vm.extraFields.createdDate},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1)],1)],1)],1)]:_vm._e(),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[(_vm.model._id)?[_c('em',{staticClass:"muted sm"},[_vm._v("Last updated "+_vm._s(_vm._f("timeago")(_vm.model.updated)))])]:_vm._e(),_vm._v(" "),(_vm.canChangeStatus)?_c('fluro-status-select',{attrs:{"type":_vm.model._type},model:{value:(_vm.model.status),callback:function ($$v) {_vm.$set(_vm.model, "status", $$v);},expression:"model.status"}}):_vm._e()],2),_vm._v(" "),(_vm.model._id)?_c('v-flex',{attrs:{"shrink":""}},[_c('v-menu',{attrs:{"lazy":"","close-on-content-click":false,"offset-y":""},nativeOn:{"click":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"my-0",attrs:{"content":"History and Change log","small":"","icon":"","flat":""}},on),[_c('fluro-icon',{attrs:{"library":"fas","icon":"history"}})],1)]}}],null,false,345657208)},[_vm._v(" "),_c('div',{staticStyle:{"min-width":"320px"}},[_c('changelog',{attrs:{"item":_vm.model}})],1)])],1):_vm._e()],2)],1)],1)]]:_vm._e()],2)]],2)};
var __vue_staticRenderFns__$1Q = [];

  /* style */
  const __vue_inject_styles__$1R = function (inject) {
    if (!inject) return
    inject("data-v-283cc04c_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.modal-inner .content-edit{width:100%;min-width:80vw;min-height:80vh}", map: undefined, media: undefined })
,inject("data-v-283cc04c_1", { source: ".border-top[data-v-283cc04c]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-283cc04c]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-283cc04c]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-283cc04c]{border-left:1px solid rgba(0,0,0,.05)}.settings-popup[data-v-283cc04c]{z-index:100}.white-background[data-v-283cc04c]{background:#fff}.content-edit[data-v-283cc04c]{background:#fafafa}.content-edit[data-v-283cc04c] .tabset-menu{background:#fff}.content-edit[data-v-283cc04c] .tabset-menu a.active{background:#fafafa}.content-edit[data-v-283cc04c] .v-text-field--outline .v-input__control .v-input__slot{border-width:1px!important;border-color:rgba(0,0,0,.3);background:#fff!important;box-shadow:inset 0 1px 3px rgba(0,0,0,.1)!important}.content-edit[data-v-283cc04c] .v-text-field--outline.error--text .v-input__control .v-input__slot,.content-edit[data-v-283cc04c] .v-text-field--outline.success--text .v-input__control .v-input__slot,.content-edit[data-v-283cc04c] .v-text-field--outline.v-input--is-focused .v-input__control .v-input__slot{border-color:currentColor}.content-edit[data-v-283cc04c] .v-label{font-weight:500}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1R = "data-v-283cc04c";
  /* module identifier */
  const __vue_module_identifier__$1R = undefined;
  /* functional template */
  const __vue_is_functional_template__$1R = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1Q = normalizeComponent(
    { render: __vue_render__$1Q, staticRenderFns: __vue_staticRenderFns__$1Q },
    __vue_inject_styles__$1R,
    __vue_script__$1R,
    __vue_scope_id__$1R,
    __vue_is_functional_template__$1R,
    __vue_module_identifier__$1R,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1S = {
  props: {
    embedded: {
      type: Boolean
    },
    'id': {
      type: [String, Object],
      required: true
    },
    'type': {
      type: String,
      required: true
    },
    'definition': {
      type: String
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    }
  },

  data() {
    return {
      loadingConfig: true,
      loadingModel: true
    };
  },

  methods: {
    cancel() {
      this.$emit('cancel');
    },

    edit() {
      this.$fluro.global.edit(this.model);
    }

  },

  created() {
    // this.reset(true);
    if (this.model && !this.model.data) {
      this.$set(this.model, 'data', {});
    }
  },

  computed: {
    summary() {
      var self = this;

      switch (self.type) {
        case 'event':
          return self.$fluro.date.readableEventDate(self.model);

        case 'plan':
          var hasEvent = lodash.get(self.model, 'event.title');

          var planStartDate = lodash.get(self.model, 'startDate'); ///////////////////////////////////////


          var readableStartDate;

          if (hasEvent) {
            readableStartDate = self.$fluro.date.readableEventDate(self.model.event);
            return readableStartDate ? `${readableStartDate} - ${self.model.event.title}` : undefined;
          } else if (planStartDate) {
            readableStartDate = self.$fluro.date.formatDate(planStartDate, 'h:mm ddd D MMM');
            return readableStartDate ? readableStartDate : undefined;
          }

          break;
      }
    },

    typeName() {
      var self = this;
      return self.definition || self.type;
    },

    title() {
      return this.model.title;
    },

    definitionTitle() {
      return this.config.definition ? this.config.definition.title : this.config.type.title;
    },

    // definition() {
    //     return this.config.definition;
    // },
    canEdit() {
      switch (this.type) {
        case 'mailout':
          if (this.model.state == 'sent') {
            return;
          }

          break;
      } ///////////////////////////////////////


      return this.$fluro.access.canEditItem(this.model);
    },

    itemID() {
      return this.$fluro.utils.getStringID(this.id);
    },

    loading() {
      return this.loadingModel || this.loadingConfig;
    }

  },
  asyncComputed: {
    component: {
      default: null,

      get() {
        var self = this;

        if (!self.type) {
          // console.log('No type name yet!')
          return Promise.resolve(null);
        } //////////////////////////////////////////


        switch (self.type) {
          case 'academic':
            break;

          case 'application':
            break;

          case 'article':
            return service.load('src/components/content/view/panels/article.vue', function () {
              return import('./article-daade8a5.js');
            });

          case 'asset':
            return service.load('src/components/content/view/panels/asset.vue', function () {
              return import('./asset-ad4801c0.js');
            });

          case 'attendance':
            break;

          case 'audio':
            break;

          case 'capability':
            break;

          case 'checkin':
            break;

          case 'code':
            break;

          case 'collection':
            return service.load('src/components/content/view/panels/collection.vue', function () {
              return import('./collection-9d8b4eda.js');
            });

          case 'component':
            break;

          case 'contact':
            return service.load('src/components/content/view/panels/contact.vue', function () {
              return import('./contact-c7cb81e4.js');
            });

          case 'contactdetail':
            break;

          case 'definition':
            break;

          case 'event':
            return service.load('src/components/content/view/panels/event.vue', function () {
              return import('./event-a9baba49.js');
            });

          case 'eventtrack':
            break;

          case 'family':
            break;

          case 'image':
            break;

          case 'integration':
            break;

          case 'location':
            break;

          case 'interaction':
            return service.load('src/components/content/view/panels/interaction.vue', function () {
              return import('./interaction-0b6e19a6.js');
            });

          case 'mailout':
            return service.load('src/components/content/view/panels/mailout.vue', function () {
              return import('./mailout-cee6296c.js');
            });

          case 'persona':
            break;

          case 'plan':
            return service.load('src/components/content/view/panels/plan.vue', function () {
              return import('./plan-9848b77b.js');
            });

          case 'policy':
            break;

          case 'post':
            return service.load('src/components/content/view/panels/post.vue', function () {
              return import('./post-02c8bf91.js');
            });

          case 'process':
            break;

          case 'query':
            return service.load('src/components/content/view/panels/query.vue', function () {
              return import('./query-3d53ebb1.js');
            });

          case 'realm':
            break;

          case 'role':
            break;

          case 'roster':
            break;

          case 'tag':
            return service.load('src/components/content/view/panels/tag.vue', function () {
              return import('./tag-322b7ce0.js');
            });

          case 'team':
            break;

          case 'ticket':
            break;

          case 'timetrigger':
            break;

          case 'video':
            return service.load('src/components/content/view/panels/video.vue', function () {
              return import('./video-1d5ef248.js');
            });
        }

        return Promise.resolve(null);
      }

    },
    config: {
      default: null,

      get() {
        var self = this; //////////////////////////////////////////////

        self.loadingConfig = true; //////////////////////////////////////////////

        return new Promise(function (resolve, reject) {
          return self.$fluro.api.get(`/defined/type/${self.typeName}`).then(function (res) {
            resolve(res.data);
            self.loadingConfig = false;
          }, reject);
        });
      }

    },
    model: {
      default: null,

      get() {
        var self = this;
        self.loadingModel = true;
        return new Promise(function (resolve, reject) {
          self.$fluro.content.get(self.itemID, {
            appendContactDetail: 'all',
            appendAssignments: 'all'
          }).then(function (res) {
            if (!res.data) {
              res.data = {};
            }

            resolve(res);
            self.loadingModel = false;
          }).catch(function (err) {
            console.log('Error', err);
            resolve(null);
            self.loadingModel = false;
          });
        });
      }

    }
  }
};

/* script */
const __vue_script__$1S = script$1S;

/* template */
var __vue_render__$1R = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"content-view"},[(_vm.loading)?_c('fluro-page-preloader',{attrs:{"contain":""}}):(_vm.model)?[_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":_vm.type},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('div',[_c('h3',[_vm._v(_vm._s(_vm.title)+" "),_c('span',{staticClass:"small text-muted"},[_vm._v(_vm._s(_vm.definitionTitle))])]),_vm._v(" "),(_vm.summary)?_c('v-label',[_vm._v(_vm._s(_vm.summary))]):_vm._e()],1)]},proxy:true},{key:"right",fn:function(){return [(_vm.model._id)?_c('v-btn',{staticClass:"mr-0",attrs:{"icon":"","small":""},on:{"click":function($event){return _vm.$actions.open([_vm.model])}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1):_vm._e(),_vm._v(" "),(_vm.embedded)?[(_vm.canEdit)?_c('v-btn',{attrs:{"icon":""},on:{"click":_vm.edit}},[_c('fluro-icon',{attrs:{"icon":"pencil"}})],1):_vm._e()]:[_c('v-btn',{on:{"click":_vm.cancel}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),(_vm.canEdit)?_c('v-btn',{staticClass:"mx-0",attrs:{"color":"primary"},on:{"click":_vm.edit}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")]):_vm._e()]]},proxy:true}])})],1),_vm._v(" "),(_vm.component)?_c(_vm.component,{tag:"component",attrs:{"item":_vm.model,"config":_vm.config}}):_vm._e()]:_vm._e()],2)};
var __vue_staticRenderFns__$1R = [];

  /* style */
  const __vue_inject_styles__$1S = function (inject) {
    if (!inject) return
    inject("data-v-4a888763_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined })
,inject("data-v-4a888763_1", { source: ".border-top[data-v-4a888763]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-4a888763]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-4a888763]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-4a888763]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1S = "data-v-4a888763";
  /* module identifier */
  const __vue_module_identifier__$1S = undefined;
  /* functional template */
  const __vue_is_functional_template__$1S = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1R = normalizeComponent(
    { render: __vue_render__$1R, staticRenderFns: __vue_staticRenderFns__$1R },
    __vue_inject_styles__$1S,
    __vue_script__$1S,
    __vue_scope_id__$1S,
    __vue_is_functional_template__$1S,
    __vue_module_identifier__$1S,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1T = {
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin],

  data() {
    return {
      flipped: false
    };
  },

  computed: {
    instructions() {
      return this.task.instructions || {};
    },

    pendingEnabled() {
      return !this.instructions.pendingDisabled;
    },

    failedEnabled() {
      return !this.instructions.failedDisabled;
    },

    completeLabel() {
      return this.instructions.completeLabel && this.instructions.completeLabel.length ? this.instructions.completeLabel : 'Complete';
    },

    pendingLabel() {
      return this.instructions.pendingLabel && this.instructions.pendingLabel.length ? this.instructions.pendingLabel : 'In Progress';
    },

    failedLabel() {
      return this.instructions.failedLabel && this.instructions.failedLabel.length ? this.instructions.failedLabel : 'Failed';
    },

    completeDescription() {
      return this.instructions.completeDescription && this.instructions.completeDescription.length ? this.instructions.completeDescription : '';
    },

    pendingDescription() {
      return this.instructions.pendingDescription && this.instructions.pendingDescription.length ? this.instructions.pendingDescription : '';
    },

    failedDescription() {
      return this.instructions.failedDescription && this.instructions.failedDescription.length ? this.instructions.failedDescription : '';
    },

    task() {
      return this.options.task;
    },

    card() {
      return this.options.card;
    },

    title() {
      return this.task.name;
    },

    description() {
      return this.task.description;
    } // actions() {
    //     return this.task.options;
    // }


  },
  methods: {
    select(option) {
      var self = this; //Mark as the option we selected

      self.task.status = option; /////////////////////////////////////

      var definitionName;

      switch (option) {
        case 'complete':
          definitionName = self.task.postComplete;
          break;

        case 'pending':
          definitionName = self.task.postPending;
          break;

        case 'failed':
          definitionName = self.task.postFailed;
          break;
      } /////////////////////////////////////


      if (!definitionName) {
        return self.close(option);
      } /////////////////////////////////////
      /////////////////////////////////////
      /////////////////////////////////////
      // console.log('GOTTA DO A TASK', definitionName, AddPostModal);
      // self.$fluro.content.type(definitionName)
      //     .then(function(form) {


      console.log('Do a task', self.card.item, self.card);
      var promise = self.$fluro.modal({
        // component: FluroOptionsDialog,
        component: __vue_component__$1u,
        options: {
          definitionName,
          skip: true,
          // definition:{
          //     definitionName,
          // },
          item: self.card.item || self.card // title:'something',
          // description:'desc',
          // options:[]

        }
      }).then(function (res) {
        // console.log('POST RESULT', res);
        return self.close(option);
      }).catch(function (err) {
        if (err) {
          return self.$fluro.error(err);
        }

        return self.close(option);
      }); // })
      // .catch(self.$fluro.error);;
      // //If there is a callback registered
      // //then fire the callback
      // if (option.action) {
      //     option.action();
      // }
    }

  }
};

/* script */
const __vue_script__$1T = script$1T;

/* template */
var __vue_render__$1S = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-task-modal"},[_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',[_c('h3',{attrs:{"margin":""}},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('div',{staticClass:"introduction",domProps:{"innerHTML":_vm._s(_vm.description)}})])],1),_vm._v(" "),_c('flex-column-body',[_c('div',{staticClass:"task-options border-top border-bottom"},[_c('div',{staticClass:"task-option-item complete",class:{active:_vm.task.status == 'complete'},on:{"click":function($event){return _vm.select('complete')}}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',[_vm._v(_vm._s(_vm.completeLabel))]),_vm._v(" "),(_vm.completeDescription)?_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(_vm.completeDescription))]):_vm._e()]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"task-icon"},[_c('fluro-icon',{attrs:{"icon":"thumbs-up"}})],1)])],1)],1),_vm._v(" "),(_vm.pendingEnabled)?_c('div',{staticClass:"task-option-item pending",class:{active:_vm.task.status == 'pending'},on:{"click":function($event){return _vm.select('pending')}}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',[_vm._v(_vm._s(_vm.pendingLabel))]),_vm._v(" "),(_vm.pendingDescription)?_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(_vm.pendingDescription))]):_vm._e()]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"task-icon"},[_c('fluro-icon',{attrs:{"icon":"tasks"}})],1)])],1)],1):_vm._e(),_vm._v(" "),(_vm.failedEnabled)?_c('div',{staticClass:"task-option-item failed",class:{active:_vm.task.status == 'failed'},on:{"click":function($event){return _vm.select('failed')}}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',[_vm._v(_vm._s(_vm.failedLabel))]),_vm._v(" "),(_vm.failedDescription)?_c('div',{staticClass:"sm muted"},[_vm._v(_vm._s(_vm.failedDescription))]):_vm._e()]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"task-icon"},[_c('fluro-icon',{attrs:{"icon":"thumbs-down"}})],1)])],1)],1):_vm._e(),_vm._v(" "),(_vm.task.status != 'incomplete')?_c('div',{staticClass:"task-option-item",on:{"click":function($event){return _vm.select('incomplete')}}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',[_vm._v("Incomplete")]),_vm._v(" "),_c('div',{staticClass:"sm muted"},[_vm._v("Reset this task back to it's untouched state")])]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"task-icon"},[_c('fluro-icon',{attrs:{"icon":"circle"}})],1)])],1)],1):_vm._e()])]),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"py-1 px-2"},[_c('v-btn',{attrs:{"block":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                Cancel\n            ")])],1)],1)],1)};
var __vue_staticRenderFns__$1S = [];

  /* style */
  const __vue_inject_styles__$1T = function (inject) {
    if (!inject) return
    inject("data-v-dfbc63da_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-task-modal{min-width:300px}@media (min-width:768px){.fluro-task-modal{max-width:500px}}.fluro-task-modal .introduction{font-size:1.1em}.fluro-task-modal .task-options{padding:15px;background:rgba(0,0,0,.05)}.fluro-task-modal .task-options .task-option-item{background:#fff;padding:10px 15px;font-size:1.2em;border:1px solid rgba(0,0,0,.2);border-radius:5px;margin-bottom:5px;cursor:pointer;display:flex;align-items:center}.fluro-task-modal .task-options .task-option-item:hover{border:1px solid rgba(0,0,0,.4)}.fluro-task-modal .task-options .task-option-item .task-icon{width:50px;height:50px;line-height:50px;background:#eee;border-radius:50%;text-align:center;font-size:20px;border:1px solid rgba(0,0,0,.05);color:rgba(0,0,0,.5);margin-left:15px}.fluro-task-modal .task-options .task-option-item.complete .task-icon{color:#4cc650}.fluro-task-modal .task-options .task-option-item.complete.active{background-color:#86d889;border-color:#4cc650;color:#1d5c1f}.fluro-task-modal .task-options .task-option-item.complete.active .task-icon{background-color:#4cc650;color:#fff}.fluro-task-modal .task-options .task-option-item.pending .task-icon{color:#f0974e}.fluro-task-modal .task-options .task-option-item.pending.active{background-color:#f8ceac;border-color:#f0974e;color:#ec7b1f}.fluro-task-modal .task-options .task-option-item.pending.active .task-icon{background-color:#f0974e;color:#fff}.fluro-task-modal .task-options .task-option-item.failed .task-icon{color:#d93e63}.fluro-task-modal .task-options .task-option-item.failed.active{background-color:#e67e97;border-color:#d93e63;color:#691529}.fluro-task-modal .task-options .task-option-item.failed.active .task-icon{background-color:#d93e63;color:#fff}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1T = undefined;
  /* module identifier */
  const __vue_module_identifier__$1T = undefined;
  /* functional template */
  const __vue_is_functional_template__$1T = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1S = normalizeComponent(
    { render: __vue_render__$1S, staticRenderFns: __vue_staticRenderFns__$1S },
    __vue_inject_styles__$1T,
    __vue_script__$1T,
    __vue_scope_id__$1T,
    __vue_is_functional_template__$1T,
    __vue_module_identifier__$1T,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1U = {
  components: {
    FluroContentForm: __vue_component__$H,
    FluroTabset: __vue_component__$c,
    FluroTab: __vue_component__$b
  },
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin],

  data() {
    var copy = JSON.parse(JSON.stringify(this.options.task));

    if (!copy.instructions) {
      copy.instructions = {};
    }

    return {
      model: copy,
      fields: [{
        title: 'Task name',
        key: 'name',
        type: 'string',
        minimum: 0,
        maximum: 1
      }, {
        title: 'Description',
        description: 'Optional extra detail for how to complete this task',
        placeholder: 'Optional extra detail for how to complete this task',
        key: 'description',
        type: 'string',
        // directive: 'wysiwyg',
        directive: 'textarea',
        minimum: 0,
        maximum: 1
      }]
    };
  },

  methods: {
    update() {
      console.log('Update occurred!');
      this.options.callback(this.model); // this.$emit('input', this.model);
      // this.$emit('input')
    }

  },
  asyncComputed: {
    postTypes: {
      default: [],

      get() {
        //TODO Filter this so it only shows posts that can be attached to
        //process, the definition of the process and the kinds of things that can be added to the process
        var self = this;
        return self.$fluro.types.subTypes('post'); // var types = []
        // return self.$fluro.api.post('/post/types?list=true', {
        //         types:['proce'],
        //     })
        //     .then(function(res) {
        //         resolve(res.data);
        //         cachedValue = valueStorageCache.set(typesAsString, res.data);
        //         self.loadingPosts = false;
        //     })
        //     .catch(function(err) {
        //         cachedValue = valueStorageCache.set(typesAsString, null);
        //         reject(err);
        //         self.loadingPosts = false;
        //     });
      }

    }
  },
  computed: {
    postOptions() {
      return lodash.chain(this.postTypes).map(function (postType) {
        return {
          name: postType.title,
          value: postType.definitionName
        };
      }).orderBy(function (postType) {
        return postType.name;
      }).value();
    },

    completeFields() {
      var self = this;
      return [{
        type: 'group',
        asObject: true,
        minimum: 1,
        maximum: 1,
        askCount: 1,
        key: 'instructions',
        fields: [{
          title: 'Complete Label',
          description: 'Set what label should be used when referring to this task being complete',
          key: 'completeLabel',
          type: 'string',
          minimum: 0,
          maximum: 1,
          params: {
            persistentDescription: true
          }
        }, {
          title: 'Instructions',
          description: 'Add extra detail about what this task means when it is marked as complete',
          key: 'completeDescription',
          type: 'string',
          directive: 'textarea',
          minimum: 0,
          maximum: 1,
          params: {
            persistentDescription: true
          }
        }]
      }, {
        title: 'Complete Post Type',
        description: 'Ask for a post to be created for extra details when this task is marked as complete',
        params: {
          persistentDescription: true
        },
        key: 'postComplete',
        type: 'string',
        directive: 'select',
        minimum: 0,
        maximum: 1,
        options: self.postOptions
      }];
    },

    pendingFields() {
      var self = this;
      return [{
        type: 'group',
        asObject: true,
        minimum: 1,
        maximum: 1,
        askCount: 1,
        key: 'instructions',
        className: 'form-group',
        fields: [{
          title: `Disable '${self.pendingLabel}' Option`,
          description: `Disable the ability for this task to be marked as '${self.pendingLabel}'`,
          key: 'pendingDisabled',
          type: 'boolean',
          minimum: 0,
          maximum: 1
        }, {
          type: 'group',
          expressions: {
            hide: 'model.pendingDisabled'
          },
          fields: [{
            title: 'Pending Label',
            description: 'Set what label should be used when referring to this task being in progress or',
            key: 'pendingLabel',
            params: {
              persistentDescription: true
            },
            type: 'string',
            minimum: 0,
            maximum: 1
          }, {
            title: 'Instructions',
            description: 'Add extra detail about what this task means when it is marked as pending',
            key: 'pendingDescription',
            params: {
              persistentDescription: true
            },
            type: 'string',
            directive: 'textarea',
            minimum: 0,
            maximum: 1
          }]
        }]
      }, {
        title: 'Pending Post Type',
        description: 'Ask for a post to be created for extra details when this task is marked as pending',
        key: 'postPending',
        params: {
          persistentDescription: true
        },
        type: 'string',
        directive: 'select',
        minimum: 0,
        maximum: 1,
        options: self.postOptions,
        expressions: {
          hide: 'data.instructions.pendingDisabled'
        }
      }];
    },

    failedFields() {
      var self = this;
      return [{
        type: 'group',
        asObject: true,
        minimum: 1,
        maximum: 1,
        askCount: 1,
        key: 'instructions',
        fields: [{
          title: `Disable '${self.failedLabel}' Option`,
          description: `Disable the ability for this task to be marked as '${self.failedLabel}'`,
          key: 'failedDisabled',
          type: 'boolean',
          minimum: 0,
          maximum: 1
        }, {
          type: 'group',
          expressions: {
            hide: 'model.failedDisabled'
          },
          fields: [{
            title: 'Label',
            description: `Set what label should be used when referring to this task being '${self.failedLabel}'`,
            key: 'failedLabel',
            type: 'string',
            params: {
              persistentDescription: true
            },
            minimum: 0,
            maximum: 1
          }, {
            title: 'Instructions',
            description: `Add extra detail about what this task means when it is marked as '${self.failedLabel}'`,
            key: 'failedDescription',
            type: 'string',
            params: {
              persistentDescription: true
            },
            directive: 'textarea',
            minimum: 0,
            maximum: 1
          }]
        }]
      }, {
        title: 'Failed Post Type',
        description: `Ask for a post to be created for extra details when this task is marked as '${self.failedLabel}'`,
        params: {
          persistentDescription: true
        },
        key: 'postFailed',
        expressions: {
          hide: 'data.instructions.failedDisabled'
        },
        type: 'string',
        directive: 'select',
        minimum: 0,
        maximum: 1,
        options: self.postOptions
      }];
    },

    instructions() {
      return this.model.instructions || {};
    },

    completeLabel() {
      return this.instructions.completeLabel || 'Complete';
    },

    pendingLabel() {
      return this.instructions.pendingLabel || 'Pending';
    },

    failedLabel() {
      return this.instructions.failedLabel || 'Failed';
    } // task() {
    //     return this.options.task;
    // },
    // // title() {
    // //     return this.task.name;
    // // },
    // description() {
    //     return this.task.description;
    // },


  }
};

/* script */
const __vue_script__$1U = script$1U;

/* template */
var __vue_render__$1T = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"fluro-task-edit-modal"},[_c('flex-column-header',{staticClass:"border-bottom"},[_c('v-container',{attrs:{"pa-2":""}},[_c('v-layout',{attrs:{"align-center":"","row":""}},[_c('v-flex',[_c('h4',[_c('fluro-icon',{attrs:{"icon":"square-pencil"}}),_vm._v(" "+_vm._s(_vm.model.name))],1)]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","color":"primary"},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                        Done\n                    ")])],1)],1)],1)],1),_vm._v(" "),_c('fluro-tabset',{attrs:{"justified":true}},[_c('fluro-tab',{attrs:{"heading":"Description"}},[_c('flex-column-body',[_c('v-container',[_c('fluro-content-form',{attrs:{"fields":_vm.fields},on:{"input":_vm.update},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1)],1),_vm._v(" "),_c('fluro-tab',{attrs:{"heading":_vm.completeLabel}},[_c('flex-column-body',[_c('v-container',{attrs:{"fluid":""}},[_c('fluro-content-form',{attrs:{"fields":_vm.completeFields},on:{"input":_vm.update},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1)],1),_vm._v(" "),_c('fluro-tab',{attrs:{"heading":_vm.pendingLabel}},[_c('flex-column-body',[_c('v-container',{attrs:{"fluid":""}},[_c('fluro-content-form',{attrs:{"fields":_vm.pendingFields},on:{"input":_vm.update},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1)],1),_vm._v(" "),_c('fluro-tab',{attrs:{"heading":_vm.failedLabel}},[_c('flex-column-body',[_c('v-container',{attrs:{"fluid":""}},[_c('fluro-content-form',{attrs:{"fields":_vm.failedFields},on:{"input":_vm.update},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)],1)],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{staticClass:"py-1 px-2"},[_c('v-btn',{attrs:{"block":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                Cancel\n            ")])],1)],1)],1)};
var __vue_staticRenderFns__$1T = [];

  /* style */
  const __vue_inject_styles__$1U = function (inject) {
    if (!inject) return
    inject("data-v-404ddf33_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-task-edit-modal{min-width:300px}@media (min-width:768px){.fluro-task-edit-modal{max-width:500px}}.fluro-task-edit-modal .fluro-editor-textarea{background:#fff}.fluro-task-edit-modal .tabset-menu a.active{background:#fafafa}.fluro-task-edit-modal .tabset-content{background:#fafafa}.fluro-task-edit-modal .bordered{border:1px solid rgba(0,0,0,.05)}.fluro-task-edit-modal .fluro-content-form-field-checkbox{margin-bottom:25px}.fluro-task-edit-modal .fluro-content-form-field-checkbox .v-input__slot{margin-bottom:5px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1U = undefined;
  /* module identifier */
  const __vue_module_identifier__$1U = undefined;
  /* functional template */
  const __vue_is_functional_template__$1U = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1T = normalizeComponent(
    { render: __vue_render__$1T, staticRenderFns: __vue_staticRenderFns__$1T },
    __vue_inject_styles__$1U,
    __vue_script__$1U,
    __vue_scope_id__$1U,
    __vue_is_functional_template__$1U,
    __vue_module_identifier__$1U,
    false,
    createInjector,
    undefined,
    undefined
  );

class Mention extends Node {
  get name() {
    return 'mention';
  }

  get defaultOptions() {
    return {
      matcher: {
        char: '@',
        allowSpaces: false,
        startOfLine: false
      },
      mentionClass: null,
      //'',
      suggestionClass: 'mention-suggestion'
    };
  }

  get schema() {
    return {
      attrs: {
        id: {},
        label: {}
      },
      group: 'inline',
      inline: true,
      selectable: false,
      atom: true,
      toDOM: node => ['mention', {
        class: this.options.mentionClass,
        'data-mention-id': node.attrs.id
      }, // `${node.attrs.label}`,
      `${node.attrs.label}`],
      parseDOM: [{
        tag: 'mention[data-mention-id]',
        getAttrs: dom => {
          const id = dom.getAttribute('data-mention-id');
          const label = dom.innerText.split(this.options.matcher.char).join('');
          return {
            id,
            label
          };
        }
      }]
    };
  }

  commands({
    schema
  }) {
    return attrs => replaceText(null, schema.nodes[this.name], attrs);
  }

  get plugins() {
    return [Suggestions({
      command: ({
        range,
        attrs,
        schema
      }) => replaceText(range, schema.nodes[this.name], attrs),
      appendText: ' ',
      matcher: this.options.matcher,
      items: this.options.items,
      onEnter: this.options.onEnter,
      onChange: this.options.onChange,
      onExit: this.options.onExit,
      onKeyDown: this.options.onKeyDown,
      onFilter: this.options.onFilter,
      suggestionClass: this.options.suggestionClass
    })];
  }

}

var prosemirrorCommands = require('prosemirror-commands');

var tiptapUtils = require('tiptap-utils');

class FluroNode extends Node {
  get name() {
    return 'fluroNode';
  }

  get defaultOptions() {
    return {
      classes: [{
        id: "lead",
        title: 'Lead Text',
        tag: 'span',
        className: 'lead'
      }]
    };
  }

  get schema() {
    return {
      attrs: {
        id: {},
        label: {},
        title: {},
        tag: {},
        className: {}
      },
      content: 'inline*',
      group: 'inline',
      defining: true,
      draggable: false,
      inline: true,
      // parseDOM: this.options.classes
      //     .map(cssClass => ({
      //         tag: cssClass.tag,
      //         attrs: cssClass
      //     })),
      // toDOM: node => node.attrs,
      toDOM: node => ['fluroNode', {
        class: this.options.mentionClass,
        'data-fluroNode-id': node.attrs.id
      } // `${node.attrs.label}`,
      //`${node.attrs.label}`,
      ],
      parseDOM: [{
        tag: 'fluroNode[data-fluroNode-id]',
        getAttrs: dom => {
          const id = dom.getAttribute('data-fluroNode-id');
          return {
            id
          };
        }
      }]
    };
  } // commands({ type, schema }) {
  //   return attrs => toggleBlockType(type, schema.nodes.paragraph, attrs)
  // }


  commands({
    type,
    schema
  }) {
    // return attrs => (state, dispatch) => {
    //   console.log("state", state)
    //   const { $from } = state.selection
    //   const { pos } = $from.pos
    //   dispatch(state.tr.insertText(`<${attrs.tag} class="attrs.className">${attrs}</>`, pos))
    // }
    //return attrs => toggleBlockType(type, schema.nodes.paragraph, attrs)
    // return attrs => replaceText(null, schema.nodes[this.name], attrs)
    return attrs => (state, dispatch, view) => {
      attrs.class = attrs.className; //console.log(type, schema, attrs)

      var tag = attrs.tag;
      var title = attrs.title;
      var className = attrs.className;
      console.log(type, schema, attrs);
      toggleBlockType(type, schema.nodes.paragraph, attrs);
    };
  }

} // keys({ type }) {
//   console.log("KEYS CALLED", "This", this, "Type", type)
//   return this.options.tokens.reduce((items, key) => ({
//     ...items,
//   }), {})
// }

var tiptapUtils$1 = require('tiptap-utils');

class FluroMark extends Mark {
  get name() {
    return 'fluroMark';
  }

  get defaultOptions() {
    return {
      classes: [{
        id: "xs",
        title: 'Extra Small',
        tag: 'span',
        class: 'text-xs'
      }, {
        id: "sm",
        title: 'Small',
        tag: 'span',
        class: 'text-sm'
      }, {
        id: "muted",
        title: 'Muted',
        tag: 'span',
        class: 'text-muted'
      }, {
        id: "lg",
        title: 'Large',
        tag: 'span',
        class: 'text-lg'
      }, {
        id: "xl",
        title: 'Extra Large',
        tag: 'span',
        class: 'text-xl'
      } // {
      //     id: "small",
      //     title: 'Small Text',
      //     tag: 'span',
      //     class: 'small'
      // },
      // {
      //     id: "muted",
      //     title: 'Muted Text',
      //     tag: 'span',
      //     class: 'text-muted'
      // },
      ]
    };
  }

  get schema() {
    return {
      attrs: {
        level: {
          default: ""
        }
      },
      parseDOM: [{
        tag: "span.typography",

        getAttrs(dom) {
          // console.log(dom.classList[1]);
          return {
            level: dom.classList[1]
          };
        }

      }],
      toDOM: mark => {
        return ["span", {
          class: `typography ${mark.attrs.level}`
        }, 0];
      }
    };
  }

  commands({
    type
  }) {
    return attrs => toggleMark(type, attrs);
  }
  /**
      get schema() {
        return {
            attrs: {
              class: {},
            },
            content: 'inline*',
            group: 'block',
            draggable: false,
            parseDOM: this.options.classes
                .map(cssClass => ({
                    //tag: 'p',
                    //getAttrs (node) {
                    //    console.log("parseDOM", node)
                    //    return {
                            class: cssClass.class
                    //    }
                    //}
                })),
            toDOM (node) {
                console.log("Node toDOM", node)
                return  [ 'span', { class: node.attrs.class }, 0 ]
            },
         }
    }
   commands({ type }) {
    return attrs => toggleMark(type)
  }
  /**/


}

class Image$1 extends Node {
  get name() {
    return 'asset';
  }

  get schema() {
    return {
      inline: true,
      attrs: {
        item: {}
      },
      group: 'inline',
      draggable: true,
      parseDOM: [{
        tag: 'a[asset]',
        getAttrs: dom => ({
          item: dom.getAttribute('item')
        })
      }],
      toDOM: node => ['a', node.attrs]
    };
  }

  commands({
    type
  }) {
    return attrs => (state, dispatch) => {
      const {
        selection
      } = state;
      const position = selection.$cursor ? selection.$cursor.pos : selection.$to.pos;
      const node = type.create(attrs);
      const transaction = state.tr.insert(position, node);
      dispatch(transaction);
    };
  }

  get view() {
    return {
      props: ['node', 'updateAttrs', 'view'],
      computed: {
        text() {
          return 'Link text';
        },

        url: {
          get() {
            //return `https://api.fluro.io/get/${this.node.attrs.item}`
            return this.$fluro.asset.downloadUrl(this.node.attrs.item);
          },

          set(url) {
            this.updateAttrs({
              url
            });
          }

        }
      },
      template: `<a :href="url">{{text}}</a>`
    };
  }

}

class Image$2 extends Node {
  get name() {
    return 'image';
  }

  get schema() {
    return {
      inline: true,
      attrs: {
        item: {}
      },
      group: 'inline',
      draggable: true,
      parseDOM: [{
        tag: 'fluro-image[item]',
        getAttrs: dom => ({
          item: dom.getAttribute('item')
        })
      }],
      toDOM: node => ['fluro-image', node.attrs]
    };
  }

  commands({
    type
  }) {
    return attrs => (state, dispatch) => {
      const {
        selection
      } = state;
      const position = selection.$cursor ? selection.$cursor.pos : selection.$to.pos;
      const node = type.create(attrs);
      const transaction = state.tr.insert(position, node);
      dispatch(transaction);
    };
  }

  get view() {
    return {
      props: ['node', 'updateAttrs', 'view'],
      computed: {
        item: {
          get() {
            //return `https://api.fluro.io/get/${this.node.attrs.item}`
            return this.$fluro.asset.imageUrl(this.node.attrs.item);
          },

          set(item) {
            this.updateAttrs({
              item
            });
          }

        }
      },
      template: `<div class="fluro-image-preview"><img :src='item' /></div>`
    };
  }

}

class Video extends Node {
  get name() {
    return 'video';
  }

  get schema() {
    return {
      inline: true,
      attrs: {
        item: {}
      },
      group: 'inline',
      draggable: true,
      parseDOM: [{
        tag: 'fluro-video[item]',
        getAttrs: dom => ({
          item: dom.getAttribute('item')
        })
      }],
      toDOM: node => ['fluro-video', node.attrs]
    };
  }

  commands({
    type
  }) {
    return attrs => (state, dispatch) => {
      const {
        selection
      } = state;
      const position = selection.$cursor ? selection.$cursor.pos : selection.$to.pos;
      const node = type.create(attrs);
      const transaction = state.tr.insert(position, node);
      dispatch(transaction);
    };
  }

  get view() {
    return {
      props: ['node', 'updateAttrs', 'view'],
      computed: {
        item: {
          get() {
            return this.$fluro.asset.posterUrl(this.node.attrs.item);
          },

          set(item) {
            this.updateAttrs({
              item
            });
          }

        }
      },
      template: `<div><img :src='item' /></div>`
    };
  }

}

class Token extends Node {
  get name() {
    return 'token';
  }

  get schema() {
    return {
      attrs: {},
      inline: true,
      selectable: false,
      content: 'inline*',
      draggable: false,
      isText: true,
      toDOM: node => node.attrs
    };
  }

  commands({
    type,
    schema
  }) {
    return attrs => (state, dispatch) => {
      const {
        $from
      } = state.selection;
      const {
        pos
      } = $from.pos;
      dispatch(state.tr.insertText(`{{${attrs}}}`, pos));
    };
  } // keys({ type }) {
  //   console.log("KEYS CALLED", "This", this, "Type", type)
  //   return this.options.tokens.reduce((items, key) => ({
  //     ...items,
  //   }), {})
  // }


}

class Alignment extends Mark {
  // eslint-disable-next-line class-methods-use-this
  get name() {
    return 'alignment';
  } // eslint-disable-next-line class-methods-use-this


  get schema() {
    return {
      attrs: {
        textAlign: {
          default: 'left'
        }
      },
      parseDOM: [{
        style: 'text-align',
        getAttrs: value => ({
          textAlign: value
        })
      }],
      toDOM: mark => ['span', {
        style: `text-align: ${mark.attrs.textAlign};display: block`
      }, 0]
    };
  } // eslint-disable-next-line class-methods-use-this


  commands({
    type
  }) {
    return attrs => updateMark(type, attrs);
  } // eslint-disable-next-line class-methods-use-this


  inputRules({
    type
  }) {
    return [markInputRule(/(?:\*\*|__)([^*_]+)(?:\*\*|__)$/, type)];
  }

} // // import { toggleBlockType } from 'tiptap-commands';
// // import { Node } from 'tiptap';
// // export default class Paragraph extends Node {
// //     get name() {
// //         return 'alignment';
// //     }
// //     get schema() {
// //         return {
// //             attrs: {
// //                 textAlign: {
// //                     default: 'left'
// //                 }
// //             },
// //             content: 'inline*',
// //             group: 'block',
// //             draggable: false,
// //             parseDOM: [
// //                 {
// //                     tag: 'p',
// //                     getAttrs: (node) => ({
// //                         textAlign: node.style.textAlign || 'left'
// //                     })
// //                 }
// //             ],
// //             toDOM: (node) => [ 'p', { style: `text-align: ${node.attrs.textAlign}` }, 0 ]
// //         };
// //     }
// //     commands({ type, schema }) {
// //         return (attrs) => toggleBlockType(type, schema.nodes.alignment, attrs);
// //     }
// // }
// import { Mark } from 'tiptap'
// import { updateMark, markInputRule } from 'tiptap-commands'
// export default class Alignment extends Mark {
//   get name () {
//     return 'align'
//   }
//   get schema () {
//     return {
//       attrs: {
//         textAlign: 'left'
//       }, 
//       parseDOM: [
//         {
//           style: 'text-align',
//           getAttrs: value => value
//         }
//       ],
//       toDOM: mark => ['span', { 
//         style: `text-align: ${mark.attrs.textAlign};display: block`
//       }, 0],
//     };
//   }
//   commands ({ type }) {
//     return (attrs) => updateMark(type, attrs)
//   }
//   inputRules({ type }) {
//         return [
//             markInputRule(/(?:\*\*|__)([^*_]+)(?:\*\*|__)$/, type),
//         ]
//     }
// }
// import { Node, Plugin } from 'tiptap'
// export default class Alignment extends Node {
//   get name() {
//     return 'alignment'
//   }
//   get schema() {
//     return {
//       inline: false,
//       // attrs: {
//       //   item: {},
//       // },
//       group: 'block',
//       draggable: false,
//       parseDOM: [
//         {
//           tag: 'div',
//           getAttrs(dom) {
//               return {
//                   item:dom.getAttribute('item'),
//               }
//           },
//           // getAttrs: dom => ({
//           //   item: dom.getAttribute('item'),
//           // }),
//         },
//       ],
//       toDOM: node => ['div', node.attrs],
//     }
//   }
//   commands({ type }) {
//     return attrs => (state, dispatch) => {
//       const { selection } = state
//       const position = selection.$cursor ? selection.$cursor.pos : selection.$to.pos
//       const node = type.create(attrs)
//       const transaction = state.tr.insert(position, node)
//       dispatch(transaction)
//     }
//   }
//   get plugins() {
//     return [
//       new Plugin({
//         props: {
//           handleDOMEvents: {
//             drop(view, event) {
//               const hasFiles = event.dataTransfer
//               && event.dataTransfer.files
//               && event.dataTransfer.files.length
//               if (!hasFiles) {
//                 return
//               }
//               const images = Array
//                 .from(event.dataTransfer.files)
//                 .filter(file => (/image/i).test(file.type))
//               if (images.length === 0) {
//                 return
//               }
//               event.preventDefault()
//               const { schema } = view.state
//               const coordinates = view.posAtCoords({ left: event.clientX, top: event.clientY })
//               images.forEach(image => {
//                 const reader = new FileReader()
//                 reader.onload = readerEvent => {
//                   const node = schema.nodes.image.create({
//                     src: readerEvent.target.result,
//                   })
//                   const transaction = view.state.tr.insert(coordinates.pos, node)
//                   view.dispatch(transaction)
//                 }
//                 reader.readAsDataURL(image)
//               })
//             },
//           },
//         },
//       }),
//     ]
//   }
//   /*
// }

class Typography extends Mark {
  get name() {
    return "typography";
  }

  get defaultOptions() {
    return {
      levels: [{
        title: 'Muted',
        level: "text-muted"
      }, // {
      //     title: 'Lead',
      //     level: "lead"
      // }, 
      {
        title: 'Normal',
        level: ''
      }, {
        title: 'Extra Small',
        level: 'font-xs'
      }, {
        title: 'Small',
        level: 'font-sm'
      }, {
        title: 'Large',
        level: 'font-lg'
      }, {
        title: 'Extra Large',
        level: 'font-xl'
      }]
    };
  }

  get schema() {
    return {
      attrs: {
        level: {
          default: ""
        }
      },
      parseDOM: [{
        // tag: "span.typography",
        tag: "span",

        getAttrs(dom) {
          // console.log(dom.classList[1]);
          return {
            level: dom.classList[1]
          };
        }

      }],
      toDOM: mark => {
        return ["span", {
          class: `${mark.attrs.level}`
        }, 0];
      }
    };
  }

  commands({
    type
  }) {
    return attrs => toggleMark(type, attrs);
  }

}

//
var script$1V = {
  data() {
    return {
      keepInBounds: true,
      showSource: false,
      model: this.value,
      editor: null,
      //Mentions
      query: null,
      suggestionRange: null,
      filteredUsers: [],
      navigatedUserIndex: 0,
      insertMention: () => {},
      observer: null,
      linkUrl: null,
      linkMenuIsActive: false,
      TypographyPlugin: new Typography(),
      FluroNodePlugin: new FluroNode(),
      FluroMarkPlugin: new FluroMark()
    };
  },

  computed: {
    typographyOptions() {
      return this.TypographyPlugin.options.levels;
    },

    tokens() {
      return this.options.tokens || [];
    },

    barEnabled() {
      return !(this.options.disable && this.options.disable.bar);
    },

    bubbleEnabled() {
      return !(this.options.disable && this.options.disable.bubble);
    },

    showSuggestions() {
      return this.query || this.hasResults;
    }

  },
  methods: {
    isEnabled(tool) {
      //If we've specified a toolset
      if (this.options.toolset) {
        return _.includes(this.options.toolset, tool);
      } else {
        return true;
      }
    },

    select() {
      console.log('SELECT EDITOR');
    },

    hideBubble() {
      this.hideLinkMenu();
    },

    addFluroNode(cssClass) {
      var pluginOptions = this.FluroNodePlugin.options.classes;

      if (pluginOptions.indexOf(cssClass) === -1) {
        pluginOptions.push(cssClass);
      }
    },

    getFluroNodes() {
      return this.FluroNodePlugin.options.classes;
    },

    addFluroMark(cssClass) {
      var pluginOptions = this.FluroMarkPlugin.options.classes;

      if (pluginOptions.indexOf(cssClass) === -1) {
        pluginOptions.push(cssClass);
      }
    },

    getFluroMarks() {
      return this.FluroMarkPlugin.options.classes;
    },

    showLinkMenu(attrs) {
      this.linkUrl = attrs.href;
      this.linkMenuIsActive = true;
      this.$nextTick(() => {
        this.$refs.linkInput.focus();
      });
    },

    hideLinkMenu() {
      this.linkUrl = null;
      this.linkMenuIsActive = false;
    },

    setLinkUrl(command, url) {
      command({
        href: url
      });
      this.hideLinkMenu();
      this.editor.focus();
    },

    blurEditor($event) {
      // console.log('BLUR EDITOR')
      this.$emit('blur');
    },

    focusEditor($event) {
      // console.log('FOCUS EDITOR')
      this.$emit('focus');
    },

    blurCode($event) {
      // console.log('BLUR CODE')
      this.$emit('blur');
    },

    focusCode($event) {
      // console.log('FOCUS CODE')
      this.$emit('focus');
    },

    sourceChange(input) {
      this.model = input;
    },

    showAssetPrompt(command) {
      var self = this;
      self.$fluro.global.select('asset', {
        title: 'Select assets',
        minimum: 0,
        maximum: 0,
        allDefinitions: true
      }, true).then(function (res) {
        if (res) {
          // var first = _.first(res)
          _.each(res, function (item) {
            command({
              item
            });
          });
        }
      }); // const src = prompt('Enter the url of your image here')
      // if (src !== null) {
      //     command({ src })
      // }
    },

    showImagePrompt(command) {
      var self = this;
      self.$fluro.global.select('image', {
        title: 'Select an Image/Photo',
        minimum: 1,
        maximum: 1,
        allDefinitions: true
      }, true).then(function (res) {
        if (res) {
          var first = _.first(res);

          command({
            item: first._id
          });
        }
      }); // const src = prompt('Enter the url of your image here')
      // if (src !== null) {
      //     command({ src })
      // }
    },

    showVideoPrompt(command) {
      var self = this;
      self.$fluro.global.select('video', {
        title: 'Select a Video',
        minimum: 1,
        maximum: 1,
        allDefinitions: true
      }, true).then(function (res) {
        if (res) {
          var first = _.first(res);

          command({
            item: first._id
          });
        }
      }); // const src = prompt('Enter the url of your image here')
      // if (src !== null) {
      //     command({ src })
      // }
    },

    addToken(command, key) {
      command(key);
    },

    // navigate to the previous item
    // if it's the first item, navigate to the last one
    upHandler() {
      this.navigatedUserIndex = (this.navigatedUserIndex + this.filteredUsers.length - 1) % this.filteredUsers.length;
    },

    // navigate to the next item
    // if it's the last item, navigate to the first one
    downHandler() {
      this.navigatedUserIndex = (this.navigatedUserIndex + 1) % this.filteredUsers.length;
    },

    enterHandler() {
      const user = this.filteredUsers[this.navigatedUserIndex];

      if (user) {
        this.selectUser(user);
      }
    },

    // we have to replace our suggestion text with a mention
    // so it's important to pass also the position of your suggestion text
    selectUser(user) {
      //console.log('SELECT USER', user);
      this.insertMention({
        range: this.suggestionRange,
        attrs: {
          id: user._id,
          mentionID: user.mentionID,
          label: user.title
        }
      });
      this.editor.focus();
    },

    // renders a popup with suggestions
    // tiptap provides a virtualNode object for using popper.js (or tippy.js) for popups
    renderPopup(node) {
      if (this.popup) {
        return;
      }

      this.popup = tippy(node, {
        content: this.$refs.suggestions,
        trigger: 'mouseenter',
        interactive: true,
        theme: 'dark',
        placement: 'top-start',
        inertia: true,
        duration: [400, 200],
        showOnInit: true,
        arrow: true,
        arrowType: 'round'
      }); // we have to update tippy whenever the DOM is updated

      if (MutationObserver) {
        this.observer = new MutationObserver(() => {
          this.popup.popperInstance.scheduleUpdate();
        });
        this.observer.observe(this.$refs.suggestions, {
          childList: true,
          subtree: true,
          characterData: true
        });
      }
    },

    destroyPopup() {
      if (this.popup) {
        this.popup.destroy();
        this.popup = null;
      }

      if (this.observer) {
        this.observer.disconnect();
      }
    }

  },
  props: {
    'codeEditorHeight': {
      default: 600,
      type: Number
    },
    'value': {
      default: '',
      type: String
    },
    'placeholder': {
      type: String
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    }
  },
  components: {
    EditorMenuBar,
    EditorContent,
    FluroCodeEditor: __vue_component__$1g,
    EditorFloatingMenu,
    EditorMenuBubble,
    FluroNode,
    FluroMark
  },

  created() {
    var self = this;
    var placeholderText = self.placeholder;
    var MentionPlugin = new Mention({
      // a list of all suggested items
      items: function () {
        return []; // return [
        //     { id: 1, name: 'Philipp Kühn' },
        //     { id: 2, name: 'Hans Pagel' },
        //     { id: 3, name: 'Kris Siepert' },
        //     { id: 4, name: 'Justin Schueler' },
        // ]
      },
      // is called when a suggestion starts
      onEnter: ({
        items,
        query,
        range,
        command,
        virtualNode
      }) => {
        this.query = query;
        this.filteredUsers = items;
        this.suggestionRange = range;
        this.renderPopup(virtualNode); // we save the command for inserting a selected mention
        // this allows us to call it inside of our custom popup
        // via keyboard navigation and on click

        this.insertMention = command;
      },
      // is called when a suggestion has changed
      onChange: ({
        items,
        query,
        range,
        virtualNode
      }) => {
        var mentionInstance = this;
        self.$fluro.content.mention(query, self.options.mentions).then(function (personas) {
          mentionInstance.query = query;
          mentionInstance.filteredUsers = personas;
          mentionInstance.suggestionRange = range;
          mentionInstance.navigatedUserIndex = 0;
          mentionInstance.renderPopup(virtualNode);
        }).catch(function (err) {//console.log('Error', err);
          // this.query = query
          // this.filteredUsers = items
          // this.suggestionRange = range
          // this.navigatedUserIndex = 0
          // this.renderPopup(virtualNode)
        });
      },
      // is called when a suggestion is cancelled
      onExit: () => {
        // reset all saved values
        this.query = null;
        this.filteredUsers = [];
        this.suggestionRange = null;
        this.navigatedUserIndex = 0;
        this.destroyPopup();
      },
      // is called on every keyDown event while a suggestion is active
      onKeyDown: ({
        event
      }) => {
        // pressing up arrow
        if (event.keyCode === 38) {
          this.upHandler();
          return true;
        } // pressing down arrow


        if (event.keyCode === 40) {
          this.downHandler();
          return true;
        } // pressing enter


        if (event.keyCode === 13) {
          this.enterHandler();
          return true;
        }

        return false;
      } // is called when a suggestion has changed
      // this function is optional because there is basic filtering built-in
      // you can overwrite it if you prefer your own filtering
      // in this example we use fuse.js with support for fuzzy search
      // onFilter: (items, query) => {
      //     //console.log('SEARCH', items, query);
      //     if (!query) {
      //         return items
      //     }
      //     const fuse = new Fuse(items, {
      //         threshold: 0.2,
      //         keys: ['name'],
      //     })
      //     return fuse.search(query)
      // },

    }); ///////////////////////////////////
    ///////////////////////////////////
    ///////////////////////////////////

    var enabledExtensions = [new Bold(), new Italic(), new Strike(), new Underline(), new Link(), new Alignment(), new HorizontalRule(), new Blockquote(), new CodeBlock(), new HardBreak(), new Heading({
      levels: [1, 2, 3, 4]
    }), new BulletList(), new OrderedList(), new ListItem(), new Image$2(), new Image$1(), new Video(), new Code(), new History(), new Table(), new TableHeader(), new TableCell(), new TableRow(), new Token(), this.FluroNodePlugin, this.FluroMarkPlugin, this.TypographyPlugin, MentionPlugin, new Placeholder({
      emptyClass: 'placeholder-text',
      emptyNodeText: self.placeholder,
      showOnlyWhenEditable: true
    }) // new TodoItem(),
    // new TodoList()
    // new AutoLinkMark(),

    /**
    
    
    
    
    
                ,
    
    
    
    
    
     
    /**/
    ]; ///////////////////////////////////

    if (process.browser) {
      if (window.hljs) {
        // var json = function() { return window.hljs.getLanguage('json');} 
        // var javascript = function() { return window.hljs.getLanguage('javascript');} 
        // var scss = function() { return window.hljs.getLanguage('scss');} 
        // // console.log('Got him', window.hljs, window.hljs.listLanguages());
        // // var json = window.hljs.registerLanguage('json');
        // var json1 = window.hljs.getLanguage('json');
        // // var scss = window.hljs.registerLanguage('scss');
        // // var javascript = window.hljs.registerLanguage('javascript');
        // console.log('JSON 1', json1);
        // console.log('JSON 2', json2);
        // var highlightLanguages = {
        //     scss,
        //     javascript,
        //     json,
        // }
        // var highlightLanguages = {
        //     javascript,
        //     json,
        //     scss,
        //     html,
        // }
        // console.log('GOT Languages', window, highlightLanguages)
        //Add Code highlighting to the extension list
        enabledExtensions.push(new CodeBlockHighlight({
          languages: [json, javascript, scss]
        }));
      }
    } ///////////////////////////////////
    //Create and set the editor


    this.editor = new Editor({
      // editorProps:[{
      //     transformPastedHTML:function(string) {
      //         //console.log('FUNNEL', string)
      //         return string;
      //     }
      // }],
      extensions: enabledExtensions,
      onUpdate: ({
        getHTML
      }) => {
        var HTML = getHTML();
        self.model = HTML; // self.$emit('input', HTML);
      },

      onBlur(event) {
        self.blurEditor();
      },

      // : self.blur,
      onFocus(event) {
        self.focusEditor();
      } // : self.focus,


    }); //Add the model by default

    self.editor.setContent(self.model);
  },

  watch: {
    value(val) {
      this.model = val;
    },

    placeholder(newValue) {
      this.editor.extensions.options.placeholder.emptyNodeText = newValue;
    },

    model(value) {
      // so cursor doesn't jump to start on typing
      if (value !== this.editor.getHTML()) {
        //console.log('SET CONTENT TO', this.model)
        this.editor.setContent(value);
      }

      this.$emit('input', value);
    }

  },

  beforeDestroy() {
    this.editor.destroy();
  }

};

/* script */
const __vue_script__$1V = script$1V;

/* template */
var __vue_render__$1U = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-editor"},[(_vm.bubbleEnabled)?_c('editor-menu-bubble',{attrs:{"editor":_vm.editor,"keep-in-bounds":_vm.keepInBounds},on:{"hide":_vm.hideBubble},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var commands = ref.commands;
var isActive = ref.isActive;
var getMarkAttrs = ref.getMarkAttrs;
var menu = ref.menu;
return [_c('div',{staticClass:"menububble",class:{ 'active': menu.isActive },style:(("left: " + (menu.left) + "px; bottom: " + (menu.bottom) + "px;"))},[(_vm.isEnabled('formats'))?_c('v-menu',{attrs:{"attach":"","transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"small":"","icon":"","disabled":_vm.showSource}},on),[_c('fluro-icon',{attrs:{"icon":"paragraph"}})],1)]}}],null,true)},[_vm._v(" "),_c('div',{staticStyle:{"overflow":"auto","width":"300px","max-height":"300px"}},[_c('v-list',[_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 1 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 1 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h1",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 1")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 2 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 2 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h2",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 2")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 3 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 3 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h3",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 3")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 4 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 4 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h4",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 4")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 5 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 5 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h5",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 5")])])],1),_vm._v(" "),_vm._l((_vm.typographyOptions),function(option){return _c('v-list-tile',{class:{ 'active': isActive.typography({ level:option.level}) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.typography({ level:option.level })}}},[_c('v-list-tile-content',[_c('span',{class:option.level,staticStyle:{"margin":"0 !important"}},[_vm._v(_vm._s(option.title))])])],1)}),_vm._v(" "),_vm._e(),_vm._v(" "),_vm._e()],2)],1)]):_vm._e(),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.bold() },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.bold($event)}}},[_c('fluro-icon',{attrs:{"icon":"bold"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.italic() },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.italic($event)}}},[_c('fluro-icon',{attrs:{"icon":"italic"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.underline() },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.underline($event)}}},[_c('fluro-icon',{attrs:{"icon":"underline"}})],1),_vm._v(" "),(_vm.isEnabled('alignment'))?[_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'left' }) },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'left' })}}},[_c('fluro-icon',{attrs:{"icon":"align-left"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'center' }) },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'center' })}}},[_c('fluro-icon',{attrs:{"icon":"align-center"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'right' }) },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'right' })}}},[_c('fluro-icon',{attrs:{"icon":"align-right"}})],1)]:_vm._e(),_vm._v(" "),(_vm.linkMenuIsActive)?_c('form',{staticClass:"menububble__form",on:{"submit":function($event){$event.preventDefault();return _vm.setLinkUrl(commands.link, _vm.linkUrl)}}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.linkUrl),expression:"linkUrl"}],ref:"linkInput",staticClass:"link-input",attrs:{"type":"text","placeholder":"https://"},domProps:{"value":(_vm.linkUrl)},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.hideLinkMenu($event)},"input":function($event){if($event.target.composing){ return; }_vm.linkUrl=$event.target.value;}}}),_vm._v(" "),_c('v-btn',{attrs:{"small":"","icon":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.setLinkUrl(commands.link, null)}}},[_c('fluro-icon',{attrs:{"icon":"unlink"}})],1)],1):[_c('v-btn',{class:{ 'active': isActive.link() },attrs:{"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();_vm.showLinkMenu(getMarkAttrs('link'));}}},[_c('span',[_vm._v(_vm._s(isActive.link() ? 'Update Link' : 'Link'))]),_vm._v(" "),_c('fluro-icon',{attrs:{"right":"","icon":"link"}})],1)]],2)]}}],null,false,3430240661)}):_vm._e(),_vm._v(" "),(_vm.barEnabled)?_c('editor-menu-bar',{attrs:{"editor":_vm.editor},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var commands = ref.commands;
var isActive = ref.isActive;
return _c('div',{staticClass:"fluro-editor-toolbar"},[(_vm.isEnabled('source'))?_c('v-btn',{staticClass:"hidden-xs-only",class:{ 'is-active':_vm.showSource },attrs:{"icon":"","small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();_vm.showSource = !_vm.showSource;}}},[(_vm.showSource)?_c('fluro-icon',{attrs:{"icon":"edit"}}):_c('fluro-icon',{attrs:{"icon":"code"}})],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('formats'))?_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"small":"","icon":"","disabled":_vm.showSource}},on),[_c('fluro-icon',{attrs:{"icon":"paragraph"}})],1)]}}],null,true)},[_vm._v(" "),_c('v-list',[_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 1 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 1 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h1",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 1")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 2 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 2 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h2",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 2")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 3 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 3 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h3",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 3")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 4 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 4 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h4",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 4")])])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.heading({ level: 5 }) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.heading({ level: 5 })}}},[_c('v-list-tile-content',[_c('span',{staticClass:"h5",staticStyle:{"margin":"0 !important"}},[_vm._v("Heading 5")])])],1),_vm._v(" "),_vm._l((_vm.typographyOptions),function(option){return _c('v-list-tile',{class:{ 'active': isActive.typography({ level:option.level}) },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.typography({ level:option.level })}}},[_c('v-list-tile-content',[_c('span',{class:option.level,staticStyle:{"margin":"0 !important"}},[_vm._v(_vm._s(option.title))])])],1)}),_vm._v(" "),_vm._e(),_vm._v(" "),_vm._e()],2)],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('bold'))?_c('v-btn',{class:{ 'active': isActive.bold() },attrs:{"icon":"","disabled":_vm.showSource,"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.bold($event)}}},[_c('fluro-icon',{attrs:{"icon":"bold"}})],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('italic'))?_c('v-btn',{class:{ 'active': isActive.italic() },attrs:{"icon":"","disabled":_vm.showSource,"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.italic($event)}}},[_c('fluro-icon',{attrs:{"icon":"italic"}})],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('underline'))?_c('v-btn',{class:{ 'active': isActive.underline() },attrs:{"icon":"","disabled":_vm.showSource,"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.underline($event)}}},[_c('fluro-icon',{attrs:{"icon":"underline"}})],1):_vm._e(),_vm._v(" "),(_vm.tokens.length)?_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"small":"","disabled":_vm.showSource}},on),[_vm._v("\n                        Tokens\n                    ")])]}}],null,true)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},_vm._l((_vm.tokens),function(token){return _c('v-list-tile',{key:token.key,on:{"click":function($event){return commands.token(token.key)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_vm._v(_vm._s(token.title))])])],1)}),1)],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('image'))?_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({attrs:{"small":"","icon":"","disabled":_vm.showSource}},on),[_c('fluro-icon',{attrs:{"icon":"plus"}})],1)]}}],null,true)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.showImagePrompt(commands.image)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_c('fluro-icon',{attrs:{"type":"image"}}),_vm._v(" Add Image")],1)])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.showVideoPrompt(commands.video)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_c('fluro-icon',{attrs:{"type":"video"}}),_vm._v(" Add Video")],1)])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.blockquote() },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.blockquote($event)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_c('fluro-icon',{attrs:{"icon":"quote-right"}}),_vm._v(" Blockquote")],1)])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.code_block() },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.code_block($event)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_c('fluro-icon',{attrs:{"icon":"code"}}),_vm._v(" Code")],1)])],1),_vm._v(" "),_c('v-list-tile',{class:{ 'active': isActive.horizontal_rule() },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.horizontal_rule($event)}}},[_c('v-list-tile-content',[_c('span',{staticStyle:{"margin":"0 !important"}},[_c('fluro-icon',{attrs:{"icon":"horizontal-rule"}}),_vm._v(" Horizontal Rule")],1)])],1)],1)],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('list'))?_c('v-btn',{class:{ 'active': isActive.bullet_list() },attrs:{"icon":"","disabled":_vm.showSource,"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.bullet_list($event)}}},[_c('fluro-icon',{attrs:{"icon":"list-ul"}})],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('list'))?_c('v-btn',{class:{ 'active': isActive.ordered_list() },attrs:{"icon":"","disabled":_vm.showSource,"small":"","flat":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.ordered_list($event)}}},[_c('fluro-icon',{attrs:{"icon":"list-ol"}})],1):_vm._e(),_vm._v(" "),(_vm.isEnabled('alignment'))?[_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'left' }) },attrs:{"icon":"","small":"","flat":"","disabled":_vm.showSource},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'left' })}}},[_c('fluro-icon',{attrs:{"icon":"align-left"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'center' }) },attrs:{"icon":"","small":"","flat":"","disabled":_vm.showSource},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'center' })}}},[_c('fluro-icon',{attrs:{"icon":"align-center"}})],1),_vm._v(" "),_c('v-btn',{class:{ 'active': isActive.alignment({ textAlign: 'right' }) },attrs:{"icon":"","small":"","flat":"","disabled":_vm.showSource},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.alignment({ textAlign: 'right' })}}},[_c('fluro-icon',{attrs:{"icon":"align-right"}})],1)]:_vm._e(),_vm._v(" "),(_vm.isEnabled('table'))?_c('v-menu',{attrs:{"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({staticClass:"hidden-xs-only",attrs:{"small":"","icon":"","disabled":_vm.showSource}},on),[_c('fluro-icon',{attrs:{"icon":"table"}})],1)]}}],null,true)},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.createTable({rowsCount: 3, colsCount: 3, withHeaderRow: false })}}},[_c('v-list-tile-title',[_vm._v("Insert Table")])],1),_vm._v(" "),(isActive.table())?_c('span',[_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.addRowBefore($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Insert Row Before\n                            ")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.addRowAfter($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Insert Row After\n                            ")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.deleteRow($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Delete Row\n                            ")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.addColumnBefore($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Insert Column Before\n                            ")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.addColumnAfter($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Insert Column After\n                            ")])],1),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.deleteColumn($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Delete Column\n                            ")])],1),_vm._v(" "),_c('v-divider'),_vm._v(" "),_c('v-divider'),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.toggleCellMerge($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Combine Cells\n                            ")])],1),_vm._v(" "),_c('v-divider'),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return commands.deleteTable($event)}}},[_c('v-list-tile-content',[_vm._v("\n                                Delete table\n                            ")])],1)],1):_vm._e()],1)],1):_vm._e()],2)}}],null,false,244711536)}):_vm._e(),_vm._v(" "),(_vm.showSource)?[_c('div',{staticClass:"editor-code-wrapper"},[_c('fluro-code-editor',{staticClass:"fluro-editor-textarea",attrs:{"lang":"html","height":_vm.codeEditorHeight},on:{"blur":_vm.blurCode,"focus":_vm.focusCode,"input":_vm.sourceChange},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})],1)]:_vm._e(),_vm._v(" "),(!_vm.showSource)?[_c('editor-content',{staticClass:"fluro-editor-textarea",attrs:{"editor":_vm.editor}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showSuggestions),expression:"showSuggestions"}],ref:"suggestions",staticClass:"suggestion-list"},[(_vm.filteredUsers.length)?_vm._l((_vm.filteredUsers),function(persona,index){return _c('div',{key:persona._id,staticClass:"suggestion-list__item",class:{ 'is-selected': _vm.navigatedUserIndex === index },on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.selectUser(persona)}}},[_c('fluro-avatar',{attrs:{"left":"","id":persona,"type":"persona"}}),_vm._v(_vm._s(persona.title)+"\n                ")],1)}):_c('div',{staticClass:"suggestion-list__item is-empty"},[_vm._v("\n                No users found\n            ")])],2)]:_vm._e()],2)};
var __vue_staticRenderFns__$1U = [];

  /* style */
  const __vue_inject_styles__$1V = function (inject) {
    if (!inject) return
    inject("data-v-7be6c376_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-editor{margin-bottom:15px}.fluro-editor .text-muted{color:inherit;opacity:.5}.fluro-editor .font-xs{font-size:.7em}.fluro-editor .font-sm{font-size:.8em}.fluro-editor .font-lg{font-size:1.3em}.fluro-editor .font-xl{font-size:1.6em}.fluro-editor .font-xxl{font-size:2em}.fluro-editor table{border-collapse:collapse}.fluro-editor table td,.fluro-editor table th{border:1px dotted rgba(0,0,0,.1)!important}.fluro-editor .ace_editor{border-radius:5px;overflow:hidden}.fluro-editor .menububble{position:absolute;display:flex;z-index:20;background:#000;border-radius:5px;padding:.3rem;margin-bottom:.5rem;transform:translateX(-50%);visibility:hidden;opacity:0;transition:opacity .2s,visibility .2s;color:#fff!important}.fluro-editor .menububble.active{opacity:1;visibility:visible}.fluro-editor .menububble .v-btn{margin:0;color:#fff}.fluro-editor .menububble .link-input{background:rgba(255,255,255,.2);color:#fff;border-radius:3px;font-size:.8em;padding:2px 4px;color:#fff!important}.fluro-editor .menububble .link-input::placeholder{color:rgba(255,255,255,.5)}.fluro-editor .menububble .link-input:-ms-input-placeholder{color:rgba(255,255,255,.5)}.fluro-editor .menububble .link-input::-ms-input-placeholder{color:rgba(255,255,255,.5)}.fluro-editor *{margin:0;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-rendering:optimizeLegibility}.fluro-editor .fluro-image-preview{max-width:100%}.fluro-editor .fluro-image-preview img{display:block;width:100%;height:auto}.fluro-editor ol,.fluro-editor ul{padding-left:24px}.fluro-editor user agent stylesheet div{display:block}.fluro-editor html{font-family:-apple-system,BlinkMacSystemFont,San Francisco,Roboto,Segoe UI,Helvetica Neue,sans-serif;font-size:18px;color:#000;line-height:1.5}.fluro-editor .floating-menu{position:absolute;margin-top:-.25rem;visibility:hidden;opacity:0;transition:opacity .2s,visibility .2s}.fluro-editor .floating-menu.is-active{opacity:1;visibility:visible}.fluro-editor-toolbar{margin-bottom:10px}.fluro-editor-toolbar .v-menu{display:inline}.fluro-editor-toolbar .v-btn{margin:3px}.fluro-editor-textarea{display:flex;flex-direction:column;min-height:200px;overflow:hidden;resize:vertical}.fluro-editor-textarea .selectedCell{background:rgba(42,212,185,.1)}.fluro-editor-textarea>div{flex:1;padding:15px;outline:0;border:1px solid rgba(0,0,0,.1);border-radius:5px;overflow:auto}.fluro-editor-textarea>div:focus{border:1px solid rgba(0,0,0,.4)}.fluro-editor-textarea .is-empty:before{opacity:.4;background:#f06;content:attr(data-empty-text);float:left;pointer-events:none;height:0;font-style:italic}.fluro-editor-textarea .tableWrapper{display:block;width:100%}.fluro-editor-textarea .tableWrapper table{width:100%;border-collapse:collapse}.fluro-editor-textarea .tableWrapper table td,.fluro-editor-textarea .tableWrapper table tr{border:1px solid rgba(0,0,0,.2);padding:10px}.fluro-editor-textarea mention{display:inline;background:rgba(0,0,0,.1);color:rgba(0,0,0,.6);font-size:.9rem;font-weight:500;border-radius:9px;padding:.3rem .5rem;white-space:nowrap}.fluro-editor-textarea pre{box-shadow:none;border:none;margin:15px 0}.fluro-editor-textarea pre::before{content:attr(data-language);text-transform:uppercase;display:block;text-align:right;font-weight:700;font-size:.6rem}.fluro-editor-textarea pre code{box-shadow:none!important;background:#333!important;color:#ccc!important;padding:15px;display:block}.fluro-editor-textarea pre code .hljs-comment,.fluro-editor-textarea pre code .hljs-quote{color:#999}.fluro-editor-textarea pre code .hljs-deletion,.fluro-editor-textarea pre code .hljs-name,.fluro-editor-textarea pre code .hljs-regexp,.fluro-editor-textarea pre code .hljs-selector-class,.fluro-editor-textarea pre code .hljs-selector-id,.fluro-editor-textarea pre code .hljs-tag,.fluro-editor-textarea pre code .hljs-template-variable,.fluro-editor-textarea pre code .hljs-variable{color:#f2777a}.fluro-editor-textarea pre code .hljs-built_in,.fluro-editor-textarea pre code .hljs-builtin-name,.fluro-editor-textarea pre code .hljs-link,.fluro-editor-textarea pre code .hljs-literal,.fluro-editor-textarea pre code .hljs-meta,.fluro-editor-textarea pre code .hljs-number,.fluro-editor-textarea pre code .hljs-params,.fluro-editor-textarea pre code .hljs-type{color:#f99157}.fluro-editor-textarea pre code .hljs-attribute{color:#fc6}.fluro-editor-textarea pre code .hljs-addition,.fluro-editor-textarea pre code .hljs-bullet,.fluro-editor-textarea pre code .hljs-string,.fluro-editor-textarea pre code .hljs-symbol{color:#9c9}.fluro-editor-textarea pre code .hljs-section,.fluro-editor-textarea pre code .hljs-title{color:#69c}.fluro-editor-textarea pre code .hljs-keyword,.fluro-editor-textarea pre code .hljs-selector-tag{color:#c9c}.fluro-editor-textarea pre code .hljs{display:block;overflow-x:auto;background:#2d2d2d;color:#ccc;padding:.5em}.fluro-editor-textarea pre code .hljs-emphasis{font-style:italic}.fluro-editor-textarea pre code .hljs-strong{font-weight:700}.mention-suggestion{color:rgba(0,0,0,.6)}.suggestion-list{font-family:font-proxima;padding:.2rem;border:2px solid rgba(0,0,0,.1);font-size:.8rem;font-weight:700}.suggestion-list__no-results{padding:.2rem .5rem}.suggestion-list__item{border-radius:5px;padding:.2rem .5rem;margin-bottom:.2rem;cursor:pointer}.suggestion-list__item:last-child{margin-bottom:0}.suggestion-list__item.is-selected,.suggestion-list__item:hover{background-color:rgba(255,255,255,.2)}.suggestion-list__item.is-empty{opacity:.5}.tippy-tooltip.dark-theme{background-color:#000;padding:0;font-size:1rem;text-align:inherit;color:#fff;border-radius:5px}.tippy-tooltip.dark-theme .tippy-backdrop{display:none}.tippy-tooltip.dark-theme .tippy-roundarrow{fill:#000}.tippy-popper[x-placement^=top] .tippy-tooltip.dark-theme .tippy-arrow{border-top-color:#000}.tippy-popper[x-placement^=bottom] .tippy-tooltip.dark-theme .tippy-arrow{border-bottom-color:#000}.tippy-popper[x-placement^=left] .tippy-tooltip.dark-theme .tippy-arrow{border-left-color:#000}.tippy-popper[x-placement^=right] .tippy-tooltip.dark-theme .tippy-arrow{border-right-color:#000}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1V = undefined;
  /* module identifier */
  const __vue_module_identifier__$1V = undefined;
  /* functional template */
  const __vue_is_functional_template__$1V = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1U = normalizeComponent(
    { render: __vue_render__$1U, staticRenderFns: __vue_staticRenderFns__$1U },
    __vue_inject_styles__$1V,
    __vue_script__$1V,
    __vue_scope_id__$1V,
    __vue_is_functional_template__$1V,
    __vue_module_identifier__$1V,
    false,
    createInjector,
    undefined,
    undefined
  );

var FluroEditor = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': __vue_component__$1U
});

//

var script$1W = {
  components: {
    FluroInlineEdit: __vue_component__$L,
    FluroEditor: __vue_component__$1U
  },
  props: {
    value: {
      type: Object,
      required: true
    },
    state: {
      type: String
    },
    // card: {
    //     type: Object,
    // },
    definition: {
      type: Object
    },
    card: {
      type: Object
    }
  },

  mounted() {
    if (this.value.immediateModal) {
      this.edit();
    }
  },

  data() {
    var copy = JSON.parse(JSON.stringify(this.value));

    if (copy.autofocus) {
      delete copy.autofocus;
    }

    if (copy.immediateModal) {
      console.log('Immediate Modal!', this.value);
      delete copy.immediateModal;
    }

    return {
      over: false,
      checked: false,
      model: copy
    };
  },

  watch: {
    value(val) {
      this.model = val; //JSON.parse(JSON.stringify(this.value));
    }

  },
  methods: {
    clicked() {
      var self = this;

      switch (self.mode) {
        case 'edit':
          self.edit();
          break;

        case 'do':
          self.prompt();
          break;
      }
    },

    edit() {
      var self = this; /////////////////////////////////////
      // FluroTaskEditModal.$on('input', function(model) {
      //     console.log('INPUT BABY')
      //     self.model = model;
      // })
      // 

      function callback(data) {
        self.model = data;
        self.update();
      } /////////////////////////////////////


      return self.$fluro.modal({
        component: __vue_component__$1T,
        options: {
          task: self.model,
          card: self.card,
          definition: self.definition,
          callback
        }
      }).then(function (result) {
        self.model = result;
        self.update();
      }).catch(function (err) {//Nothing happened
      });
    },

    update() {
      this.$emit('input', this.model);
    },

    prompt() {
      var self = this; /////////////////////////////////////

      var cardTask = this.model; /////////////////////////////////////

      var currentState = lodash.chain(self.definition).get('data.states').find(function (state) {
        return state.key == self.card.state;
      }).value(); /////////////////////////////////////


      var taskLists = currentState.taskLists || [];

      var matchingTask = lodash.chain(taskLists).map('tasks').flatten().find(function (task) {
        return task.name == cardTask.name;
      }).value(); /////////////////////////////////////
      // var getCurrentColumnTask = 
      // console.log('Prompt Task ', self.model, matchingTask)


      return self.$fluro.modal({
        component: __vue_component__$1S,
        options: {
          task: matchingTask || self.model,
          card: self.card
        }
      }).then(function (result) {
        self.model.status = result;
        self.update();
      }).catch(function (err) {//Nothing happened
      });
    }

  }
};

/* script */
const __vue_script__$1W = script$1W;

/* template */
var __vue_render__$1V = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-task-item",class:[_vm.model.status, {hover:_vm.over}],on:{"mouseover":function($event){_vm.over = true;},"mouseout":function($event){_vm.over = false;},"click":function($event){return _vm.clicked()}}},[_c('v-layout',{attrs:{"align-center":"","row":""}},[_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"task-icon",on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.prompt()}}},[_c('v-btn',{staticClass:"ma-0 mr-2",attrs:{"icon":""}},[_c('span',{staticClass:"checkbox-outer",class:_vm.model.status},[(_vm.model.status == 'pending')?_c('fluro-icon',{attrs:{"library":"fas","icon":"minus"}}):(_vm.model.status == 'failed')?_c('fluro-icon',{attrs:{"library":"fas","icon":"exclamation"}}):_c('fluro-icon',{attrs:{"library":"fas","icon":"check"}})],1)])],1)]),_vm._v(" "),_c('v-flex',[_c('fluro-inline-edit',{scopedSlots:_vm._u([{key:"default",fn:function(){return [_c('strong',[_vm._v(_vm._s(_vm.model.name))])]},proxy:true},{key:"edit",fn:function(ref){
var props = ref.props;
var blur = ref.blur;
var focus = ref.focus;
return [_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.name),expression:"model.name"}],staticClass:"input",domProps:{"value":(_vm.model.name)},on:{"focus":function($event){return focus($event)},"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.model, "name", $event.target.value);},_vm.update],"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return blur($event)},"blur":blur}})]}}])}),_vm._v(" "),_c('div',{staticClass:"wrap"},[_c('fluro-inline-edit',{scopedSlots:_vm._u([{key:"default",fn:function(){return [_c('div',{staticClass:"sm muted",domProps:{"innerHTML":_vm._s(_vm.model.description)}}),_vm._v(" "),_c('div',{staticClass:"detail-placeholder"},[(!_vm.model.description || !_vm.model.description.length)?_c('div',{staticClass:"sm muted"},[_vm._v("Click here to add more description")]):_vm._e()])]},proxy:true},{key:"edit",fn:function(ref){
var props = ref.props;
var blur = ref.blur;
var focus = ref.focus;
return [_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.description),expression:"model.description"}],staticClass:"input",attrs:{"placeholder":"Add more details to this task"},domProps:{"value":(_vm.model.description)},on:{"focus":function($event){return focus($event)},"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.model, "description", $event.target.value);},_vm.update],"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return blur($event)},"blur":blur}})]}}])})],1)],1),_vm._v(" "),_c('v-flex',{staticClass:"edit-button",attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.edit($event)}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1)],1)],1)};
var __vue_staticRenderFns__$1V = [];

  /* style */
  const __vue_inject_styles__$1W = function (inject) {
    if (!inject) return
    inject("data-v-1cba7504_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-task-item{padding:10px 3px 5px 3px;border-radius:3px;font-size:1.1em;cursor:pointer}.fluro-task-item .input{display:block;padding:5px;background:#fff;border:1px solid #2ad4b9;width:100%}.fluro-task-item .detail-placeholder,.fluro-task-item .edit-button,.fluro-task-item .hover{opacity:0}.fluro-task-item:hover{opacity:.8}.fluro-task-item:hover .detail-placeholder,.fluro-task-item:hover .edit-button,.fluro-task-item:hover .hover{opacity:1}.fluro-task-item.complete{color:rgba(29,92,31,.4);text-decoration:line-through}.fluro-task-item.pending{background-color:#fef8f3;border-color:#f0974e;color:#ec7b1f}.fluro-task-item.failed{background-color:#f6d3dc;border-color:#d93e63;color:#691529}.fluro-task-item p:last-child{margin-bottom:0}.fluro-task-item .wrap{max-width:500px}.fluro-task-item .v-btn .checkbox-outer{background:#fff;border-radius:2px;border:2px solid rgba(0,0,0,.2);width:25px;height:25px;display:inline-block;padding:0;margin:0;line-height:25px;text-align:center;font-size:14px}.fluro-task-item .v-btn .checkbox-outer svg{opacity:0}.fluro-task-item .v-btn .checkbox-outer.complete{background:#4cc650;color:#fff;border-color:#4cc650!important}.fluro-task-item .v-btn .checkbox-outer.complete svg{opacity:1}.fluro-task-item .v-btn .checkbox-outer.failed{background:#d93e63;color:#fff;border-color:#d93e63!important}.fluro-task-item .v-btn .checkbox-outer.failed svg{opacity:1}.fluro-task-item .v-btn .checkbox-outer.pending{background:#f0974e;color:#fff;border-color:#f0974e!important}.fluro-task-item .v-btn .checkbox-outer.pending svg{opacity:1}.fluro-task-item .v-btn:hover .checkbox-outer{border:2px solid rgba(0,0,0,.5)}.fluro-task-item .v-btn:hover .checkbox-outer svg{opacity:.5}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1W = undefined;
  /* module identifier */
  const __vue_module_identifier__$1W = undefined;
  /* functional template */
  const __vue_is_functional_template__$1W = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1V = normalizeComponent(
    { render: __vue_render__$1V, staticRenderFns: __vue_staticRenderFns__$1V },
    __vue_inject_styles__$1W,
    __vue_script__$1W,
    __vue_scope_id__$1W,
    __vue_is_functional_template__$1W,
    __vue_module_identifier__$1W,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1X = {
  components: {
    // draggable,
    draggable,
    FluroTaskItem: __vue_component__$1V,
    FluroInlineEdit: __vue_component__$L
  },
  props: {
    card: {
      type: Object
    },
    editMode: {
      type: Boolean
    },
    value: {
      type: Object,
      required: true
    },
    state: {
      type: String,
      required: true
    },
    // card: {
    //     type: Object,
    //     required: true,
    // },
    definition: {
      type: Object,
      required: true
    }
  },

  data() {
    var copy = JSON.parse(JSON.stringify(this.value));
    delete copy.autofocus;
    return {
      over: false,
      actionsOpen: false,
      model: copy,
      proposedTaskName: ''
    };
  },

  watch: {
    value() {
      this.model = JSON.parse(JSON.stringify(this.value));
    }

  },
  methods: {
    newTaskMore() {
      var self = this;
      self.model.tasks.push({
        immediateModal: true,
        name: self.proposedTaskName,
        required: true,
        state: self.state,
        status: 'incomplete'
      });
      self.proposedTaskName = '';
      self.update();
    },

    pushProposedTask(blur) {
      var self = this;

      if (self.proposedTaskName && self.proposedTaskName.length) {
        self.model.tasks.push({
          autofocus: true,
          name: String(self.proposedTaskName),
          required: true,
          state: self.state
        });
        self.update();
      }

      self.proposedTaskName = '';

      if (blur) {
        blur();
      }
    },

    addTask() {
      var self = this;
      self.model.tasks.push({
        name: 'New task',
        required: true,
        state: self.state,
        status: 'incomplete'
      });
      self.update();
    },

    selectState(key) {
      this.model.state = key;
      this.update();
    },

    dragStart() {},

    dragEnd() {
      this.update();
    },

    onChange() {
      this.update();
    },

    update() {
      this.$emit('input', this.model);
    },

    remove() {
      this.update();
      this.$emit('remove', this.model);
    }

  },
  computed: {
    dragOptions() {
      return {
        group: 'tasks',
        animation: 150
      };
    },

    requiredMessage() {
      var modelState = this.model.state;

      if (modelState) {
        var matchingState = lodash.find(this.states, {
          key: modelState
        });

        if (matchingState) {
          return `Required to complete <strong>${matchingState.title}</strong>`;
        }
      }
    },

    states() {
      return lodash.get(this.definition, 'data.states');
    },

    availableActions() {
      var self = this;
      return [{
        title: `Edit '${self.model.title}'`,
        click: function () {}
      }];
    }

  }
};

/* script */
const __vue_script__$1X = script$1X;

/* template */
var __vue_render__$1W = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-task-list"},[_c('v-layout',{attrs:{"align-center":"","row":""}},[_c('v-flex',{staticStyle:{"padding":"5px"}},[_c('h5',[_c('fluro-inline-edit',{scopedSlots:_vm._u([{key:"default",fn:function(){return [_vm._v("\n                        "+_vm._s(_vm.model.title)+"\n                    ")]},proxy:true},{key:"edit",fn:function(ref){
var props = ref.props;
var blur = ref.blur;
var focus = ref.focus;
return [_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.model.title),expression:"model.title"}],attrs:{"block":""},domProps:{"value":(_vm.model.title)},on:{"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.model, "title", $event.target.value);},_vm.update],"focus":function($event){return focus($event)},"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return blur($event)},"blur":blur}})]}}])})],1),_vm._v(" "),(_vm.requiredMessage)?_c('p',{staticClass:"help-block",domProps:{"innerHTML":_vm._s(_vm.requiredMessage)}}):_vm._e()]),_vm._v(" "),_c('v-flex',{staticClass:"hover",attrs:{"shrink":""}},[_c('v-menu',{attrs:{"left":true,"fixed":true,"transition":"slide-y-transition","offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
return [_c('v-btn',_vm._g({directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"ma-0",attrs:{"content":"More Options","icon":"","flat":""}},on),[(_vm.actionsOpen)?_c('fluro-icon',{attrs:{"icon":"times"}}):_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)]}}]),model:{value:(_vm.actionsOpen),callback:function ($$v) {_vm.actionsOpen=$$v;},expression:"actionsOpen"}},[_vm._v(" "),_c('v-list',{attrs:{"dense":""}},[_vm._l((_vm.states),function(state){return _c('v-list-tile',{on:{"click":function($event){return _vm.selectState(state.key)}}},[_c('v-list-tile-content',[_vm._v("Mark as required to complete '"+_vm._s(state.title)+"'")])],1)}),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){return _vm.selectState(null)}}},[_c('v-list-tile-content',[_vm._v("Disconnect from process")])],1),_vm._v(" "),_c('v-divider'),_vm._v(" "),_c('v-list-tile',{on:{"click":function($event){return _vm.remove()}}},[_c('v-list-tile-content',[_vm._v("Delete '"+_vm._s(_vm.model.title)+"'")])],1)],2)],1)],1)],1),_vm._v(" "),_c('draggable',{staticClass:"task-list-items",attrs:{"list":_vm.model.tasks,"options":_vm.dragOptions},on:{"start":_vm.dragStart,"change":_vm.onChange,"end":_vm.dragEnd}},_vm._l((_vm.model.tasks),function(task,index){return _c('fluro-task-item',{key:task.guid,attrs:{"state":_vm.state,"definition":_vm.definition,"card":_vm.card},on:{"input":_vm.update},model:{value:(_vm.model.tasks[index]),callback:function ($$v) {_vm.$set(_vm.model.tasks, index, $$v);},expression:"model.tasks[index]"}})}),1),_vm._v(" "),[_c('fluro-inline-edit',{attrs:{"autofocus":_vm.value.autofocus},scopedSlots:_vm._u([{key:"default",fn:function(){return [_c('v-btn',{staticClass:"ml-0",attrs:{"small":""}},[_vm._v("\n                    Add task\n                    "),_c('fluro-icon',{attrs:{"right":"","icon":"plus"}})],1)]},proxy:true},{key:"edit",fn:function(ref){
var props = ref.props;
var blur = ref.blur;
var focus = ref.focus;
return [_c('v-layout',{attrs:{"row":""}},[_c('v-flex',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.proposedTaskName),expression:"proposedTaskName"}],attrs:{"block":"","placeholder":"Type a title for this task and then press enter"},domProps:{"value":(_vm.proposedTaskName)},on:{"blur":blur,"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.pushProposedTask()},"input":function($event){if($event.target.composing){ return; }_vm.proposedTaskName=$event.target.value;}}})]),_vm._v(" "),(_vm.proposedTaskName.length)?_c('v-flex',{attrs:{"shrink":""}},[_c('v-btn',{staticClass:"ma-0",attrs:{"icon":""},on:{"mousedown":function($event){return _vm.newTaskMore()}}},[_c('fluro-icon',{attrs:{"icon":"ellipsis-h"}})],1)],1):_vm._e()],1)]}}])})]],2)};
var __vue_staticRenderFns__$1W = [];

  /* style */
  const __vue_inject_styles__$1X = function (inject) {
    if (!inject) return
    inject("data-v-05a95970_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-task-list{margin-bottom:25px;border:1px solid rgba(0,0,0,.15);padding:10px;border-radius:3px;background:#fff}.fluro-task-list .task-list-items .fluro-task-item{background:#eee;margin-bottom:1px}.fluro-task-list .hover{opacity:0}.fluro-task-list:hover .hover{opacity:1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1X = undefined;
  /* module identifier */
  const __vue_module_identifier__$1X = undefined;
  /* functional template */
  const __vue_is_functional_template__$1X = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1W = normalizeComponent(
    { render: __vue_render__$1W, staticRenderFns: __vue_staticRenderFns__$1W },
    __vue_inject_styles__$1X,
    __vue_script__$1X,
    __vue_scope_id__$1X,
    __vue_is_functional_template__$1X,
    __vue_module_identifier__$1X,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
var script$1Y = {};

/* script */
const __vue_script__$1Y = script$1Y;

/* template */
var __vue_render__$1X = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-page-preloader"},[_c('v-progress-circular',{attrs:{"width":1,"indeterminate":""}})],1)};
var __vue_staticRenderFns__$1X = [];

  /* style */
  const __vue_inject_styles__$1Y = function (inject) {
    if (!inject) return
    inject("data-v-06a4d175_0", { source: ".border-top[data-v-06a4d175]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-06a4d175]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-06a4d175]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-06a4d175]{border-left:1px solid rgba(0,0,0,.05)}.fluro-page-preloader[data-v-06a4d175]{pointer-events:none!important;position:fixed;width:100vw;height:100vh;z-index:999;left:0;top:0;right:0;bottom:0}.fluro-page-preloader .v-progress-circular[data-v-06a4d175]{opacity:.1;width:30%!important;height:30%!important;position:absolute;left:35%;top:50%;margin-top:-15%}.fluro-page-preloader[contain][data-v-06a4d175]{width:100%;height:100%;position:absolute}.fluro-page-preloader[contain] .v-progress-circular[data-v-06a4d175]{margin-top:0;transform:translateY(-50%)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1Y = "data-v-06a4d175";
  /* module identifier */
  const __vue_module_identifier__$1Y = undefined;
  /* functional template */
  const __vue_is_functional_template__$1Y = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1X = normalizeComponent(
    { render: __vue_render__$1X, staticRenderFns: __vue_staticRenderFns__$1X },
    __vue_inject_styles__$1Y,
    __vue_script__$1Y,
    __vue_scope_id__$1Y,
    __vue_is_functional_template__$1Y,
    __vue_module_identifier__$1Y,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1Z = {
  mixins: [Layout],

  data() {
    return {
      isFocused: false,
      model: this.value,
      showOptions: false,
      debounced: null
    };
  },

  props: {
    'debounce': {
      type: Number,
      default: 500
    },
    'placeholder': {
      type: String,
      default: 'Search'
    },
    'value': {
      type: String,
      default: ''
    }
  },

  created() {
    var self = this;
    self.debounced = lodash.debounce(function () {
      // self.model = self.words;
      console.log('DEBOUNCED', self.model);
      self.$emit('input', self.model);
    }, self.debounce);
  },

  computed: {
    isActive() {
      return this.isFocused || this.model.length;
    }

  },
  methods: {
    keywordsChanged() {
      var self = this;

      if (!self.model || !self.model.length) {
        return self.clear();
      } //Call the debouncer


      self.debounced();
    },

    clear() {
      this.model = '';
      this.$emit('input', '');
    }

  } // methods: {
  //     change:_.debounce(function(keywords) {
  //         var self = this;
  //         console.log('Keywords changed', keywords);
  //         self.$emit('input', keywords)
  //         // _.debounce(function() {
  //         //     self.$emit('input', keywords)
  //         //     console.log('dEBOUNCED')
  //         // }, self.debounce)
  //     }, this.debounce),
  // }

};

/* script */
const __vue_script__$1Z = script$1Z;

/* template */
var __vue_render__$1Y = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-search-bar",class:{active:_vm.isActive}},[_c('v-container',{class:{'pa-0': _vm.$vuetify.breakpoint.xsOnly},attrs:{"py-0":""}},[_c('constrain',[_c('v-layout',{attrs:{"row":""}},[_c('v-flex',{staticClass:"search-wrapper"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.model),expression:"model"}],attrs:{"placeholder":_vm.placeholder},domProps:{"value":(_vm.model)},on:{"focus":function($event){_vm.isFocused = true;},"blur":function($event){_vm.isFocused = false;},"input":[function($event){if($event.target.composing){ return; }_vm.model=$event.target.value;},_vm.keywordsChanged]}}),_vm._v(" "),_c('div',{staticClass:"icon-search icon",class:{active:_vm.model.length},on:{"click":function($event){return _vm.clear()}}},[(_vm.model.length)?_c('fluro-icon',{attrs:{"library":"far","icon":"times"}}):_vm._e(),_vm._v(" "),(!_vm.model.length)?_c('fluro-icon',{attrs:{"library":"far","icon":"search"}}):_vm._e()],1)]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('div',{staticClass:"icon-more icon",class:{active:_vm.showOptions},on:{"click":function($event){_vm.showOptions = !_vm.showOptions;}}},[_c('fluro-icon',{attrs:{"library":"far","icon":"ellipsis-v"}})],1)])],1)],1)],1),_vm._v(" "),_c('div',{staticClass:"options"},[_c('v-slide-y-reverse-transition',[(_vm.showOptions)?_c('v-container',{attrs:{"fluid":"","pa-0":""}},[_c('v-container',[_vm._t("options")],2)],1):_vm._e()],1)],1)],1)};
var __vue_staticRenderFns__$1Y = [];

  /* style */
  const __vue_inject_styles__$1Z = function (inject) {
    if (!inject) return
    inject("data-v-2f814b2c_0", { source: ".border-top[data-v-2f814b2c]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2f814b2c]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2f814b2c]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2f814b2c]{border-left:1px solid rgba(0,0,0,.05)}.fluro-search-bar[data-v-2f814b2c]{border-top:1px solid rgba(0,0,0,.1);border-bottom:1px solid rgba(0,0,0,.1)}.fluro-search-bar .options[data-v-2f814b2c]{background:rgba(0,0,0,.03)}.fluro-search-bar .icon[data-v-2f814b2c]{height:60px;width:50px;line-height:40px;font-size:25px;display:flex;justify-content:center;align-items:center;opacity:.5}.fluro-search-bar .icon[data-v-2f814b2c]:hover{opacity:.8}.fluro-search-bar .icon.active[data-v-2f814b2c]{opacity:1}.fluro-search-bar .icon-more.active[data-v-2f814b2c]{background:rgba(0,0,0,.03)}.fluro-search-bar .search-wrapper[data-v-2f814b2c]{position:relative;display:flex}.fluro-search-bar .search-wrapper input[data-v-2f814b2c]{border:none;background:0 0;line-height:60px;font-size:22px;letter-spacing:-.03em;flex:1;padding-right:50px;width:100%}.fluro-search-bar .search-wrapper input[data-v-2f814b2c]:focus{outline:0;box-shadow:none}@media (max-width:768px){.fluro-search-bar .search-wrapper input[data-v-2f814b2c]{padding-left:15px}}.fluro-search-bar .search-wrapper .icon-search[data-v-2f814b2c]{position:absolute;right:0;top:0}.fluro-search-bar.active[data-v-2f814b2c]{background:#fff}.fluro-search-bar.active .icon-search[data-v-2f814b2c]{cursor:pointer}.fluro-search-bar.active input[data-v-2f814b2c]:before{border:10px solid red;content:\"Searching for \"}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1Z = "data-v-2f814b2c";
  /* module identifier */
  const __vue_module_identifier__$1Z = undefined;
  /* functional template */
  const __vue_is_functional_template__$1Z = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1Y = normalizeComponent(
    { render: __vue_render__$1Y, staticRenderFns: __vue_staticRenderFns__$1Y },
    __vue_inject_styles__$1Z,
    __vue_script__$1Z,
    __vue_scope_id__$1Z,
    __vue_is_functional_template__$1Z,
    __vue_module_identifier__$1Z,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$1_ = {
  name: 'fluro-icon',
  props: {
    'type': {
      type: String
    },
    'icon': {
      type: String
    },
    'library': {
      type: String,

      default() {
        return this.$fluro.global.defaultIconLibrary || 'fas';
      }

    },
    'spin': {
      type: Boolean
    }
  },
  computed: {
    fontLibrary() {
      return this.library || this.$fluro.global.defaultIconLibrary || 'fas';
    },

    iconName() {
      if (this.icon) {
        return [this.fontLibrary, this.icon];
      } else {
        return this.$fluro.types.icon(this.type, this.fontLibrary) || [this.fontLibrary, this.type];
      }
    }

  }
};

/* script */
const __vue_script__$1_ = script$1_;

/* template */
var __vue_render__$1Z = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.iconName)?_c('font-awesome-icon',{attrs:{"spin":_vm.spin,"fixed-width":"","icon":_vm.iconName}}):_vm._e()};
var __vue_staticRenderFns__$1Z = [];

  /* style */
  const __vue_inject_styles__$1_ = function (inject) {
    if (!inject) return
    inject("data-v-2508fa08_0", { source: ".border-top[data-v-2508fa08]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-2508fa08]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-2508fa08]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-2508fa08]{border-left:1px solid rgba(0,0,0,.05)}* [left][data-v-2508fa08]{margin-right:10px}* [right][data-v-2508fa08]{margin-left:10px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1_ = "data-v-2508fa08";
  /* module identifier */
  const __vue_module_identifier__$1_ = undefined;
  /* functional template */
  const __vue_is_functional_template__$1_ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1Z = normalizeComponent(
    { render: __vue_render__$1Z, staticRenderFns: __vue_staticRenderFns__$1Z },
    __vue_inject_styles__$1_,
    __vue_script__$1_,
    __vue_scope_id__$1_,
    __vue_is_functional_template__$1_,
    __vue_module_identifier__$1_,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$1$ = {
  props: {
    'realms': {
      default() {
        return [];
      },

      type: Array
    }
  },
  computed: {
    filtered() {
      return lodash.chain(this.realms).filter(function (realm) {
        if (realm._discriminatorType) {
          return;
        }

        return true;
      }).orderBy(function (realm) {
        return realm.title;
      }).value();
    } // colouredRealms() {
    //     var coloured = _.filter(this.filtered, 'bgColor');
    //     if(!coloured.length) {
    //         return this.filtered.slice(0,1);
    //     }
    // }


  }
};

/* script */
const __vue_script__$1$ = script$1$;

/* template */
var __vue_render__$1_ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"inline-tags"},_vm._l((_vm.filtered),function(realm){return _c('span',{staticClass:"inline-tag",style:({backgroundColor:realm.bgColor || 'rgba(0,0,0,0.5);', color:realm.color || 'rgba(0,0,0,0.8)' })},[_vm._v("\n"+_vm._s(realm.title)+"\n    ")])}),0)};
var __vue_staticRenderFns__$1_ = [];

  /* style */
  const __vue_inject_styles__$1$ = function (inject) {
    if (!inject) return
    inject("data-v-d8025dda_0", { source: ".border-top[data-v-d8025dda]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-d8025dda]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-d8025dda]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-d8025dda]{border-left:1px solid rgba(0,0,0,.05)}.dots[data-v-d8025dda]{display:inline-block;margin-right:5px;vertical-align:middle;white-space:nowrap}.dots .dot[data-v-d8025dda]{display:inline-block;border-radius:100%;width:14px;height:14px;margin-left:-7px;border:1px solid #fff;vertical-align:middle}.dots .dot[data-v-d8025dda]:first-child{margin-left:0}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1$ = "data-v-d8025dda";
  /* module identifier */
  const __vue_module_identifier__$1$ = undefined;
  /* functional template */
  const __vue_is_functional_template__$1$ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1_ = normalizeComponent(
    { render: __vue_render__$1_, staticRenderFns: __vue_staticRenderFns__$1_ },
    __vue_inject_styles__$1$,
    __vue_script__$1$,
    __vue_scope_id__$1$,
    __vue_is_functional_template__$1$,
    __vue_module_identifier__$1$,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$20 = {
  props: {
    options: {
      type: Object
    },
    activePanel: {
      type: Number
    }
  },

  provide() {
    return {
      panels: this.panels,
      activePanelIndex: this.activePanelIndex,
      selectPanel: this.selectPanel
    };
  },

  data() {
    return {
      panels: [],
      activePanelIndex: this.activePanel || 0
    };
  },

  watch: {
    activePanel: 'selectPanel'
  },
  methods: {
    selectPanel(index) {
      console.log('SELECT PANEL', index);
      var self = this;
      index = Math.max(index, 0);
      index = Math.min(index, self.panels.length - 1);
      self.activePanelIndex = index; // menuElement.scrollTo({
      //     // top: 100,
      //     left: target,
      //     behavior: 'smooth'
      // });

      lodash.each(self.panels, function (tab, index) {
        tab.active = index == self.activePanelIndex;
      });
    }

  }
};

/* script */
const __vue_script__$20 = script$20;

/* template */
var __vue_render__$1$ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"accordion"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$1$ = [];

  /* style */
  const __vue_inject_styles__$20 = function (inject) {
    if (!inject) return
    inject("data-v-142ed28f_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$20 = undefined;
  /* module identifier */
  const __vue_module_identifier__$20 = undefined;
  /* functional template */
  const __vue_is_functional_template__$20 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1$ = normalizeComponent(
    { render: __vue_render__$1$, staticRenderFns: __vue_staticRenderFns__$1$ },
    __vue_inject_styles__$20,
    __vue_script__$20,
    __vue_scope_id__$20,
    __vue_is_functional_template__$20,
    __vue_module_identifier__$20,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$21 = {
  props: {
    heading: {
      type: String
    }
  },
  inject: ['panels', 'activePanelIndex', 'selectPanel'],

  created() {
    // console.log('THISIIIIITY', this.panels)
    this.index = this.panels.length; // this.active = this.index == 0;

    this.panels.push(this);
  },

  computed: {
    active() {
      return this.index == this.activePanelIndex;
    }

  },

  data() {
    return {
      index: 0 // active: false,

    };
  } // methods: {
  //     act() {
  //         var self = this;
  //         //Run a batch
  //         var promise = self.$batch.run({
  //             operation: 'add tag',
  //             ids: self.ids,
  //             tags: self.$fluro.utils.arrayIDs(self.selectedTags),
  //         });
  //         //Close the modal with the promise
  //         return self.close(promise)
  //     },
  // }


};

/* script */
const __vue_script__$21 = script$21;

/* template */
var __vue_render__$20 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"accordion-panel",class:{expanded:_vm.active}},[_c('div',{staticClass:"accordion-panel-title",on:{"click":function($event){return _vm.selectPanel(_vm.index)}}},[_c('v-layout',[_c('v-flex',[_vm._v("\n                                "+_vm._s(_vm.heading)+"\n                            ")]),_vm._v(" "),_c('v-flex',{attrs:{"shrink":""}},[_c('fluro-icon',{attrs:{"icon":_vm.field.expanded ? "angle-up" : "angle-down"}})],1)],1)],1),_vm._v(" "),_c('div',{staticClass:"accordion-panel-body"},[_c('v-container',{attrs:{"fluid":""}},[_vm._t("default")],2)],1)])};
var __vue_staticRenderFns__$20 = [];

  /* style */
  const __vue_inject_styles__$21 = function (inject) {
    if (!inject) return
    inject("data-v-9b497556_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.accordion-panel{border:1px solid rgba(0,0,0,.1);margin-bottom:4px}.accordion-panel .accordion-panel-title{padding:10px;background:#eee}.accordion-panel .accordion-panel-body{max-height:0;overflow:hidden;transition:all .3s}.accordion-panel.expanded .accordion-panel-body{max-height:100vh;overflow:auto}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$21 = undefined;
  /* module identifier */
  const __vue_module_identifier__$21 = undefined;
  /* functional template */
  const __vue_is_functional_template__$21 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$20 = normalizeComponent(
    { render: __vue_render__$20, staticRenderFns: __vue_staticRenderFns__$20 },
    __vue_inject_styles__$21,
    __vue_script__$21,
    __vue_scope_id__$21,
    __vue_is_functional_template__$21,
    __vue_module_identifier__$21,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$22 = {
  mixins: [FluroSelectionMixin],

  created() {
    this.setSelection(this.value);
  },

  props: {
    'value': {
      default() {
        return [];
      },

      type: Array
    },
    'type': {
      type: String
    },
    'minimum': {
      type: Number,
      default: 0
    },
    'maximum': {
      type: Number,
      default: 0
    }
  },
  watch: {
    'model': function () {
      var self = this;
      this.$emit('input', self.model); //[self.key])
    }
  },
  computed: {
    model: {
      get() {
        return this.selection;
      },

      set(array) {
        this.selection = array;
      }

    },

    canSelectAll() {
      if (this.model.length == this.items.length) {
        return;
      }

      if (this.maximum) {
        return this.total < this.maximum;
      }

      return true;
    },

    selectionSummary() {
      if (this.multiple) {
        if (this.minimum) {
          if (this.model.length >= this.minimum) {
            return `${this.model.length} selected`;
          }

          return `${this.model.length} of ${this.minimum} required`;
        }

        if (this.maximum) {
          return `${this.model.length} of max ${this.maximum} selected`;
        }
      }

      return `${this.model.length} selected`;
    },

    search: {
      get() {
        return this.terms;
      },

      set: lodash.debounce(function (newValue) {
        this.terms = newValue;
      }, 500)
    },

    multiple() {
      return this.maximum != 1;
    },

    total() {
      return this.model.length;
    },

    canAddValue() {
      if (this.maximum) {
        return this.total < this.maximum;
      }

      return true;
    }

  },

  data() {
    return {
      loading: true,
      terms: '',
      // selection: this.value,
      pageOptions: [10, 20, 60],
      headers: [{
        text: '',
        align: 'left',
        sortable: false,
        value: ''
      }, {
        text: 'Title',
        align: 'left',
        sortable: true,
        value: 'title'
      }, {
        text: 'Updated',
        align: 'left',
        sortable: true,
        value: 'updated'
      }, {
        text: 'Created',
        align: 'left',
        sortable: true,
        value: 'created'
      }]
    };
  },

  methods: {
    selectAll() {
      if (this.maximum) {
        this.setSelection(this.items.slice(0, this.maximum));
      } else {
        this.setSelection(this.items);
      }
    },

    clicked(item) {
      if (this.isSelected(item)) {
        return this.deselect(item);
      }

      if (this.multiple) {
        if (this.canAddValue) {
          this.select(item);
        }
      } else {
        this.setSelection([item]);
      }
    },

    close() {
      this.$emit('close');
    },

    summary(item) {
      var self = this;
      var firstLine = item.firstLine || '';

      switch (item._type) {
        case 'event':
          firstLine = `${self.$fluro.date.readableEventDate(item)} ${firstLine}`;
          break;
      }

      return firstLine;
    }

  },
  asyncComputed: {
    items: {
      get() {
        var self = this; /////////////////////////////////////////////

        var endpoint = `/content`;

        if (self.type && self.type.length) {
          endpoint = `/content/${self.type}`;
        } /////////////////////////////////////////////


        self.loading = true; // /////////////////////////////////////////////
        // var countRequest = self.$fluro.api.get(endpoint, {
        //     params: {
        //         count: true,
        //     }
        // });

        var itemsRequest = self.$fluro.api.get(endpoint, {
          params: {
            list: true,
            simple: true
          }
        });
        return new Promise(function (resolve, reject) {
          itemsRequest.then(function (res) {
            resolve(res.data);
            self.loading = false;
          }).catch(function (err) {
            reject(err);
            self.loading = false;
          });
        }); /////////////////////////////////////////////
        // return new Promise(function(resolve, reject) {
        // Promise.all([
        // countRequest,
        // itemsRequest,
        // ])
        //         .then(function(results) {
        //             self.loading = false;
        //             console.log('RESULTS', results);
        //             resolve({
        //                 items: results[1].data,
        //                 total: results[0].data.total,
        //             })
        //         })
        //         .catch(function(err) {
        //             self.loading = false;
        //             return reject(err);
        //         });
        // })
      }

    }
  }
};

/* script */
const __vue_script__$22 = script$22;

/* template */
var __vue_render__$21 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-content-browser"},[_c('v-toolbar',{staticClass:"elevation-0"},[_c('v-spacer'),_vm._v(" "),_c('v-text-field',{attrs:{"solo":"","append-icon":"search","label":"Search","single-line":"","hide-details":""},model:{value:(_vm.search),callback:function ($$v) {_vm.search=$$v;},expression:"search"}}),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"color":"primary"},on:{"click":function($event){return _vm.close()}}},[_vm._v("\n            Done\n        ")])],1),_vm._v(" "),_c('v-card',[(_vm.loading)?[_c('v-card-text',{staticClass:"text-sm-center"},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)]:[(_vm.model.length)?_c('v-toolbar',{staticClass:"elevation-0"},[_c('div',[_vm._v(_vm._s(_vm.selectionSummary))]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-item-group',[(_vm.canSelectAll)?_c('v-btn',{attrs:{"small":""},on:{"click":function($event){return _vm.selectAll()}}},[_vm._v("\n                        Select all "+_vm._s(_vm.items.length)+"\n                    ")]):_vm._e(),_vm._v(" "),_c('v-btn',{attrs:{"small":""},on:{"click":function($event){return _vm.deselectAll()}}},[_vm._v("\n                        Deselect "+_vm._s(_vm.maximum == 1 ? '' : 'all')+"\n                    ")])],1)],1):_vm._e(),_vm._v(" "),(_vm.items)?[_c('v-data-table',{attrs:{"item-key":"_id","search":_vm.search,"select-all":_vm.multiple,"rows-per-page-items":_vm.pageOptions,"disable-initial-sort":true,"hide-headers":_vm.$vuetify.breakpoint.xsOnly,"headers":_vm.headers,"items":_vm.items},scopedSlots:_vm._u([{key:"items",fn:function(props){return [_c('tr',{attrs:{"active":_vm.isSelected(props.item)},on:{"!click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.clicked(props.item)}}},[(_vm.multiple)?_c('td',[_c('v-checkbox',{attrs:{"hide-details":""},model:{value:(props.selected),callback:function ($$v) {_vm.$set(props, "selected", $$v);},expression:"props.selected"}})],1):_vm._e(),_vm._v(" "),_c('td',{staticClass:"text-xs-center fixed-w"},[(props.item._type == 'image')?[_c('fluro-image',{attrs:{"item":props.item,"spinner":true,"width":50,"height":50}})]:[_c('fluro-icon',{attrs:{"type":props.item._type}})]],2),_vm._v(" "),_c('td',[_c('div',[_vm._v(_vm._s(props.item.title))]),_vm._v(" "),_c('div',{staticClass:"small muted"},[_vm._v(_vm._s(_vm.summary(props.item)))])]),_vm._v(" "),_c('td',[_vm._v(_vm._s(_vm._f("timeago")(props.item.created)))]),_vm._v(" "),_c('td',[_vm._v(_vm._s(_vm._f("timeago")(props.item.updated)))])])]}}],null,false,1928552038),model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}})]:_vm._e()]],2)],1)};
var __vue_staticRenderFns__$21 = [];

  /* style */
  const __vue_inject_styles__$22 = function (inject) {
    if (!inject) return
    inject("data-v-92021f2a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}td.fixed-w{padding:0!important}.fluro-content-browser{flex:1;display:flex;flex-direction:column;overflow:hidden}.fluro-content-browser .v-card{flex:1;overflow:auto}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$22 = undefined;
  /* module identifier */
  const __vue_module_identifier__$22 = undefined;
  /* functional template */
  const __vue_is_functional_template__$22 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$21 = normalizeComponent(
    { render: __vue_render__$21, staticRenderFns: __vue_staticRenderFns__$21 },
    __vue_inject_styles__$22,
    __vue_script__$22,
    __vue_scope_id__$22,
    __vue_is_functional_template__$22,
    __vue_module_identifier__$22,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$23 = {
  props: {
    'lang': {
      type: String,
      default: 'javascript'
    }
  },

  mounted() {
    // console.log('MOUNTED')
    var block = this.$refs.code;

    if (window.hljs) {
      console.log(block);
      window.hljs.highlightBlock(block);
    }
  }

};

/* script */
const __vue_script__$23 = script$23;

/* template */
var __vue_render__$22 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('code',{ref:"code",staticClass:"fluro-code-highlight"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$22 = [];

  /* style */
  const __vue_inject_styles__$23 = function (inject) {
    if (!inject) return
    inject("data-v-d4d4db10_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.hljs-comment,.hljs-quote{color:#999}.hljs-deletion,.hljs-name,.hljs-regexp,.hljs-selector-class,.hljs-selector-id,.hljs-tag,.hljs-template-variable,.hljs-variable{color:#f2777a}.hljs-built_in,.hljs-builtin-name,.hljs-link,.hljs-literal,.hljs-meta,.hljs-number,.hljs-params,.hljs-type{color:#f99157}.hljs-attribute{color:#fc6}.hljs-addition,.hljs-bullet,.hljs-string,.hljs-symbol{color:#9c9}.hljs-section,.hljs-title{color:#69c}.hljs-keyword,.hljs-selector-tag{color:#c9c}.hljs{display:block;overflow-x:auto;background:#2d2d2d;color:#ccc;padding:.5em}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$23 = undefined;
  /* module identifier */
  const __vue_module_identifier__$23 = undefined;
  /* functional template */
  const __vue_is_functional_template__$23 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$22 = normalizeComponent(
    { render: __vue_render__$22, staticRenderFns: __vue_staticRenderFns__$22 },
    __vue_inject_styles__$23,
    __vue_script__$23,
    __vue_scope_id__$23,
    __vue_is_functional_template__$23,
    __vue_module_identifier__$23,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/////////////////////////////////////////////////////
var script$24 = {
  // components:{
  // VueSignature,
  // },
  props: {
    'outline': {
      type: Boolean
    },
    'hint': {
      type: String
    },
    'required': {
      type: [Boolean, Number]
    },
    'label': {
      type: String
    },
    'value': {
      type: Object
    },
    'success': {
      type: Boolean
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    },
    'formFields': {
      type: Array
    }
  },

  data() {
    return {
      model: this.value
    };
  },

  watch: {
    value(v) {
      this.model = v;
      this.createVariables(v);
    },

    'model.academicCalendar': function () {
      this.$emit('calendar', this.model.academicCalendar);
    },
    'model.academicGrade': function () {
      this.$emit('grade', this.model.academicGrade);
    }
  },
  computed: {
    errorMessages() {
      return [];
    },

    gradeHint() {
      return `(As of ${new Date().getFullYear()})`;
    },

    showOutline() {
      return this.outline || this.options.outline;
    },

    grades() {
      var self = this;
      return self.model.academicCalendar ? self.model.academicCalendar.grades : [];
    }

  },

  created() {
    if (this.formFields) {
      this.$set(this.formFields, this.formFields.length, this);
    }

    this.createVariables(); ////////////////////////////////////////////
    //Emit itself being created

    this.$emit('created', this);
  },

  beforeDestroy() {
    if (this.formFields) {
      this.formFields.splice(this.formFields.indexOf(this), 1);
    }
  },

  methods: {
    gradeChanged(v) {
      this.$set(this.model, 'academicGrade', v);
      this.valueChanged();
    },

    calendarChanged(v) {
      this.$set(this.model, 'academicCalendar', v);
      this.valueChanged();
    },

    createVariables() {
      if (!this.model.academicCalendar) {
        this.$set(this.model, 'academicCalendar', undefined);
      }

      if (!this.model.academicGrade) {
        this.$set(this.model, 'academicGrade', undefined);
      }
    },

    valueChanged() {
      this.$emit('value', this.model);
    },

    reset() {// console.log('RESET')
      // this.model.academicGrade = null;
      // this.model.academicCalendar = null;
    }

  },
  asyncComputed: {
    calendars: {
      default: [],

      get() {
        var self = this;
        return new Promise(function (resolve, reject) {
          self.$fluro.api.get(`/contact/schools`, {
            searchInheritable: true,
            allDefinitions: true
          }).then(function (res) {
            var options = res.data;
            options.unshift({
              title: 'None',
              _id: ''
            });
            resolve(options);
            console.log('GET GRADES'); // self.grades = self.selectedCalendar.grades;
          }, reject);
        });
      }

    }
  }
};

/* script */
const __vue_script__$24 = script$24;

/* template */
var __vue_render__$23 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-academic-select"},[_c('v-input',{staticClass:"no-flex",attrs:{"label":_vm.label,"required":_vm.required,"error-messages":_vm.errorMessages,"hint":_vm.hint}},[_c('v-layout',{staticClass:"fluro-academic-field",attrs:{"row":"","wrap":""}},[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('v-select',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":"School / Institution","no-data-text":"No options available","item-text":"title","item-value":"_id","items":_vm.calendars,"return-object":true,"error-messages":_vm.errorMessages},on:{"input":_vm.calendarChanged},model:{value:(_vm.model.academicCalendar),callback:function ($$v) {_vm.$set(_vm.model, "academicCalendar", $$v);},expression:"model.academicCalendar"}})],1),_vm._v(" "),(_vm.model.academicCalendar)?_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('v-autocomplete',{attrs:{"outline":_vm.showOutline,"success":_vm.success,"required":_vm.required,"label":"Grade / Year Level","persistent-hint":true,"hint":_vm.gradeHint,"no-data-text":"No options available","item-text":"title","item-value":"key","items":_vm.grades,"error-messages":_vm.errorMessages},on:{"input":_vm.gradeChanged},model:{value:(_vm.model.academicGrade),callback:function ($$v) {_vm.$set(_vm.model, "academicGrade", $$v);},expression:"model.academicGrade"}})],1):_vm._e()],1)],1)],1)};
var __vue_staticRenderFns__$23 = [];

  /* style */
  const __vue_inject_styles__$24 = function (inject) {
    if (!inject) return
    inject("data-v-1d22e6b9_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$24 = undefined;
  /* module identifier */
  const __vue_module_identifier__$24 = undefined;
  /* functional template */
  const __vue_is_functional_template__$24 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$23 = normalizeComponent(
    { render: __vue_render__$23, staticRenderFns: __vue_staticRenderFns__$23 },
    __vue_inject_styles__$24,
    __vue_script__$24,
    __vue_scope_id__$24,
    __vue_is_functional_template__$24,
    __vue_module_identifier__$24,
    false,
    createInjector,
    undefined,
    undefined
  );

var script$25 = {
  props: {
    'title': {
      type: String
    },
    'type': {
      type: String
    },
    'cancelButtonText': {
      type: String
    },
    'saveButtonText': {
      type: String,
      default: 'Submit'
    },
    'target': {
      type: [Object, String]
    },
    'options': {
      default: function () {
        return {};
      },
      type: Object
    }
  },

  data() {
    return {
      model: {
        data: {}
      },
      serverErrors: '',
      errorMessages: [],
      thread: [],
      state: 'ready'
    };
  },

  created() {},

  mounted() {
    var self = this;
    self.$watch(function () {
      return lodash.get(self.$refs, 'form.errorMessages');
    }, self.validate);
    self.validate();
  },

  computed: _objectSpread2$1({
    targetID() {
      return this.$fluro.utils.getStringID(this.target);
    },

    hasErrors() {
      // console.log('Has Errors?', this.errorMessages)
      return this.errorMessages.length ? true : false;
    },

    displayTitle() {
      if (this.title) {
        return this.title;
      }

      return `Add ${this.form.title}`;
    },

    allowed() {
      var canCreate = this.$fluro.access.can('create', this.type, 'post');
      var canSubmit = this.$fluro.access.can('submit', this.type, 'post');
      return canCreate || canSubmit;
    }

  }, mapFields('fluro', ['application', //The Fluro application and all of it's permissions and data
  'user' //The authenticated user if they log in
  ])),
  components: {
    FluroContentForm: __vue_component__$H
  },
  asyncComputed: {
    form: {
      default: [],

      get() {
        return this.$fluro.content.type(this.type);
      }

    }
  },
  methods: {
    validate() {
      this.errorMessages = lodash.get(this.$refs, 'form.errorMessages');
    },

    clear() {
      this.reset();
    },

    reset() {
      var self = this; //Reset the model
      // Vue.set(self.model, 'data', {});

      self.$set(self.model, 'data', {});
      self.state = 'ready';
      self.$emit('reset');
    },

    submit() {
      // console.log('SUBMIT NOW', this)
      var self = this;
      self.validate();
      self.state = 'processing'; //Create the post

      self.$fluro.content.submitPost(this.target, this.type, this.model).then(function (post) {
        // console.log('Created the post!', post);
        self.$emit('created', post);
        self.$emit('success', post);
        self.reset();
      }, function (err) {
        //Dispatch an error
        self.$fluro.error(err);
        self.state = 'error';
        self.$emit('error', err);
        self.serverErrors = self.$fluro.utils.errorMessage(err);
      });
    }

  }
};

/* script */
const __vue_script__$25 = script$25;

/* template */
var __vue_render__$24 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.form)?[(!_vm.allowed)?[(_vm.user)?[_vm._t("authenticated",null,{"form":_vm.form})]:_vm._e(),_vm._v(" "),(!_vm.user)?[_vm._t("unauthenticated",null,{"form":_vm.form})]:_vm._e()]:_vm._e(),_vm._v(" "),(_vm.allowed)?[_c('div',{staticClass:"fluro-post-form"},[_vm._t("header",[_c('v-layout',[_c('fluro-avatar',{attrs:{"left":"","md":"","id":_vm.user.persona,"type":"persona"}}),_vm._v(" "),_c('v-flex',{attrs:{"d-flex":""}},[_c('h3',{attrs:{"title":""}},[_vm._v(_vm._s(_vm.displayTitle))])])],1)],{"title":_vm.displayTitle,"form":_vm.form,"targetID":_vm.targetID}),_vm._v(" "),_c('form',{attrs:{"disabled":_vm.state == 'processing'},on:{"submit":function($event){$event.preventDefault();return _vm.submit($event)}}},[_c('fluro-content-form',{ref:"form",attrs:{"options":_vm.options,"fields":_vm.form.fields},model:{value:(_vm.model.data),callback:function ($$v) {_vm.$set(_vm.model, "data", $$v);},expression:"model.data"}}),_vm._v(" "),_c('div',{staticClass:"actions"},[(_vm.state == 'processing')?[_c('v-btn',{staticClass:"mx-0",attrs:{"disabled":true}},[_vm._v("\n                                Processing\n                                "),_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)]:(_vm.state == 'error')?[_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n                                "+_vm._s(_vm.serverErrors)+"\n                            ")]),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",attrs:{"color":"primary"},nativeOn:{"click":function($event){$event.preventDefault();_vm.state = 'ready';}}},[_vm._v("\n                                Try Again\n                            ")])]:[(_vm.hasErrors)?_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n                                Please check the following issues before submitting\n                                "),_vm._l((_vm.errorMessages),function(error){return _c('div',[_c('strong',[_vm._v(_vm._s(error.title))]),_vm._v(": "+_vm._s(error.messages[0])+"\n                                ")])})],2):_vm._e(),_vm._v(" "),_vm._t("submit",[_c('v-btn',{staticClass:"mx-0",attrs:{"disabled":_vm.hasErrors,"type":"submit","color":"primary"}},[_vm._v("\n                                    "+_vm._s(_vm.saveButtonText)+"\n                                ")])],{"hasErrors":_vm.hasErrors})]],2)],1)],2)]:_vm._e()]:_vm._e()],2)};
var __vue_staticRenderFns__$24 = [];

  /* style */
  const __vue_inject_styles__$25 = function (inject) {
    if (!inject) return
    inject("data-v-66b30641_0", { source: ".border-top[data-v-66b30641]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-66b30641]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-66b30641]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-66b30641]{border-left:1px solid rgba(0,0,0,.05)}.fluro-post-form .v-btn .v-progress-circular[data-v-66b30641]{width:15px!important;height:15px!important;margin-left:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$25 = "data-v-66b30641";
  /* module identifier */
  const __vue_module_identifier__$25 = undefined;
  /* functional template */
  const __vue_is_functional_template__$25 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$24 = normalizeComponent(
    { render: __vue_render__$24, staticRenderFns: __vue_staticRenderFns__$24 },
    __vue_inject_styles__$25,
    __vue_script__$25,
    __vue_scope_id__$25,
    __vue_is_functional_template__$25,
    __vue_module_identifier__$25,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$26 = {
  props: {
    'method': {
      type: String,
      default: 'post'
    },
    'url': {
      type: String,
      required: true
    },
    'fields': {
      type: Array,
      required: true
    },
    'submitText': {
      type: String,
      default: 'Submit'
    },
    'value': {
      type: Object,

      default() {
        return {};
      }

    }
  },

  data() {
    return {
      model: this.value,
      //JSON.parse(JSON.stringify(this.value)),
      state: 'ready',
      serverErrors: '',
      errorMessages: []
    };
  },

  components: {
    FluroContentForm: __vue_component__$H
  },

  mounted() {
    var self = this;
    self.$watch(function () {
      return lodash.get(self.$refs, 'form.errorMessages');
    }, self.validate);
    self.validate();
  },

  computed: {
    submitButtonText() {
      return this.submitText;
    },

    hasErrors() {
      // console.log('Has Errors?', this.errorMessages)
      return this.errorMessages.length ? true : false;
    }

  },
  methods: {
    validate() {
      this.errorMessages = lodash.get(this.$refs, 'form.errorMessages');
    },

    clear() {
      this.reset();
    },

    reset() {
      var self = this; //Reset the model
      // Vue.set(self.model, 'data', {});

      self.model = {};
      self.state = 'ready';
      self.$emit('reset');
    },

    submit() {
      var self = this;
      self.validate();
      self.state = 'processing';
      var request;

      switch (String(self.method).toLowerCase()) {
        case 'post':
          request = self.$fluro.api.post;
          break;

        case 'put':
          request = self.$fluro.api.put;
          break;

        default:
          return;
      } //Create the post


      request(this.url, this.model).then(function (res) {
        // console.log('Created the post!', post);
        self.$emit('success', res.data);
        self.reset();
      }, function (err) {
        //Dispatch an error
        self.$fluro.error(err);
        self.state = 'error';
        self.$emit('error', err);
        self.serverErrors = self.$fluro.utils.errorMessage(err);
      });
    }

  }
};

/* script */
const __vue_script__$26 = script$26;

/* template */
var __vue_render__$25 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{attrs:{"disabled":_vm.state == 'processing'},on:{"submit":function($event){$event.preventDefault();return _vm.submit($event)}}},[_c('fluro-content-form',{ref:"form",attrs:{"fields":_vm.fields},model:{value:(_vm.model),callback:function ($$v) {_vm.model=$$v;},expression:"model"}}),_vm._v(" "),_c('div',{staticClass:"actions"},[(_vm.state == 'processing')?[_c('v-btn',{staticClass:"mx-0",attrs:{"disabled":true}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProcessing\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_c('v-progress-circular',{attrs:{"indeterminate":""}})],1)]:(_vm.state == 'error')?[_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.serverErrors)+"\n\t\t\t\t\t\t\t\t\t\t\t\t")]),_vm._v(" "),_c('v-btn',{staticClass:"mx-0",attrs:{"color":"primary"},nativeOn:{"click":function($event){$event.preventDefault();_vm.state = 'ready';}}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTry Again\n\t\t\t\t\t\t\t\t\t\t\t\t")])]:[(_vm.hasErrors)?_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPlease check the following issues before submitting\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),_vm._l((_vm.errorMessages),function(error){return _c('div',[_c('strong',[_vm._v(_vm._s(error.title))]),_vm._v(": "+_vm._s(error.messages[0])+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])})],2):_vm._e(),_vm._v(" "),_vm._t("submit",[_c('v-btn',{staticClass:"mx-0",attrs:{"disabled":_vm.hasErrors,"type":"submit","color":"primary"}},[_vm._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"+_vm._s(_vm.submitButtonText)+"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")])],{"hasErrors":_vm.hasErrors})]],2)],1)};
var __vue_staticRenderFns__$25 = [];

  /* style */
  const __vue_inject_styles__$26 = function (inject) {
    if (!inject) return
    inject("data-v-2b14b49a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$26 = undefined;
  /* module identifier */
  const __vue_module_identifier__$26 = undefined;
  /* functional template */
  const __vue_is_functional_template__$26 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$25 = normalizeComponent(
    { render: __vue_render__$25, staticRenderFns: __vue_staticRenderFns__$25 },
    __vue_inject_styles__$26,
    __vue_script__$26,
    __vue_scope_id__$26,
    __vue_is_functional_template__$26,
    __vue_module_identifier__$26,
    false,
    createInjector,
    undefined,
    undefined
  );

var script$27 = {
  props: {
    'value': {
      type: Array
    }
  },

  data() {
    return {
      model: this.value
    };
  },

  computed: _objectSpread2$1({}, mapFields('fluro', ['application', //The Fluro application and all of it's permissions and data
  'user' //The authenticated user if they log in
  ])),
  watch: {
    value(value) {
      this.model = value;
    },

    model() {
      this.$emit('input', this.model);
    }

  }
};

/* script */
const __vue_script__$27 = script$27;

/* template */
var __vue_render__$26 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-post-thread"},[_vm._l((_vm.model),function(post){return [_vm._t("post",null,{"post":post})]})],2)};
var __vue_staticRenderFns__$26 = [];

  /* style */
  const __vue_inject_styles__$27 = function (inject) {
    if (!inject) return
    inject("data-v-44ea7db1_0", { source: ".border-top[data-v-44ea7db1]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-44ea7db1]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-44ea7db1]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-44ea7db1]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$27 = "data-v-44ea7db1";
  /* module identifier */
  const __vue_module_identifier__$27 = undefined;
  /* functional template */
  const __vue_is_functional_template__$27 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$26 = normalizeComponent(
    { render: __vue_render__$26, staticRenderFns: __vue_staticRenderFns__$26 },
    __vue_inject_styles__$27,
    __vue_script__$27,
    __vue_scope_id__$27,
    __vue_is_functional_template__$27,
    __vue_module_identifier__$27,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$28 = {
  props: {
    'target': {
      type: [String, Object],
      required: true
    },
    'stat': {
      type: String,
      required: true
    }
  },
  watch: {
    'target': 'reset',
    'stat': 'reset'
  },

  data() {
    var store = this.$fluro.stats.getUserStore(this.stat, true);
    return {
      store: store,
      statting: false,
      statted: false
    };
  },

  created() {
    this.reset();
  },

  methods: {
    reset() {
      var self = this;

      if (self.store) {
        self.store.removeEventListener('change', self.update);
      } //Stat Store


      self.statted = self.store.isStatted(self.targetID);
      self.statting = self.store.isStatting(self.targetID);
      self.store.addEventListener('change', self.update);
      self.store.refresh();
    },

    update() {
      var self = this; //console.log('check', self.target, self.targetID);

      self.statting = self.store.isStatting(self.targetID);
      self.statted = self.store.isStatted(self.targetID); //console.log('Updated stats', self);//vm.stat, vm.target);//self.stat, self.targetID, self.statting, self.statted);
    },

    toggle() {
      var self = this; //Set statting to true

      self.statting = true;
      self.store.toggle(self.targetID).then(function (res) {
        self.statted = self.store.isStatted(self.targetID);
        self.statting = false;
        self.$emit('statted', res.data);
      }).catch(function (err) {
        self.statting = false;
        self.statted = self.store.isStatted(self.targetID) || false;
      });
    },

    increment() {},

    decrement() {}

  },

  beforeDestroy() {
    this.store.removeEventListener('change', this.update);
  },

  computed: {
    pastTense() {
      if (lodash.endsWith(this.stat, 'e')) {
        return `${this.stat}d`;
      } else {
        return `${this.stat}ed`;
      }
    },

    readable() {
      if (this.statting) {
        return `processing`;
      } else {
        if (this.statted) {
          return this.pastTense;
        } else {
          return this.stat;
        }
      }
    },

    targetID() {
      return this.$fluro.utils.getStringID(this.target);
    } // statted() {
    //     return this.store.isStatted(self.targetID)
    // },
    // statting() {
    //     return this.store.isStatting(self.targetID)
    // },
    // total() {
    //     return this.store.ids.length;
    // },
    // pinIcon() {
    //     if (!this.itemID) {
    //         return ['far', 'thumbtack'];
    //     }
    //     if (this.statting) {
    //         return ['far', 'spinner-third']
    //     }
    //     if (this.statted) {
    //         return ['fas', 'thumbtack']
    //     } else {
    //         return ['far', 'thumbtack']
    //     }
    // },


  }
};

/* script */
const __vue_script__$28 = script$28;

/* template */
var __vue_render__$27 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"fluro-stat-toggle"},[_vm._t("default",[_c('a',{class:{active:_vm.statted},on:{"click":_vm.toggle}},[_vm._v(_vm._s(_vm.readable))])],{"statting":_vm.statting,"toggle":_vm.toggle,"increment":_vm.increment,"decrement":_vm.decrement,"statted":_vm.statted,"store":_vm.store})],2)};
var __vue_staticRenderFns__$27 = [];

  /* style */
  const __vue_inject_styles__$28 = function (inject) {
    if (!inject) return
    inject("data-v-a530eb90_0", { source: ".border-top[data-v-a530eb90]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-a530eb90]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-a530eb90]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-a530eb90]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$28 = "data-v-a530eb90";
  /* module identifier */
  const __vue_module_identifier__$28 = undefined;
  /* functional template */
  const __vue_is_functional_template__$28 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$27 = normalizeComponent(
    { render: __vue_render__$27, staticRenderFns: __vue_staticRenderFns__$27 },
    __vue_inject_styles__$28,
    __vue_script__$28,
    __vue_scope_id__$28,
    __vue_is_functional_template__$28,
    __vue_module_identifier__$28,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$29 = {
  props: {
    'target': {
      type: [String, Object],
      required: true
    },
    'stat': {
      type: String,
      required: true
    },
    'unique': {
      type: Boolean,
      default: false
    }
  },

  data() {
    return {
      store: null,
      processing: false,
      total: 0
    };
  },

  //Watch if any changes are made and reset
  //the stats
  watch: {
    'target': 'reset',
    'stat': 'reset',
    'unique': 'reset'
  },

  created() {
    this.reset();
  },

  methods: {
    reset() {
      var self = this; //Unlink from the current store

      if (self.store) {
        self.store.removeEventListener('change', self.update);
      }

      self.store = self.$fluro.stats.getStore(self.stat, self.targetID, self.unique); //Stat Store

      self.total = self.store.total;
      self.processing = self.store.processing;
      self.store.addEventListener('change', self.update);
    },

    update() {
      var self = this;
      self.total = self.store.total;
      self.processing = self.store.processing;
    }

  },

  beforeDestroy() {
    this.store.removeEventListener('change', this.update);
  },

  computed: {
    targetID() {
      return this.$fluro.utils.getStringID(this.target);
    }

  }
};

/* script */
const __vue_script__$29 = script$29;

/* template */
var __vue_render__$28 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"fluro-stat-total"},[_vm._t("default",[_vm._v("\n        "+_vm._s(_vm.total)+"\n    ")],{"processing":_vm.processing,"total":_vm.total,"store":_vm.store})],2)};
var __vue_staticRenderFns__$28 = [];

  /* style */
  const __vue_inject_styles__$29 = function (inject) {
    if (!inject) return
    inject("data-v-35f52270_0", { source: ".border-top[data-v-35f52270]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-35f52270]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-35f52270]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-35f52270]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$29 = "data-v-35f52270";
  /* module identifier */
  const __vue_module_identifier__$29 = undefined;
  /* functional template */
  const __vue_is_functional_template__$29 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$28 = normalizeComponent(
    { render: __vue_render__$28, staticRenderFns: __vue_staticRenderFns__$28 },
    __vue_inject_styles__$29,
    __vue_script__$29,
    __vue_scope_id__$29,
    __vue_is_functional_template__$29,
    __vue_module_identifier__$29,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$29 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"fluro-card"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$29 = [];

  /* style */
  const __vue_inject_styles__$2a = function (inject) {
    if (!inject) return
    inject("data-v-4d25572a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-card{display:block;background:#fff;margin-bottom:10px;text-align:left;border-radius:4px;overflow:hidden;box-shadow:0 3px 15px rgba(0,0,0,.1)}.fluro-card[margin]{margin-bottom:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2a = undefined;
  /* module identifier */
  const __vue_module_identifier__$2a = undefined;
  /* functional template */
  const __vue_is_functional_template__$2a = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$29 = normalizeComponent(
    { render: __vue_render__$29, staticRenderFns: __vue_staticRenderFns__$29 },
    __vue_inject_styles__$2a,
    {},
    __vue_scope_id__$2a,
    __vue_is_functional_template__$2a,
    __vue_module_identifier__$2a,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$2a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-card-body"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2a = [];

  /* style */
  const __vue_inject_styles__$2b = function (inject) {
    if (!inject) return
    inject("data-v-5eeb5852_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-card-body{padding:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2b = undefined;
  /* module identifier */
  const __vue_module_identifier__$2b = undefined;
  /* functional template */
  const __vue_is_functional_template__$2b = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2a = normalizeComponent(
    { render: __vue_render__$2a, staticRenderFns: __vue_staticRenderFns__$2a },
    __vue_inject_styles__$2b,
    {},
    __vue_scope_id__$2b,
    __vue_is_functional_template__$2b,
    __vue_module_identifier__$2b,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$2b = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-card-title"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2b = [];

  /* style */
  const __vue_inject_styles__$2c = function (inject) {
    if (!inject) return
    inject("data-v-52a27ac6_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-card-title{padding:10px 15px;background:rgba(0,0,0,.08)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2c = undefined;
  /* module identifier */
  const __vue_module_identifier__$2c = undefined;
  /* functional template */
  const __vue_is_functional_template__$2c = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2b = normalizeComponent(
    { render: __vue_render__$2b, staticRenderFns: __vue_staticRenderFns__$2b },
    __vue_inject_styles__$2c,
    {},
    __vue_scope_id__$2c,
    __vue_is_functional_template__$2c,
    __vue_module_identifier__$2c,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$2c = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"fluro-panel"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2c = [];

  /* style */
  const __vue_inject_styles__$2d = function (inject) {
    if (!inject) return
    inject("data-v-ece6bb82_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-panel{display:block;background:#fff;margin-bottom:10px;text-align:left;border-radius:4px;overflow:hidden;border:1px solid rgba(0,0,0,.1);box-shadow:0 1px 1px rgba(0,0,0,.1);margin:15px 0}.fluro-panel[margin]{margin-bottom:30px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2d = undefined;
  /* module identifier */
  const __vue_module_identifier__$2d = undefined;
  /* functional template */
  const __vue_is_functional_template__$2d = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2c = normalizeComponent(
    { render: __vue_render__$2c, staticRenderFns: __vue_staticRenderFns__$2c },
    __vue_inject_styles__$2d,
    {},
    __vue_scope_id__$2d,
    __vue_is_functional_template__$2d,
    __vue_module_identifier__$2d,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$2d = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-panel-body"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2d = [];

  /* style */
  const __vue_inject_styles__$2e = function (inject) {
    if (!inject) return
    inject("data-v-8788d7f4_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-panel-body{padding:15px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2e = undefined;
  /* module identifier */
  const __vue_module_identifier__$2e = undefined;
  /* functional template */
  const __vue_is_functional_template__$2e = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2d = normalizeComponent(
    { render: __vue_render__$2d, staticRenderFns: __vue_staticRenderFns__$2d },
    __vue_inject_styles__$2e,
    {},
    __vue_scope_id__$2e,
    __vue_is_functional_template__$2e,
    __vue_module_identifier__$2e,
    false,
    createInjector,
    undefined,
    undefined
  );

/* script */

/* template */
var __vue_render__$2e = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fluro-panel-title"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2e = [];

  /* style */
  const __vue_inject_styles__$2f = function (inject) {
    if (!inject) return
    inject("data-v-38a03862_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.fluro-panel-title{padding:10px 15px;background:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.1)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2f = undefined;
  /* module identifier */
  const __vue_module_identifier__$2f = undefined;
  /* functional template */
  const __vue_is_functional_template__$2f = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2e = normalizeComponent(
    { render: __vue_render__$2e, staticRenderFns: __vue_staticRenderFns__$2e },
    __vue_inject_styles__$2f,
    {},
    __vue_scope_id__$2f,
    __vue_is_functional_template__$2f,
    __vue_module_identifier__$2f,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$2a = {};

/* script */
const __vue_script__$2a = script$2a;

/* template */
var __vue_render__$2f = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex-column"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2f = [];

  /* style */
  const __vue_inject_styles__$2g = function (inject) {
    if (!inject) return
    inject("data-v-9aeb7142_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.flex-column{display:flex;overflow:hidden;flex:1;flex-direction:column}.flex-column[center]{align-items:center;justify-content:center}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2g = undefined;
  /* module identifier */
  const __vue_module_identifier__$2g = undefined;
  /* functional template */
  const __vue_is_functional_template__$2g = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2f = normalizeComponent(
    { render: __vue_render__$2f, staticRenderFns: __vue_staticRenderFns__$2f },
    __vue_inject_styles__$2g,
    __vue_script__$2a,
    __vue_scope_id__$2g,
    __vue_is_functional_template__$2g,
    __vue_module_identifier__$2g,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$2b = {};

/* script */
const __vue_script__$2b = script$2b;

/* template */
var __vue_render__$2g = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex-row"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2g = [];

  /* style */
  const __vue_inject_styles__$2h = function (inject) {
    if (!inject) return
    inject("data-v-f70b9acc_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.flex-row{display:flex;overflow:hidden;flex:1;flex-direction:row}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2h = undefined;
  /* module identifier */
  const __vue_module_identifier__$2h = undefined;
  /* functional template */
  const __vue_is_functional_template__$2h = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2g = normalizeComponent(
    { render: __vue_render__$2g, staticRenderFns: __vue_staticRenderFns__$2g },
    __vue_inject_styles__$2h,
    __vue_script__$2b,
    __vue_scope_id__$2h,
    __vue_is_functional_template__$2h,
    __vue_module_identifier__$2h,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$2c = {};

/* script */
const __vue_script__$2c = script$2c;

/* template */
var __vue_render__$2h = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex-column-header"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2h = [];

  /* style */
  const __vue_inject_styles__$2i = function (inject) {
    if (!inject) return
    inject("data-v-54435f6b_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.flex-column-header{flex:none}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2i = undefined;
  /* module identifier */
  const __vue_module_identifier__$2i = undefined;
  /* functional template */
  const __vue_is_functional_template__$2i = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2h = normalizeComponent(
    { render: __vue_render__$2h, staticRenderFns: __vue_staticRenderFns__$2h },
    __vue_inject_styles__$2i,
    __vue_script__$2c,
    __vue_scope_id__$2i,
    __vue_is_functional_template__$2i,
    __vue_module_identifier__$2i,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$2d = {};

/* script */
const __vue_script__$2d = script$2d;

/* template */
var __vue_render__$2i = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex-column-body"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2i = [];

  /* style */
  const __vue_inject_styles__$2j = function (inject) {
    if (!inject) return
    inject("data-v-48d1fd0a_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.flex-column-body{overflow-y:auto;overflow-x:hidden;-webkit-overflow-scrolling:touch;flex:1;overscroll-behavior-x:none!important}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2j = undefined;
  /* module identifier */
  const __vue_module_identifier__$2j = undefined;
  /* functional template */
  const __vue_is_functional_template__$2j = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2i = normalizeComponent(
    { render: __vue_render__$2i, staticRenderFns: __vue_staticRenderFns__$2i },
    __vue_inject_styles__$2j,
    __vue_script__$2d,
    __vue_scope_id__$2j,
    __vue_is_functional_template__$2j,
    __vue_module_identifier__$2j,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
var script$2e = {};

/* script */
const __vue_script__$2e = script$2e;

/* template */
var __vue_render__$2j = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flex-column-footer"},[_vm._t("default")],2)};
var __vue_staticRenderFns__$2j = [];

  /* style */
  const __vue_inject_styles__$2k = function (inject) {
    if (!inject) return
    inject("data-v-a7bdfd46_0", { source: ".border-top{border-top:1px solid rgba(0,0,0,.05)}.border-right{border-right:1px solid rgba(0,0,0,.05)}.border-bottom{border-bottom:1px solid rgba(0,0,0,.05)}.border-left{border-left:1px solid rgba(0,0,0,.05)}.flex-column-footer{flex:none}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2k = undefined;
  /* module identifier */
  const __vue_module_identifier__$2k = undefined;
  /* functional template */
  const __vue_is_functional_template__$2k = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2j = normalizeComponent(
    { render: __vue_render__$2j, staticRenderFns: __vue_staticRenderFns__$2j },
    __vue_inject_styles__$2k,
    __vue_script__$2e,
    __vue_scope_id__$2k,
    __vue_is_functional_template__$2k,
    __vue_module_identifier__$2k,
    false,
    createInjector,
    undefined,
    undefined
  );

//
//
//
//
//
//
var script$2f = {
  props: {
    mailout: {
      type: String
    },
    cacheKey: {
      type: String
    },
    live: {
      type: Boolean
    },
    definition: {
      type: String
    }
  },

  data() {
    return {
      loaded: false
    };
  },

  computed: {
    currentUser() {
      return this.$fluro.auth.getCurrentUser();
    },

    currentToken() {
      var userToken = this.currentUser ? this.currentUser.token : null;
      var applicationToken = this.$fluro.applicationToken;
      return userToken || applicationToken;
    },

    params() {
      return {
        mailout: this.mailout,
        cb: this.cacheKey,
        live: this.live,
        access_token: this.currentToken
      };
    },

    url() {
      var url = `${this.$fluro.apiURL}/mailout/render/${this.definition}`;
      var queryParameters = this.$fluro.utils.mapParameters(this.params);
      return `${url}?${queryParameters}`;
    }

  }
};

/* script */
const __vue_script__$2f = script$2f;

/* template */
var __vue_render__$2k = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[(!_vm.loaded)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_vm._e(),_vm._v(" "),_c('iframe',{ref:"iframe",staticClass:"mailout-preview-frame",attrs:{"src":_vm.url},on:{"load":function($event){_vm.loaded = true;}}})],1)};
var __vue_staticRenderFns__$2k = [];

  /* style */
  const __vue_inject_styles__$2l = function (inject) {
    if (!inject) return
    inject("data-v-3a85f596_0", { source: ".border-top[data-v-3a85f596]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-3a85f596]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-3a85f596]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-3a85f596]{border-left:1px solid rgba(0,0,0,.05)}iframe.mailout-preview-frame[data-v-3a85f596]{border:none;flex:1}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2l = "data-v-3a85f596";
  /* module identifier */
  const __vue_module_identifier__$2l = undefined;
  /* functional template */
  const __vue_is_functional_template__$2l = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2k = normalizeComponent(
    { render: __vue_render__$2k, staticRenderFns: __vue_staticRenderFns__$2k },
    __vue_inject_styles__$2l,
    __vue_script__$2f,
    __vue_scope_id__$2l,
    __vue_is_functional_template__$2l,
    __vue_module_identifier__$2l,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$2g = {
  components: {
    FluroContentSelectButton: __vue_component__$F
  },
  props: {
    value: {
      type: Object,
      required: true
    }
  },
  methods: {
    test() {
      var self = this;
      self.testing = true;
      var contacts = self.$fluro.utils.arrayIDs(self.testContacts);
      self.$fluro.api.post(`/mailout/${self.model._id}/test`, {
        contacts
      }).then(function (res) {
        self.$fluro.notify(`Sent test email to ${contacts.length} contacts`);
        self.testing = false; // self.testContacts = [];
      }).catch(function (err) {
        self.$fluro.error(err);
        self.testing = false;
      });
    }

  },

  data() {
    return {
      testing: false,
      testContacts: [],
      model: this.value
    };
  }

};

/* script */
const __vue_script__$2g = script$2g;

/* template */
var __vue_render__$2l = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[_c('flex-column-body',{staticStyle:{"background":"#fafafa"}},[_c('v-container',[_c('constrain',{attrs:{"sm":""}},[_c('wrapper',{attrs:{"xs":""}},[_c('h2',[_vm._v("Send Test Email")]),_vm._v(" "),_c('p',[_vm._v("Select contacts below and then hit send to send a test email")])]),_vm._v(" "),_c('v-layout',[_c('v-flex',[_c('fluro-content-select-button',{attrs:{"large":"","block":"","type":"contact","allDefinitions":true},model:{value:(_vm.testContacts),callback:function ($$v) {_vm.testContacts=$$v;},expression:"testContacts"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',[_c('v-btn',{staticClass:"mx-0",attrs:{"block":"","loading":_vm.testing,"color":"primary","disabled":!_vm.testContacts.length,"large":""},on:{"click":function($event){return _vm.test()}}},[_vm._v("\n                            Send to "+_vm._s(_vm.testContacts.length)+"\n                            "),_c('fluro-icon',{attrs:{"icon":"paper-plane","right":""}})],1)],1)],1)],1)],1)],1)],1)};
var __vue_staticRenderFns__$2l = [];

  /* style */
  const __vue_inject_styles__$2m = function (inject) {
    if (!inject) return
    inject("data-v-34f7ab59_0", { source: ".border-top[data-v-34f7ab59]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-34f7ab59]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-34f7ab59]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-34f7ab59]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2m = "data-v-34f7ab59";
  /* module identifier */
  const __vue_module_identifier__$2m = undefined;
  /* functional template */
  const __vue_is_functional_template__$2m = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2l = normalizeComponent(
    { render: __vue_render__$2l, staticRenderFns: __vue_staticRenderFns__$2l },
    __vue_inject_styles__$2m,
    __vue_script__$2g,
    __vue_scope_id__$2m,
    __vue_is_functional_template__$2m,
    __vue_module_identifier__$2m,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$2h = {
  components: {
    FluroContentFormField: __vue_component__$G
  },
  props: {
    value: {
      type: Object,
      required: true
    }
  },
  methods: {
    publish() {
      var self = this;
      var publishDate = this.item.publishDate ? new Date(this.item.publishDate) : null;
      self.publishProcessing = true;
      self.$fluro.api.get(`/mailout/${self.item._id}/publish`, {
        params: {
          date: publishDate
        }
      }).then(function (res) {
        self.item.state = res.data.state;
        self.item.publishDate = res.data.publishDate;
        self.publishProcessing = false;
        self.checkIfCountdownIsNeeded(); // self.checkIfResultsAreNeeded();

        switch (res.data.state) {
          case 'scheduled':
            self.$fluro.notify(`Your mailout has been scheduled successfully`);
            break;

          case 'sent':
            self.$fluro.notify(`Your mailout has been published`);
            break;
        }
      }).catch(function (err) {
        self.$fluro.error(err);
        self.publishProcessing = false;
      });
    },

    abort() {
      var self = this;
      self.abortProcessing = true;
      self.$fluro.api.get(`/mailout/${self.item._id}/abort`).then(function (res) {
        var mailout = res.data;
        self.$fluro.notify(`Mailout schedule cancelled`);
        self.abortProcessing = false;
        self.item.state = mailout.state;
        self.item.publishDate = mailout.publishDate;
        self.checkIfCountdownIsNeeded();
      }).catch(function (err) {
        self.$fluro.error(err);
        self.abortProcessing = false;
      });
    },

    preflight() {
      var self = this;
      self.preflightProcessing = true; //Do a preflight check on the mailout

      self.$fluro.api.get(`/mailout/${this.item._id}/preflight`, {
        cache: false
      }).then(function (res) {
        self.preflightContacts = res.data;
        self.preflightProcessing = false; ////////////////////////////

        self.validContacts = [];
        self.invalidContacts = [];
        self.unsubscribedContacts = []; ////////////////////////////
        //Loop through and categorise the contacts accordingly

        lodash.each(res.data, function (contact) {
          if (!contact.emails || !contact.emails.length) {
            return self.invalidContacts.push(contact);
          }

          if (contact.unsubscribed) {
            return self.unsubscribedContacts.push(contact);
          }

          return self.validContacts.push(contact);
        });
      }).catch(function (err) {
        self.preflightProcessing = false;
      });
    },

    checkIfCountdownIsNeeded() {
      if (this.item.state == 'scheduled') {
        this.startCountdown();
      } else {
        this.stopCountdown();
        this.duration = 0;
      }
    },

    stopCountdown() {
      if (this.timer) {
        clearInterval(this.timer);
      }
    },

    startCountdown() {
      this.stopCountdown();
      this.updateCountdown();
      this.timer = setInterval(this.updateCountdown, 1000);
    },

    updateCountdown() {
      var now = new Date().getTime();
      var when = new Date(this.item.publishDate).getTime();
      var difference = when - now;
      this.duration = difference; // if (now > when) {
      //     this.duration = difference;
      // } else {
      //     this.stopCountdown();
      // }
    }

  },
  watch: {
    'item.state': function () {
      this.checkIfCountdownIsNeeded();
    }
  },

  created() {
    this.preflight();
  },

  mounted() {
    this.checkIfCountdownIsNeeded();
  },

  activated() {
    this.checkIfCountdownIsNeeded();
  },

  deactivated() {
    this.stopCountdown();
  },

  beforeDestroy() {
    this.stopCountdown();
  },

  computed: {
    publishDateField() {
      return {
        // title: 'When to send?',
        key: 'publishDate',
        type: 'date',
        minimum: 0,
        maximum: 1,
        directive: 'datetimepicker',
        // description: this.publishDateHint,
        placeholder: 'Send Immediately' // defaultValues:[new Date()],
        // directive:'datetimeselect',

      };
    },

    publishDateHint() {
      if (this.item.publishDate) {
        return `This email will be sent ${this.$fluro.date.timeago(this.item.publishDate)}`;
      } else {
        return `This email will be sent immediately`;
      }
    },

    validSummary() {
      return this.validContacts.slice(0, 10);
    },

    unsubscribedSummary() {
      return this.unsubscribedContacts.slice(0, 10);
    },

    invalidSummary() {
      return this.invalidContacts.slice(0, 10);
    },

    countdown() {
      return this.$fluro.video.readableMilliseconds(this.duration);
    }

  },

  data() {
    return {
      duration: 0,
      preflightContacts: [],
      invalidContacts: [],
      unsubscribedContacts: [],
      validContacts: [],
      publishProcessing: false,
      abortProcessing: false,
      preflightProcessing: false,
      expanded: {
        invalid: false,
        unsubscribed: false,
        valid: false
      },
      item: this.value
    };
  }

};

/* script */
const __vue_script__$2h = script$2h;

/* template */
var __vue_render__$2m = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[(_vm.preflightProcessing)?_c('fluro-page-preloader',{attrs:{"contain":""}}):_c('flex-column-body',{staticStyle:{"background":"#fafafa"}},[_c('v-container',[_c('constrain',{attrs:{"sm":""}},[_c('wrapper',{attrs:{"xs":""}},[(_vm.item.state == 'scheduled')?[_c('h2',[_vm._v("Sending in "+_vm._s(_vm.countdown))]),_vm._v(" "),(_vm.item.publishDate)?_c('strong',[_vm._v(_vm._s(_vm._f("formatDate")(_vm.item.publishDate,'h:mma - dddd D MMM YYYY')))]):_vm._e()]:[_c('h2',[_vm._v("Preflight check")])],_vm._v(" "),(!_vm.preflightContacts.length)?_c('div',[_c('p',{staticClass:"lead"},[_vm._v("\n                            No contacts were retrieved from selected sources, Edit this mailout and select sources so that you can publish the mailout\n                        ")])]):_c('div',[_c('p',{staticClass:"lead"},[_vm._v("\n                            Sending to "+_vm._s(_vm.validContacts.length)+" of "+_vm._s(_vm.preflightContacts.length)+" selected contacts\n                        ")])])],2),_vm._v(" "),(_vm.preflightContacts.length)?_c('wrapper',{attrs:{"xs":""}},[(_vm.invalidContacts.length)?_c('v-alert',{attrs:{"value":true,"type":"warning","outline":""}},[_c('div',{on:{"click":function($event){_vm.expanded.invalid = !_vm.expanded.invalid;}}},[_c('h5',[_vm._v(_vm._s(_vm.invalidContacts.length)+" selected contacts do not have an email address")])]),_vm._v(" "),(_vm.expanded.invalid)?_c('div',{staticStyle:{"margin-top":"10px"}},[_vm._l((_vm.invalidSummary),function(contact){return _c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{staticClass:"text-capitalize"},[_vm._v(_vm._s(contact.firstName)+" "+_vm._s(contact.lastName))])]),_vm._v(" "),_c('v-flex',{staticClass:"text-sm-right",attrs:{"xs12":"","sm4":"","muted":""}},[_vm._v("\n                                    Does not have an email address\n                                ")])],1)}),_vm._v(" "),(_vm.invalidContacts.length > 10)?_c('div',[_c('br'),_vm._v(" "),_c('em',[_vm._v("And "+_vm._s(_vm.invalidContacts.length - 10)+" more...")])]):_vm._e()],2):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.validContacts.length)?_c('v-alert',{attrs:{"value":true,"type":"success","outline":""}},[_c('div',{on:{"click":function($event){_vm.expanded.valid = !_vm.expanded.valid;}}},[_c('h5',[_vm._v(_vm._s(_vm.validContacts.length)+" contact will receive this email")])]),_vm._v(" "),(_vm.expanded.valid)?_c('div',{staticStyle:{"margin-top":"10px"}},[_vm._l((_vm.validSummary),function(contact){return _c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{staticClass:"text-capitalize"},[_vm._v(_vm._s(contact.firstName)+" "+_vm._s(contact.lastName))])]),_vm._v(" "),_c('v-flex',{staticClass:"text-sm-right",attrs:{"xs12":"","sm4":"","muted":""}},[_c('span',{},[_vm._v("From selected "+_vm._s(_vm._f("comma")(contact.sources)))])])],1)}),_vm._v(" "),(_vm.validContacts.length > 10)?_c('div',[_c('br'),_vm._v(" "),_c('em',[_vm._v("And "+_vm._s(_vm.validContacts.length - 10)+" more...")])]):_vm._e()],2):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.unsubscribedContacts.length)?_c('v-alert',{attrs:{"value":true,"type":"error","outline":""}},[_c('div',{on:{"click":function($event){_vm.expanded.unsubscribed = !_vm.expanded.unsubscribed;}}},[_c('h5',[_c('em',[_vm._v(_vm._s(_vm.unsubscribedContacts.length)+" selected contacts have unsubscribed from mail of this type ")])])]),_vm._v(" "),(_vm.expanded.unsubscribed)?_c('div',{staticStyle:{"margin-top":"10px"}},[_vm._l((_vm.unsubscribedSummary),function(contact){return _c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('strong',{staticClass:"text-capitalize"},[_vm._v(_vm._s(contact.firstName)+" "+_vm._s(contact.lastName))])]),_vm._v(" "),_c('v-flex',{staticClass:"text-sm-right",attrs:{"xs12":"","sm4":"","muted":""}},[_c('span',{},[_vm._v("From selected "+_vm._s(_vm._f("comma")(contact.sources)))])])],1)}),_vm._v(" "),(_vm.unsubscribedContacts.length > 10)?_c('div',[_c('br'),_vm._v(" "),_c('em',[_vm._v("And "+_vm._s(_vm.unsubscribedContacts.length - 10)+" more...")])]):_vm._e()],2):_vm._e()]):_vm._e()],1):_vm._e(),_vm._v(" "),(_vm.item.state == 'scheduled')?[_c('v-btn',{staticClass:"mx-0",attrs:{"color":"error","loading":_vm.abortProcessing,"large":""},on:{"click":function($event){return _vm.abort()}}},[_c('strong',[_vm._v("Stop / Cancel")]),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":"times","right":""}})],1)]:[(_vm.validContacts.length)?_c('div',[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',[_c('fluro-content-form-field',{attrs:{"field":_vm.publishDateField,"persistent-hint":true},model:{value:(_vm.item),callback:function ($$v) {_vm.item=$$v;},expression:"item"}})],1),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-flex',[_c('v-btn',{staticClass:"ma-0",attrs:{"block":"","color":"success","loading":_vm.publishProcessing,"large":""},on:{"click":function($event){return _vm.publish()}}},[(!_vm.item.publishDate)?[_vm._v("\n                                        Publish and send now\n                                        "),_c('fluro-icon',{attrs:{"icon":"angle-right","right":""}})]:[_vm._v("\n                                        Send "+_vm._s(_vm._f("timeago")(_vm.item.publishDate))+"\n                                        "),_vm._v(" "),_c('fluro-icon',{attrs:{"icon":"angle-right","right":""}})]],2)],1)],1)],1):_vm._e()]],2)],1)],1)],1)};
var __vue_staticRenderFns__$2m = [];

  /* style */
  const __vue_inject_styles__$2n = function (inject) {
    if (!inject) return
    inject("data-v-32514d69_0", { source: ".border-top[data-v-32514d69]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-32514d69]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-32514d69]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-32514d69]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2n = "data-v-32514d69";
  /* module identifier */
  const __vue_module_identifier__$2n = undefined;
  /* functional template */
  const __vue_is_functional_template__$2n = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2m = normalizeComponent(
    { render: __vue_render__$2m, staticRenderFns: __vue_staticRenderFns__$2m },
    __vue_inject_styles__$2n,
    __vue_script__$2h,
    __vue_scope_id__$2n,
    __vue_is_functional_template__$2n,
    __vue_module_identifier__$2n,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$2i = {
  props: {
    options: {
      type: Object
    }
  },
  components: {
    FluroTable: __vue_component__$_
  },
  mixins: [FluroModalMixin],
  computed: {
    columns() {
      return [{
        title: 'Event',
        key: 'title'
      }, {
        title: 'Date',
        key: 'date',
        sortType: 'date',
        renderer: __vue_component__$l
      }, {
        title: 'When',
        key: 'date',
        sortType: 'date',
        renderer: __vue_component__$n
      }];
    },

    item() {
      return this.options.item;
    }

  }
};

/* script */
const __vue_script__$2i = script$2i;

/* template */
var __vue_render__$2n = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"modal-size"},[_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":"mailout"},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('h3',[_vm._v(_vm._s(_vm.item.firstName)+" "+_vm._s(_vm.item.lastName))])]},proxy:true},{key:"right",fn:function(){return [_c('v-btn',{staticClass:"ma-0",attrs:{"small":""},on:{"click":function($event){return _vm.close()}}},[_vm._v("\n                    Close\n                ")])]},proxy:true},{key:"rightmobile",fn:function(){return [_c('v-btn',{staticClass:"ma-0",attrs:{"small":""},on:{"click":function($event){return _vm.close()}}},[_vm._v("\n                    Close\n                ")])]},proxy:true}])})],1),_vm._v(" "),_c('flex-column-body',[_c('v-container',[_c('v-layout',[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("First Name")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.firstName))])])]),_vm._v(" "),_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("Last Name")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.lastName))])])])],1),_vm._v(" "),_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("Sent To")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.email))])]),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("State")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.state))])])])],1),_vm._v(" "),_c('v-layout',[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("Correspondence ID")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.correspondenceID || _vm.item._id))])])]),_vm._v(" "),_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"form-group"},[_c('label',[_vm._v("Sending Server ID")]),_vm._v(" "),_c('div',[_vm._v(_vm._s(_vm.item.worker))])])])],1),_vm._v(" "),_c('fluro-panel',[_c('fluro-panel-title',[_vm._v("Tracked Events")]),_vm._v(" "),_c('fluro-table',{staticStyle:{"max-height":"50vh"},attrs:{"enableSelection":false,"defaultSort":"date","defaultSortType":"date","pageSize":25,"items":_vm.item.trackedEvents,"columns":_vm.columns}})],1)],1)],1)],1)};
var __vue_staticRenderFns__$2n = [];

  /* style */
  const __vue_inject_styles__$2o = function (inject) {
    if (!inject) return
    inject("data-v-64368c21_0", { source: ".border-top[data-v-64368c21]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-64368c21]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-64368c21]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-64368c21]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2o = "data-v-64368c21";
  /* module identifier */
  const __vue_module_identifier__$2o = undefined;
  /* functional template */
  const __vue_is_functional_template__$2o = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2n = normalizeComponent(
    { render: __vue_render__$2n, staticRenderFns: __vue_staticRenderFns__$2n },
    __vue_inject_styles__$2o,
    __vue_script__$2i,
    __vue_scope_id__$2o,
    __vue_is_functional_template__$2o,
    __vue_module_identifier__$2o,
    false,
    createInjector,
    undefined,
    undefined
  );

//
var script$2j = {
  props: {
    options: {
      type: Object
    }
  },
  mixins: [FluroModalMixin],
  components: {
    FluroContentForm: __vue_component__$H,
    FluroContentFormField: __vue_component__$G,
    FluroContentSelectButton: __vue_component__$F
  },

  data() {
    return {
      model: {
        contact: {},
        personas: [],
        contacts: []
      },
      loading: false,
      sending: false
    };
  },

  computed: {
    invalid() {
      var contact = this.model.contact;

      if (!contact.gender || !contact.gender.length) {
        return true;
      }

      if (!contact.firstName || !contact.firstName.length) {
        return true;
      }

      if (!contact.lastName || !contact.lastName.length) {
        return true;
      }

      if (!contact.email || !contact.email.length) {
        return true;
      }
    },

    newContactFields() {
      var array = [];
      array.push({
        type: 'group',
        sameLine: true,
        fields: [{
          title: 'Title',
          minimum: 1,
          maximum: 1,
          type: 'string',
          key: 'gender',
          directive: 'select',
          options: [{
            name: 'Mr',
            value: 'male'
          }, {
            name: 'Ms / Mrs',
            value: 'female'
          }]
        }, {
          title: 'First Name',
          minimum: 1,
          maximum: 1,
          type: 'string',
          key: 'firstName'
        }, {
          title: 'Last Name',
          minimum: 1,
          maximum: 1,
          type: 'string',
          key: 'lastName'
        }]
      });
      array.push({
        title: 'Email Address',
        minimum: 1,
        maximum: 1,
        type: 'email',
        key: 'email'
      });
      return array;
    },

    item() {
      return this.options.item;
    }

  },
  methods: {
    sendTo(type) {
      var self = this; // switch(type) {
      // 	case 'contact':
      // 	break;
      // 	case 'contacts':
      // 	break;
      // 	case 'persona':
      // 	break;
      // }
      /////////////////////////////////////////

      self.sending = true;
      self.$fluro.api.post(`/mailout/${self.item._id}/push`, self.model).then(function (res) {
        self.sending = false;
        return self.close(res.data);
      }).catch(function (err) {
        self.sending = false;
        console.log('Error!', err);
        self.$fluro.error(err);
      });
    }

  }
};

/* script */
const __vue_script__$2j = script$2j;

/* template */
var __vue_render__$2o = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',{staticClass:"modal-size"},[(_vm.loading)?_c('v-container',{staticClass:"text-xs-center"},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1):[_c('flex-column-header',{staticClass:"border-bottom"},[_c('page-header',{attrs:{"type":"policy"},scopedSlots:_vm._u([{key:"left",fn:function(){return [_c('h3',[_vm._v("Push Mailout")])]},proxy:true}])})],1),_vm._v(" "),_c('tabset',{attrs:{"justified":true}},[_c('tab',{attrs:{"heading":"New Contact"}},[_c('flex-column-body',{staticStyle:{"background":"#fafafa"}},[_c('v-container',[_c('p',[_vm._v("Input a new contact's details below to create them and send them this mailout")]),_vm._v(" "),_c('fluro-content-form',{attrs:{"fields":_vm.newContactFields},model:{value:(_vm.model.contact),callback:function ($$v) {_vm.$set(_vm.model, "contact", $$v);},expression:"model.contact"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"px-0":"","py-2":""}},[_c('v-layout',[_c('v-btn',{attrs:{"flat":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                                Cancel\n                            ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"loading":_vm.sending,"color":"primary","disabled":_vm.invalid},on:{"click":function($event){return _vm.sendTo('contact')}}},[_vm._v("\n                                Push\n                                "),_c('fluro-icon',{attrs:{"icon":"angle-right"}})],1)],1)],1)],1)],1),_vm._v(" "),_c('tab',{attrs:{"heading":"Existing contacts"}},[_c('flex-column-body',[_c('v-container',[_c('p',[_vm._v("Select contacts from your database to add them to this mailout")]),_vm._v(" "),_c('fluro-content-select-button',{attrs:{"block":"","type":"contact","allDefinitions":true},model:{value:(_vm.model.contacts),callback:function ($$v) {_vm.$set(_vm.model, "contacts", $$v);},expression:"model.contacts"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"px-0":"","py-2":""}},[_c('v-layout',[_c('v-btn',{attrs:{"flat":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                                Cancel\n                            ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"loading":_vm.sending,"color":"primary","disabled":!_vm.model.contacts.length},on:{"click":function($event){return _vm.sendTo('contacts')}}},[_vm._v("\n                                Push "+_vm._s(_vm.model.contacts.length)+"\n                                "),_c('fluro-icon',{attrs:{"icon":"angle-right"}})],1)],1)],1)],1)],1),_vm._v(" "),_c('tab',{attrs:{"heading":"User Personas"}},[_c('flex-column-body',[_c('v-container',[_c('p',[_vm._v("Select users from your database to add them to this mailout")]),_vm._v(" "),_c('fluro-content-select-button',{attrs:{"block":"","type":"persona"},model:{value:(_vm.model.personas),callback:function ($$v) {_vm.$set(_vm.model, "personas", $$v);},expression:"model.personas"}})],1)],1),_vm._v(" "),_c('flex-column-footer',{staticClass:"border-top"},[_c('v-container',{attrs:{"px-0":"","py-2":""}},[_c('v-layout',[_c('v-btn',{attrs:{"flat":""},on:{"click":function($event){return _vm.dismiss()}}},[_vm._v("\n                                Cancel\n                            ")]),_vm._v(" "),_c('v-spacer'),_vm._v(" "),_c('v-btn',{attrs:{"loading":_vm.sending,"color":"primary","disabled":!_vm.model.personas.length},on:{"click":function($event){return _vm.sendTo('personas')}}},[_vm._v("\n                                Push "+_vm._s(_vm.model.personas.length)+"\n                                "),_c('fluro-icon',{attrs:{"icon":"angle-right"}})],1)],1)],1)],1)],1)],1)]],2)};
var __vue_staticRenderFns__$2o = [];

  /* style */
  const __vue_inject_styles__$2p = function (inject) {
    if (!inject) return
    inject("data-v-0bf46634_0", { source: ".border-top[data-v-0bf46634]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-0bf46634]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-0bf46634]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-0bf46634]{border-left:1px solid rgba(0,0,0,.05)}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2p = "data-v-0bf46634";
  /* module identifier */
  const __vue_module_identifier__$2p = undefined;
  /* functional template */
  const __vue_is_functional_template__$2p = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2o = normalizeComponent(
    { render: __vue_render__$2o, staticRenderFns: __vue_staticRenderFns__$2o },
    __vue_inject_styles__$2p,
    __vue_script__$2j,
    __vue_scope_id__$2p,
    __vue_is_functional_template__$2p,
    __vue_module_identifier__$2p,
    false,
    createInjector,
    undefined,
    undefined
  );

//
let InfoCell = Vue.extend({
  props: {
    'row': {
      type: Object
    },
    'column': {
      type: Object
    },
    'data': {// type: Object,
    }
  },
  methods: {
    info() {
      this.$fluro.modal({
        component: __vue_component__$2n,
        options: {
          item: this.row
        }
      });
    }

  },
  template: `<v-btn class="ma-0" small @click="info">
   Info
    </v-btn>`
});
var script$2k = {
  components: {
    SearchInput: __vue_component__$$,
    FluroTable: __vue_component__$_
  },
  props: {
    value: {
      type: Object,
      required: true
    }
  },
  methods: {
    push() {
      var self = this;
      self.$fluro.modal({
        component: __vue_component__$2o,
        options: {
          item: self.item
        }
      }).then(function (res) {
        self.loadCorrespondenceResults();
      });
    },

    checkIfResultsAreNeeded() {
      if (this.resultsEnabled) {
        this.startResultsPoll();
      } else {
        this.stopResultsPoll();
      }
    },

    startResultsPoll() {
      console.log('START POLLING');
      this.stopResultsPoll();
      this.loadCorrespondenceResults();
      this.pollTimer = setInterval(this.loadCorrespondenceResults, this.resultsInterval);
    },

    stopResultsPoll() {
      if (this.pollTimer) {
        clearInterval(this.pollTimer);
      }
    },

    loadCorrespondenceResults() {
      console.log('load results');
      var self = this;

      if (self.polling) {
        return;
      } //////////////////////////////////


      self.polling = true;
      self.$fluro.api.get(`/mailout/${this.item._id}/correspondence`, {
        params: {
          timestamp: new Date()
        }
      }).then(function (res) {
        self.emailsLoaded = true;
        self.emails = lodash.map(res.data, function (email) {
          // console.log('EMAIL', email);
          email.correspondenceID = email._id;
          email._id = email.contact;
          email._type = 'contact';
          return email;
        });
        self.polling = false;
      }).catch(function (err) {
        self.polling = false;
      });
    }

  },
  watch: {
    'resultsEnabled': function () {
      this.checkIfResultsAreNeeded();
    }
  },

  mounted() {
    this.checkIfResultsAreNeeded();
  },

  activated() {
    this.checkIfResultsAreNeeded();
  },

  deactivated() {
    this.stopResultsPoll();
  },

  beforeDestroy() {
    this.stopResultsPoll();
  },

  computed: {
    resultsInterval() {
      var when = new Date(this.item.publishDate); // if ((now - when) < (86400 * 1000)) {

      return 5000; // } else {
    },

    urls() {
      var self = this; /////////////////////////////////////////////////////

      function removeURLParameter(url, parameter) {
        //prefer to use l.search if you have a location/link object
        var urlparts = url.split('?');

        if (urlparts.length >= 2) {
          var prefix = encodeURIComponent(parameter) + '=';
          var pars = urlparts[1].split(/[&;]/g); //reverse iteration as may be destructive

          for (var i = pars.length; i-- > 0;) {
            //idiom for string.startsWith
            if (pars[i].lastIndexOf(prefix, 0) !== -1) {
              pars.splice(i, 1);
            }
          }

          url = urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
          return url;
        } else {
          return url;
        }
      } /////////////////////////////////////////////////////


      return lodash.chain(self.emailsClicked).map(function (item) {
        return item.trackedEvents;
      }).flatten().filter(function (event) {
        return event.type == 'click' || event.type == 'clicked';
      }).reduce(function (resultSet, event) {
        var eventURL = removeURLParameter(event.url, 'correspondence');

        var existing = lodash.find(resultSet, {
          url: eventURL
        });

        if (!existing) {
          existing = {
            url: eventURL,
            count: 1
          };
          resultSet.push(existing);
        } else {
          existing.count++;
        }

        return resultSet;
      }, []).sortBy(function (link) {
        return -link.count;
      }).map(function (link) {
        link.percent = Math.ceil(link.count / self.emails.length * 100);
        return link;
      }).value();
    },

    clickPercentage() {
      var total = this.emails.length;
      var count = this.emailsClicked.length;
      return Math.ceil(count / total * 100);
    },

    openPercentage() {
      var total = this.emails.length;
      var count = this.emailsOpened.length;
      return Math.ceil(count / total * 100);
    },

    segments() {
      var self = this;
      var filtered = self.emails; /////////////////////////////////////////

      if (self.search && self.search.length) {
        var searchKeywords = self.search.toLowerCase();
        filtered = lodash.filter(filtered, function (email) {
          var title = `${email.firstName} ${email.lastName}`.toLowerCase();
          return title.includes(searchKeywords);
        });
      } /////////////////////////////////////////


      return lodash.chain(filtered).reduce(function (set, email) {
        var stateName = email.state;

        switch (stateName) {
          case 'open':
            stateName = 'Opened';
            break;

          case 'click':
            stateName = 'Clicked';
            break;

          case 'sent':
            stateName = 'Unopened';
            break;

          default:
            stateName = lodash.startCase(stateName);
            break;
        }

        var existing = set[stateName];

        if (!existing) {
          existing = set[stateName] = {
            title: stateName,
            emails: []
          };
        }

        existing.emails.push(email);
        return set;
      }, {}).orderBy(function (set) {
        return set.title;
      }).values();
    },

    emailsClicked() {
      var self = this;
      return lodash.filter(self.emails, function (email) {
        return email.state == 'click';
      });
    },

    emailsOpened() {
      var self = this;
      return lodash.filter(self.emails, function (email) {
        return email.state == 'click' || email.state == 'open';
      });
    },

    emailsErrored() {
      var self = this;
      return lodash.filter(self.emails, function (email) {
        return email.state == 'error';
      });
    },

    resultsEnabled() {
      var self = this;

      if (self.item.state == 'sent') {
        return true;
      }

      if (self.item.stats && self.item.stats.mailoutSent) {
        return true;
      }
    }

  },

  data() {
    return {
      emailsLoaded: false,
      search: '',
      columns: [{
        title: '',
        key: '_id',
        renderer: __vue_component__$1b
      }, {
        title: 'First Name',
        key: 'firstName'
      }, {
        title: 'Last Name',
        key: 'lastName'
      }, {
        title: 'Email Address',
        key: 'email'
      }, {
        title: 'State',
        key: 'state',
        renderer: __vue_component__$x
      }, {
        title: 'Info',
        key: 'correspondenceID',
        renderer: InfoCell
      }],
      emails: [],
      polling: false,
      item: this.value
    };
  }

};

/* script */
const __vue_script__$2k = script$2k;

/* template */
var __vue_render__$2p = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('flex-column',[_c('flex-column-body',{staticStyle:{"background":"#fafafa"}},[_c('v-container',[_c('constrain',{attrs:{"sm":""}},[_c('wrapper',{attrs:{"xs":""}},[_c('h2',[_vm._v(_vm._s(_vm.item.subject))]),_vm._v(" "),_c('div',{staticClass:"muted"},[_c('strong',[_c('span',{staticClass:"text-capitalize"},[_vm._v(_vm._s(_vm.item.mailoutType))]),_vm._v(" mailout sent from "+_vm._s(_vm.item.fromEmail))])]),_vm._v(" "),_c('div',[_c('strong',[_vm._v(_vm._s(_vm.emails.length)+" Recipients in total")])])]),_vm._v(" "),_c('wrapper',{attrs:{"xs":""}},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"stat-box"},[_c('label',[_vm._v("Clicked")]),_vm._v(" "),_c('h3',[_vm._v("\n                                    "+_vm._s(_vm.emailsClicked.length)+"\n                                ")])])]),_vm._v(" "),_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('div',{staticClass:"stat-box "},[_c('label',[_vm._v("Opened")]),_vm._v(" "),_c('h3',[_vm._v("\n                                    "+_vm._s(_vm.emailsOpened.length)+"\n                                ")])])]),_vm._v(" "),(_vm.emailsErrored.length)?_c('v-flex',{attrs:{"xs12":"","sm4":""}},[_c('div',{staticClass:"stat-box "},[_c('label',[_vm._v("Failed")]),_vm._v(" "),_c('h3',[_vm._v("\n                                    "+_vm._s(_vm.emailsErrored.length)+"\n                                ")])])]):_vm._e()],1)],1),_vm._v(" "),(!_vm.emailsLoaded)?_c('wrapper',{staticClass:"text-xs-center",attrs:{"xs":""}},[_c('v-progress-circular',{attrs:{"indeterminate":""}})],1):[_c('wrapper',{staticClass:"border-top",attrs:{"xs":""}},[_c('v-container',{attrs:{"grid-list-xl":"","pa-0":""}},[_c('v-layout',{attrs:{"row":"","wrap":""}},[_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('h4',[_vm._v(_vm._s(_vm.clickPercentage)+"% Click Rate")]),_vm._v(" "),_c('v-progress-linear',{attrs:{"value":_vm.clickPercentage}})],1),_vm._v(" "),_c('v-flex',{attrs:{"xs12":"","sm6":""}},[_c('h4',[_vm._v(_vm._s(_vm.openPercentage)+"% Open Rate")]),_vm._v(" "),_c('v-progress-linear',{attrs:{"value":_vm.openPercentage}})],1)],1)],1)],1),_vm._v(" "),(_vm.urls.length)?_c('fluro-panel',[_c('fluro-panel-title',[_vm._v("\n                            Top Links\n                        ")]),_vm._v(" "),_c('div',_vm._l((_vm.urls),function(url){return _c('a',{staticClass:"row-item",attrs:{"href":url.url,"target":"_blank"}},[_c('v-layout',{attrs:{"align-center":""}},[_c('v-flex',{staticClass:"small"},[_vm._v(_vm._s(url.url))]),_vm._v(" "),_c('div',[_c('strong',[_vm._v(_vm._s(url.count))]),_vm._v(" clicks "),_c('span',{staticClass:"muted"},[_vm._v("("+_vm._s(url.percent)+"%)")])])],1)],1)}),0)],1):_vm._e(),_vm._v(" "),_c('fluro-panel',[_c('fluro-panel-body',{staticClass:"border-bottom"},[_c('v-layout',[_c('v-flex',[_c('search-input',{model:{value:(_vm.search),callback:function ($$v) {_vm.search=$$v;},expression:"search"}})],1),_vm._v(" "),_c('div',[_c('v-btn',{staticClass:"ma-0 ml-2",attrs:{"color":"primary"},on:{"click":function($event){return _vm.push()}}},[_vm._v("Push\n                                        "),_c('fluro-icon',{attrs:{"icon":"plus","right":""}})],1)],1)],1)],1),_vm._v(" "),_c('div',{staticStyle:{"background":"#fafafa"}},[_c('tabset',_vm._l((_vm.segments),function(segment){return _c('tab',{attrs:{"heading":((segment.emails.length) + " " + (segment.title))}},[_c('fluro-table',{staticStyle:{"max-height":"50vh"},attrs:{"trackingKey":"correspondenceID","defaultSort":"firstName","pageSize":25,"items":segment.emails,"columns":_vm.columns}})],1)}),1)],1)],1)]],2)],1)],1)],1)};
var __vue_staticRenderFns__$2p = [];

  /* style */
  const __vue_inject_styles__$2q = function (inject) {
    if (!inject) return
    inject("data-v-e7939e58_0", { source: ".border-top[data-v-e7939e58]{border-top:1px solid rgba(0,0,0,.05)}.border-right[data-v-e7939e58]{border-right:1px solid rgba(0,0,0,.05)}.border-bottom[data-v-e7939e58],.row-item[data-v-e7939e58]{border-bottom:1px solid rgba(0,0,0,.05)}.border-left[data-v-e7939e58]{border-left:1px solid rgba(0,0,0,.05)}.row-item[data-v-e7939e58]{display:block;padding:10px;color:inherit;text-decoration:none}.row-item[data-v-e7939e58]:hover{background:#fafafa}.stat-box[data-v-e7939e58]{padding:10px;border:1px solid rgba(0,0,0,.1);border-radius:3px;text-align:center;margin:2px;background:linear-gradient(#fff,#fafafa)}.stat-box label[data-v-e7939e58]{text-transform:uppercase;font-weight:500;font-size:10px;opacity:.5;letter-spacing:.05em}.stat-box h3[data-v-e7939e58]{font-size:40px;display:block;line-height:50px}", map: undefined, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2q = "data-v-e7939e58";
  /* module identifier */
  const __vue_module_identifier__$2q = undefined;
  /* functional template */
  const __vue_is_functional_template__$2q = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2p = normalizeComponent(
    { render: __vue_render__$2p, staticRenderFns: __vue_staticRenderFns__$2p },
    __vue_inject_styles__$2q,
    __vue_script__$2k,
    __vue_scope_id__$2q,
    __vue_is_functional_template__$2q,
    __vue_module_identifier__$2q,
    false,
    createInjector,
    undefined,
    undefined
  );

var DynamicPageMixin = {
  props: {
    initPage: {
      type: [Number, String],
      default: 1
    },
    pageSize: {
      type: Number,
      default: 50
    }
  },

  data() {
    console.log('INITIAL PAGE IS', this.initPage);
    return {
      page: [],
      perPage: this.pageSize,
      currentPage: parseInt(this.initPage)
    };
  },

  filters: {
    numberWithCommas(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

  },
  methods: {
    setPage(pageNumber) {
      if (this.currentPage == pageNumber) {
        //console.log('Already at page', pageNumber)
        return;
      }

      console.log('SET PAGE NUMBER', pageNumber);
      this.currentPage = pageNumber; // this.pageChange();

      var topElement = this.$refs.top;

      if (topElement) {
        // console.log('SCROLL INTO VIEW')
        topElement.scrollIntoView({// block:'center',
          // behavior:'smooth',
        });
      } // console.log('Recreate page!')


      this.$emit('page', pageNumber);
    },

    firstPage() {
      this.currentPage = 1;
    },

    lastPage() {
      this.currentPage = this.totalPages;
    },

    nextPage() {
      console.log('PAGES', this.currentPage, this.totalPages);
      this.currentPage < this.totalPages ? this.setPage(this.currentPage + 1) : this.setPage(this.totalPages);
    },

    previousPage() {
      this.currentPage > 1 ? this.setPage(this.currentPage - 1) : this.setPage(1);
    },

    selectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      if (this.selectionController) {
        this.selectionController.selectMultiple(this.page);
      }
    },

    deselectPage() {
      if (!this.page || !this.page.length) {
        return;
      }

      if (this.selectionController) {
        this.selectionController.deselectMultiple(this.page);
      }
    },

    selectAll() {
      if (this.selectionController) {
        this.selectionController.selectMultiple(this.rows);
      }
    },

    deselectAll() {
      if (this.selectionController) {
        this.selectionController.deselectAll();
      }
    }

  },
  computed: {
    previousPageDisabled() {
      return this.currentPage <= 1;
    },

    nextPageDisabled() {
      return this.currentPage == this.totalPages;
    },

    filteredTotal() {
      return this.rows.length;
    },

    availablePages() {
      var chunk = lodash.chunk(this.rows, this.perPage);

      return chunk;
    },

    startOffset() {
      return Math.floor((this.currentPage - 1) * this.perPage);
    },

    endOffset() {
      return Math.min(this.startOffset + this.perPage, this.filteredTotal);
    },

    totalPages() {
      return this.availablePages ? this.availablePages.length : 0;
    }

  }
};

var FluroContactCommunicateMixin = {
  asyncComputed: {
    postable: {
      default: [],

      get() {
        var self = this; /////////////////////////////////////////////////////////////////

        return new Promise(function (resolve, reject) {
          return self.$fluro.types.subTypes('post').then(function (res) {
            var filtered = lodash.filter(res, function (postType) {
              var canSubmit = self.$fluro.access.can('submit', postType.definitionName, 'post');
              var canCreate = self.$fluro.access.can('create', postType.definitionName, 'post');
              return canSubmit || canCreate;
            });

            resolve(filtered);
          }).catch(reject);
        });
      }

    }
  },
  computed: {
    phoneNumbers() {
      var self = this;
      var contact = self.model || self.item;
      var array = [];

      if (contact.phoneNumbers && contact.phoneNumbers.length) {
        array = array.concat(contact.phoneNumbers);
      }

      if (contact.family && contact.family.phoneNumbers && contact.family.phoneNumbers.length) {
        array = array.concat(contact.family.phoneNumbers);
      }

      return array;
    },

    canPost() {
      return this.postable.length;
    },

    canEmail() {
      var self = this;
      var contact = self.model || self.item;
      return contact.emails && contact.emails.length;
    },

    canCall() {
      var self = this;
      return self.phoneNumbers && self.phoneNumbers.length;
    },

    canSMS() {
      var self = this;
      var contact = self.model || self.item;
      return contact.phoneNumbers && contact.phoneNumbers.length;
    }

  },
  methods: {
    addPost() {
      console.log('ADD NEW POST');
      var self = this; //Load all the types of posts we can create

      return self.$fluro.types.subTypes('post').then(function (definitions) {
        var mapped = lodash.chain(definitions).map(function (def) {
          // console.log('DEF', def);
          if (def.status == 'archived') {
            return;
          }

          if (def.systemOnly) {
            return;
          }

          return {
            title: `New ${def.title}`,
            definition: def
          };
        }).compact().value(); /////////////////////////////


        self.$fluro.options(mapped).then(function (answer) {
          var options = {
            definition: answer.definition,
            items: [self.model]
          }; ///////////////////////////

          var promise = self.$fluro.modal({
            component: __vue_component__$1u,
            options
          });
        });
      });
    },

    communicate(channel) {
      var self = this;
      var contact = self.model || self.item;
      var contactID = self.$fluro.utils.getStringID(contact);

      switch (channel) {
        case 'vcard':
          var token = self.$fluro.auth.getCurrentToken();

          if (process.browser) {
            window.open(`${self.$fluro.apiURL}/contact/${contactID}/vcard.vcf?access_token=${token}`, '_blank');
          }

          break;

        case 'phone':
          // console.log('CALL NOW?', self.model.phoneNumbers)
          var phoneNumbers = contact.international || self.phoneNumbers;
          self.$communications.call(phoneNumbers);
          break;

        case 'email':
          // console.log('EMAIL NOW?', contact.emails)
          self.$communications.email([contact]);
          break;

        case 'sms':
          // console.log('SMS NOW?', contact.emails)
          self.$communications.sms([contact]);
          break;
      }
    }

  }
};

console.log('fluro-vue-ui 2.1.32'); /////////////////////////////////////////////////////
/**
 * An install function.
 *
 * @param {any} Vue Vue API.
 */

function install$1(Vue, options) {
  var fluro = Vue.prototype.$fluro; //Setup a modals array

  fluro.global.modals = []; /////////////////////////////////////////////
  //Add a function to show modals

  fluro.modal = function (modal) {
    return new Promise(function (resolve, reject) {
      modal.modalID = fluro.global.modals.length;
      modal.resolve = resolve;
      modal.reject = reject; //Inject the modal into the stack

      fluro.global.modals.splice(modal.modalID, 0, modal);
    });
  }; /////////////////////////////////////////////
  //Request the user to answer some questions


  fluro.options = function (options, title, description) {
    return fluro.modal({
      component: __vue_component__$1H,
      options: {
        title,
        description,
        options
      }
    });
  }; /////////////////////////////////////////////
  //Request the user to answer some questions


  fluro.prompt = function (fields, title, model) {
    return fluro.modal({
      component: __vue_component__$1I,
      options: {
        title,
        fields,
        model
      }
    });
  }; /////////////////////////////////////////////


  fluro.confirm = function (title, description, options) {
    if (!options) {
      options = {};
    }

    options.title = title;
    options.description = description;
    return fluro.modal({
      component: __vue_component__$1J,
      options
    });
  }; /////////////////////////////////////////////


  fluro.closeModal = function (modalID) {
    var modal = lodash.find(fluro.global.modals, {
      modalID
    });

    var index = lodash.findIndex(fluro.global.modals, modal);

    fluro.global.modals.splice(index, 1);
  }; /////////////////////////////////////////////////////


  Vue.mixin(Layout); //Add Fluro Components Globally

  Vue.component('fluro-icon', __vue_component__$1Z);
  Vue.component('fluro-realm-dots', __vue_component__$q);
  Vue.component('fluro-realm-tags', __vue_component__$1_);
  Vue.component('fluro-realm-bar', __vue_component__$g);
  Vue.component('fluro-status-label', __vue_component__$1N);
  Vue.component('fluro-avatar', __vue_component__$4);
  Vue.component('fluro-image', __vue_component__$3);
  Vue.component('fluro-list-item', __vue_component__$1K);
  Vue.component('fluro-toggle-item', __vue_component__$1G);
  Vue.component('fluro-video', __vue_component__$1);
  Vue.component('fluro-video-thumbnail', __vue_component__$U);
  Vue.component('fluro-page-preloader', __vue_component__$1X); // Vue.component('fluro-html', FluroHTML);

  Vue.component('flex-row', __vue_component__$2g);
  Vue.component('flex-column', __vue_component__$2f);
  Vue.component('flex-column-body', __vue_component__$2i);
  Vue.component('flex-column-header', __vue_component__$2h);
  Vue.component('flex-column-footer', __vue_component__$2j);
} /////////////////////////////////////////////////////


if (typeof window !== 'undefined' && window.Vue) {
  install$1(window.Vue);
}

var index = {
  install: install$1
};

export { __vue_component__$1C as $, __vue_component__$13 as A, __vue_component__$k as B, __vue_component__$14 as C, __vue_component__$y as D, __vue_component__$15 as E, __vue_component__$3 as F, __vue_component__$n as G, __vue_component__$16 as H, __vue_component__$17 as I, __vue_component__$18 as J, __vue_component__$19 as K, __vue_component__$1a as L, __vue_component__$1b as M, __vue_component__$j as N, __vue_component__$1c as O, __vue_component__$1d as P, __vue_component__$1t as Q, __vue_component__$m as R, __vue_component__$$ as S, __vue_component__$h as T, __vue_component__$1v as U, __vue_component__$1w as V, __vue_component__$1x as W, __vue_component__$1y as X, __vue_component__$1z as Y, __vue_component__$1A as Z, __vue_component__ as _, FluroModalMixin as a, __vue_component__$2i as a$, __vue_component__$1D as a0, __vue_component__$1E as a1, __vue_component__$1F as a2, __vue_component__$1G as a3, __vue_component__$1i as a4, __vue_component__$1H as a5, __vue_component__$1I as a6, __vue_component__$1J as a7, __vue_component__$1K as a8, __vue_component__$1e as a9, __vue_component__$F as aA, __vue_component__$t as aB, __vue_component__$1M as aC, __vue_component__$1U as aD, __vue_component__$1g as aE, __vue_component__$K as aF, __vue_component__$22 as aG, __vue_component__$H as aH, __vue_component__$G as aI, __vue_component__$d as aJ, __vue_component__$a as aK, __vue_component__$23 as aL, __vue_component__$24 as aM, __vue_component__$25 as aN, __vue_component__$P as aO, __vue_component__$26 as aP, __vue_component__$27 as aQ, __vue_component__$28 as aR, __vue_component__$29 as aS, __vue_component__$2a as aT, __vue_component__$2b as aU, __vue_component__$2c as aV, __vue_component__$2d as aW, __vue_component__$2e as aX, __vue_component__$2f as aY, __vue_component__$2g as aZ, __vue_component__$2h as a_, __vue_component__$1Q as aa, __vue_component__$1R as ab, __vue_component__$v as ac, __vue_component__$u as ad, __vue_component__$1l as ae, __vue_component__$1k as af, __vue_component__$1W as ag, __vue_component__$1X as ah, __vue_component__$1Y as ai, __vue_component__$1Z as aj, __vue_component__$q as ak, __vue_component__$1_ as al, __vue_component__$1N as am, __vue_component__$1O as an, __vue_component__$e as ao, __vue_component__$f as ap, __vue_component__$g as aq, __vue_component__$c as ar, __vue_component__$b as as, __vue_component__$1$ as at, __vue_component__$20 as au, __vue_component__$21 as av, __vue_component__$D as aw, __vue_component__$E as ax, __vue_component__$1u as ay, __vue_component__$C as az, __vue_component__$4 as b, __vue_component__$2j as b0, __vue_component__$1h as b1, __vue_component__$1j as b2, __vue_component__$2k as b3, __vue_component__$2l as b4, __vue_component__$2m as b5, __vue_component__$2p as b6, Layout as b7, DynamicListMixin as b8, DynamicPageMixin as b9, FluroContactCommunicateMixin as ba, FluroSelectionMixin as bb, normalizeComponent as bc, createInjector as bd, lodash as be, __vue_component__$1B as bf, templates as bg, _objectSpread2$1 as bh, __vue_component__$5 as c, __vue_component__$Q as d, __vue_component__$8 as e, __vue_component__$S as f, __vue_component__$T as g, __vue_component__$1 as h, index as i, __vue_component__$U as j, __vue_component__$V as k, __vue_component__$L as l, __vue_component__$W as m, __vue_component__$Z as n, __vue_component__$_ as o, __vue_component__$i as p, __vue_component__$o as q, __vue_component__$p as r, __vue_component__$w as s, __vue_component__$A as t, __vue_component__$10 as u, __vue_component__$11 as v, __vue_component__$x as w, __vue_component__$l as x, __vue_component__$12 as y, __vue_component__$z as z };
//# sourceMappingURL=index-e7a8996d.js.map
